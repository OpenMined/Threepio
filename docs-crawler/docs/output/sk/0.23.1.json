[
{"code": "sklearn.compose.make_column_selector(pattern=None,*,dtype_include=None,dtype_exclude=None)\u00b6", "function_name": "make_column_selector", "args": ["*"], "kwargs": [["pattern", "None"], ["dtype_include", "None"], ["dtype_exclude", "None"]]},
{"code": "sklearn.compose.make_column_transformer(*transformers,**kwargs)\u00b6", "function_name": "make_column_transformer", "args": ["*transformers", "**kwargs"], "kwargs": []},
{"code": "sklearn.cluster.ward_tree(X,*,connectivity=None,n_clusters=None,return_distance=False)\u00b6", "function_name": "ward_tree", "args": ["X", "*"], "kwargs": [["connectivity", "None"], ["n_clusters", "None"], ["return_distance", "False"]]},
{"code": "sklearn.cluster.spectral_clustering(affinity,*,n_clusters=8,n_components=None,eigen_solver=None,random_state=None,n_init=10,eigen_tol=0.0,assign_labels='kmeans')\u00b6", "function_name": "spectral_clustering", "args": ["affinity", "*"], "kwargs": [["n_clusters", "8"], ["n_components", "None"], ["eigen_solver", "None"], ["random_state", "None"], ["n_init", "10"], ["eigen_tol", "0.0"], ["assign_labels", "'kmeans'"]]},
{"code": "sklearn.cluster.mean_shift(X,*,bandwidth=None,seeds=None,bin_seeding=False,min_bin_freq=1,cluster_all=True,max_iter=300,n_jobs=None)\u00b6", "function_name": "mean_shift", "args": ["X", "*"], "kwargs": [["bandwidth", "None"], ["seeds", "None"], ["bin_seeding", "False"], ["min_bin_freq", "1"], ["cluster_all", "True"], ["max_iter", "300"], ["n_jobs", "None"]]},
{"code": "sklearn.cluster.estimate_bandwidth(X,*,quantile=0.3,n_samples=None,random_state=0,n_jobs=None)\u00b6", "function_name": "estimate_bandwidth", "args": ["X", "*"], "kwargs": [["quantile", "0.3"], ["n_samples", "None"], ["random_state", "0"], ["n_jobs", "None"]]},
{"code": "sklearn.model_selection.fit_grid_point(X,y,estimator,parameters,train,test,scorer,verbose,error_score=nan,**fit_params)\u00b6", "function_name": "fit_grid_point", "args": ["X", "y", "estimator", "parameters", "train", "test", "scorer", "verbose", "**fit_params"], "kwargs": [["error_score", "nan"]]},
{"code": "sklearn.utils.safe_indexing(X,indices,*,axis=0)\u00b6", "function_name": "safe_indexing", "args": ["X", "indices", "*"], "kwargs": [["axis", "0"]]},
{"code": "sklearn.cluster.dbscan(X,eps=0.5,*,min_samples=5,metric='minkowski',metric_params=None,algorithm='auto',leaf_size=30,p=2,sample_weight=None,n_jobs=None)\u00b6", "function_name": "dbscan", "args": ["X", "*"], "kwargs": [["eps", "0.5"], ["min_samples", "5"], ["metric", "'minkowski'"], ["metric_params", "None"], ["algorithm", "'auto'"], ["leaf_size", "30"], ["p", "2"], ["sample_weight", "None"], ["n_jobs", "None"]]},
{"code": "sklearn.utils.register_parallel_backend(name,factory,make_default=False)\u00b6", "function_name": "register_parallel_backend", "args": ["name", "factory"], "kwargs": [["make_default", "False"]]},
{"code": "sklearn.utils.all_estimators(type_filter=None)\u00b6", "function_name": "all_estimators", "args": [], "kwargs": [["type_filter", "None"]]},
{"code": "sklearn.utils.validation.check_symmetric(array,*,tol=1e-10,raise_warning=True,raise_exception=False)\u00b6", "function_name": "check_symmetric", "args": ["array", "*"], "kwargs": [["tol", "1e-10"], ["raise_warning", "True"], ["raise_exception", "False"]]},
{"code": "sklearn.utils.parallel_backend(backend,n_jobs=-1,inner_max_num_threads=None,**backend_params)\u00b6", "function_name": "parallel_backend", "args": ["backend", "**backend_params"], "kwargs": [["n_jobs", "-1"], ["inner_max_num_threads", "None"]]},
{"code": "sklearn.utils.validation.column_or_1d(y,*,warn=False)\u00b6", "function_name": "column_or_1d", "args": ["y", "*"], "kwargs": [["warn", "False"]]},
{"code": "sklearn.utils.random.sample_without_replacement()\u00b6", "function_name": "sample_without_replacement", "args": [""], "kwargs": []},
{"code": "sklearn.utils.validation.has_fit_parameter(estimator,parameter)\u00b6", "function_name": "has_fit_parameter", "args": ["estimator", "parameter"], "kwargs": []},
{"code": "sklearn.utils.validation.check_memory(memory)\u00b6", "function_name": "check_memory", "args": ["memory"], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs.inplace_csr_column_scale(X,scale)\u00b6", "function_name": "inplace_csr_column_scale", "args": ["X", "scale"], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs.mean_variance_axis(X,axis)\u00b6", "function_name": "mean_variance_axis", "args": ["X", "axis"], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1()\u00b6", "function_name": "inplace_csr_row_normalize_l1", "args": [""], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2()\u00b6", "function_name": "inplace_csr_row_normalize_l2", "args": [""], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs.inplace_swap_column(X,m,n)\u00b6", "function_name": "inplace_swap_column", "args": ["X", "m", "n"], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs.inplace_swap_row(X,m,n)\u00b6", "function_name": "inplace_swap_row", "args": ["X", "m", "n"], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs.inplace_row_scale(X,scale)\u00b6", "function_name": "inplace_row_scale", "args": ["X", "scale"], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs.inplace_column_scale(X,scale)\u00b6", "function_name": "inplace_column_scale", "args": ["X", "scale"], "kwargs": []},
{"code": "sklearn.utils.sparsefuncs.incr_mean_variance_axis(X,*,axis,last_mean,last_var,last_n)\u00b6", "function_name": "incr_mean_variance_axis", "args": ["X", "*", "axis", "last_mean", "last_var", "last_n"], "kwargs": []},
{"code": "sklearn.utils.shuffle(*arrays,**options)\u00b6", "function_name": "shuffle", "args": ["*arrays", "**options"], "kwargs": []},
{"code": "sklearn.utils.safe_mask(X,mask)\u00b6", "function_name": "safe_mask", "args": ["X", "mask"], "kwargs": []},
{"code": "sklearn.utils.safe_sqr(X,*,copy=True)\u00b6", "function_name": "safe_sqr", "args": ["X", "*"], "kwargs": [["copy", "True"]]},
{"code": "sklearn.utils.multiclass.unique_labels(*ys)\u00b6", "function_name": "unique_labels", "args": ["*ys"], "kwargs": []},
{"code": "sklearn.utils.murmurhash3_32()\u00b6", "function_name": "murmurhash3_32", "args": [""], "kwargs": []},
{"code": "sklearn.utils._safe_indexing(X,indices,*,axis=0)\u00b6", "function_name": "_safe_indexing", "args": ["X", "indices", "*"], "kwargs": [["axis", "0"]]},
{"code": "sklearn.utils.multiclass.is_multilabel(y)\u00b6", "function_name": "is_multilabel", "args": ["y"], "kwargs": []},
{"code": "sklearn.utils.multiclass.type_of_target(y)\u00b6", "function_name": "type_of_target", "args": ["y"], "kwargs": []},
{"code": "sklearn.utils.resample(*arrays,**options)\u00b6", "function_name": "resample", "args": ["*arrays", "**options"], "kwargs": []},
{"code": "sklearn.utils.metaestimators.if_delegate_has_method(delegate)\u00b6", "function_name": "if_delegate_has_method", "args": ["delegate"], "kwargs": []},
{"code": "sklearn.utils.graph_shortest_path.graph_shortest_path()\u00b6", "function_name": "graph_shortest_path", "args": [""], "kwargs": []},
{"code": "sklearn.utils.indexable(*iterables)\u00b6", "function_name": "indexable", "args": ["*iterables"], "kwargs": []},
{"code": "sklearn.utils.graph.single_source_shortest_path_length(graph,source,*,cutoff=None)\u00b6", "function_name": "single_source_shortest_path_length", "args": ["graph", "source", "*"], "kwargs": [["cutoff", "None"]]},
{"code": "sklearn.utils.gen_even_slices(n,n_packs,*,n_samples=None)\u00b6", "function_name": "gen_even_slices", "args": ["n", "n_packs", "*"], "kwargs": [["n_samples", "None"]]},
{"code": "sklearn.utils.extmath.density(w,**kwargs)\u00b6", "function_name": "density", "args": ["w", "**kwargs"], "kwargs": []},
{"code": "sklearn.utils.extmath.weighted_mode(a,w,*,axis=0)\u00b6", "function_name": "weighted_mode", "args": ["a", "w", "*"], "kwargs": [["axis", "0"]]},
{"code": "sklearn.utils.extmath.fast_logdet(A)\u00b6", "function_name": "fast_logdet", "args": ["A"], "kwargs": []},
{"code": "sklearn.utils.extmath.randomized_svd(M,n_components,*,n_oversamples=10,n_iter='auto',power_iteration_normalizer='auto',transpose='auto',flip_sign=True,random_state=0)\u00b6", "function_name": "randomized_svd", "args": ["M", "n_components", "*"], "kwargs": [["n_oversamples", "10"], ["n_iter", "'auto'"], ["power_iteration_normalizer", "'auto'"], ["transpose", "'auto'"], ["flip_sign", "True"], ["random_state", "0"]]},
{"code": "sklearn.utils.extmath.safe_sparse_dot(a,b,*,dense_output=False)\u00b6", "function_name": "safe_sparse_dot", "args": ["a", "b", "*"], "kwargs": [["dense_output", "False"]]},
{"code": "sklearn.utils.estimator_checks.parametrize_with_checks(estimators)\u00b6", "function_name": "parametrize_with_checks", "args": ["estimators"], "kwargs": []},
{"code": "sklearn.utils.class_weight.compute_sample_weight(class_weight,y,*,indices=None)\u00b6", "function_name": "compute_sample_weight", "args": ["class_weight", "y", "*"], "kwargs": [["indices", "None"]]},
{"code": "sklearn.utils.deprecated(extra='')\u00b6", "function_name": "deprecated", "args": [], "kwargs": [["extra", "''"]]},
{"code": "sklearn.utils.estimator_checks.check_estimator(Estimator,generate_only=False)\u00b6", "function_name": "check_estimator", "args": ["Estimator"], "kwargs": [["generate_only", "False"]]},
{"code": "sklearn.utils.estimator_html_repr(estimator)\u00b6", "function_name": "estimator_html_repr", "args": ["estimator"], "kwargs": []},
{"code": "sklearn.utils.extmath.randomized_range_finder(A,*,size,n_iter,power_iteration_normalizer='auto',random_state=None)\u00b6", "function_name": "randomized_range_finder", "args": ["A", "*", "size", "n_iter"], "kwargs": [["power_iteration_normalizer", "'auto'"], ["random_state", "None"]]},
{"code": "sklearn.utils.class_weight.compute_class_weight(class_weight,*,classes,y)\u00b6", "function_name": "compute_class_weight", "args": ["class_weight", "*", "classes", "y"], "kwargs": []},
{"code": "sklearn.utils.check_random_state(seed)\u00b6", "function_name": "check_random_state", "args": ["seed"], "kwargs": []},
{"code": "sklearn.utils.check_consistent_length(*arrays)\u00b6", "function_name": "check_consistent_length", "args": ["*arrays"], "kwargs": []},
{"code": "sklearn.utils.check_scalar(x,name,target_type,*,min_val=None,max_val=None)\u00b6", "function_name": "check_scalar", "args": ["x", "name", "target_type", "*"], "kwargs": [["min_val", "None"], ["max_val", "None"]]},
{"code": "sklearn.utils.Bunch(**kwargs)\u00b6", "function_name": "Bunch", "args": ["**kwargs"], "kwargs": []},
{"code": "sklearn.utils.check_X_y(X,y,accept_sparse=False,*,accept_large_sparse=True,dtype='numeric',order=None,copy=False,force_all_finite=True,ensure_2d=True,allow_nd=False,multi_output=False,ensure_min_samples=1,ensure_min_features=1,y_numeric=False,estimator=None)\u00b6", "function_name": "check_X_y", "args": ["X", "y", "*"], "kwargs": [["accept_sparse", "False"], ["accept_large_sparse", "True"], ["dtype", "'numeric'"], ["order", "None"], ["copy", "False"], ["force_all_finite", "True"], ["ensure_2d", "True"], ["allow_nd", "False"], ["multi_output", "False"], ["ensure_min_samples", "1"], ["ensure_min_features", "1"], ["y_numeric", "False"], ["estimator", "None"]]},
{"code": "sklearn.utils.as_float_array(X,*,copy=True,force_all_finite=True)\u00b6", "function_name": "as_float_array", "args": ["X", "*"], "kwargs": [["copy", "True"], ["force_all_finite", "True"]]},
{"code": "sklearn.utils.check_array(array,accept_sparse=False,*,accept_large_sparse=True,dtype='numeric',order=None,copy=False,force_all_finite=True,ensure_2d=True,allow_nd=False,ensure_min_samples=1,ensure_min_features=1,estimator=None)\u00b6", "function_name": "check_array", "args": ["array", "*"], "kwargs": [["accept_sparse", "False"], ["accept_large_sparse", "True"], ["dtype", "'numeric'"], ["order", "None"], ["copy", "False"], ["force_all_finite", "True"], ["ensure_2d", "True"], ["allow_nd", "False"], ["ensure_min_samples", "1"], ["ensure_min_features", "1"], ["estimator", "None"]]},
{"code": "sklearn.utils.assert_all_finite(X,*,allow_nan=False)\u00b6", "function_name": "assert_all_finite", "args": ["X", "*"], "kwargs": [["allow_nan", "False"]]},
{"code": "sklearn.utils.arrayfuncs.min_pos()\u00b6", "function_name": "min_pos", "args": [""], "kwargs": []},
{"code": "sklearn.tree.plot_tree(decision_tree,*,max_depth=None,feature_names=None,class_names=None,label='all',filled=False,impurity=True,node_ids=False,proportion=False,rotate='deprecated',rounded=False,precision=3,ax=None,fontsize=None)\u00b6", "function_name": "plot_tree", "args": ["decision_tree", "*"], "kwargs": [["max_depth", "None"], ["feature_names", "None"], ["class_names", "None"], ["label", "'all'"], ["filled", "False"], ["impurity", "True"], ["node_ids", "False"], ["proportion", "False"], ["rotate", "'deprecated'"], ["rounded", "False"], ["precision", "3"], ["ax", "None"], ["fontsize", "None"]]},
{"code": "sklearn.tree.export_text(decision_tree,*,feature_names=None,max_depth=10,spacing=3,decimals=2,show_weights=False)\u00b6", "function_name": "export_text", "args": ["decision_tree", "*"], "kwargs": [["feature_names", "None"], ["max_depth", "10"], ["spacing", "3"], ["decimals", "2"], ["show_weights", "False"]]},
{"code": "sklearn.tree.export_graphviz(decision_tree,out_file=None,*,max_depth=None,feature_names=None,class_names=None,label='all',filled=False,leaves_parallel=False,impurity=True,node_ids=False,proportion=False,rotate=False,rounded=False,special_characters=False,precision=3)\u00b6", "function_name": "export_graphviz", "args": ["decision_tree", "*"], "kwargs": [["out_file", "None"], ["max_depth", "None"], ["feature_names", "None"], ["class_names", "None"], ["label", "'all'"], ["filled", "False"], ["leaves_parallel", "False"], ["impurity", "True"], ["node_ids", "False"], ["proportion", "False"], ["rotate", "False"], ["rounded", "False"], ["special_characters", "False"], ["precision", "3"]]},
{"code": "sklearn.svm.l1_min_c(X,y,*,loss='squared_hinge',fit_intercept=True,intercept_scaling=1.0)\u00b6", "function_name": "l1_min_c", "args": ["X", "y", "*"], "kwargs": [["loss", "'squared_hinge'"], ["fit_intercept", "True"], ["intercept_scaling", "1.0"]]},
{"code": "sklearn.random_projection.johnson_lindenstrauss_min_dim(n_samples,*,eps=0.1)\u00b6", "function_name": "johnson_lindenstrauss_min_dim", "args": ["n_samples", "*"], "kwargs": [["eps", "0.1"]]},
{"code": "sklearn.preprocessing.scale(X,*,axis=0,with_mean=True,with_std=True,copy=True)\u00b6", "function_name": "scale", "args": ["X", "*"], "kwargs": [["axis", "0"], ["with_mean", "True"], ["with_std", "True"], ["copy", "True"]]},
{"code": "sklearn.preprocessing.power_transform(X,method='yeo-johnson',*,standardize=True,copy=True)\u00b6", "function_name": "power_transform", "args": ["X", "*"], "kwargs": [["method", "'yeo-johnson'"], ["standardize", "True"], ["copy", "True"]]},
{"code": "sklearn.preprocessing.normalize(X,norm='l2',*,axis=1,copy=True,return_norm=False)\u00b6", "function_name": "normalize", "args": ["X", "*"], "kwargs": [["norm", "'l2'"], ["axis", "1"], ["copy", "True"], ["return_norm", "False"]]},
{"code": "sklearn.preprocessing.quantile_transform(X,*,axis=0,n_quantiles=1000,output_distribution='uniform',ignore_implicit_zeros=False,subsample=100000,random_state=None,copy=True)\u00b6", "function_name": "quantile_transform", "args": ["X", "*"], "kwargs": [["axis", "0"], ["n_quantiles", "1000"], ["output_distribution", "'uniform'"], ["ignore_implicit_zeros", "False"], ["subsample", "100000"], ["random_state", "None"], ["copy", "True"]]},
{"code": "sklearn.preprocessing.label_binarize(y,*,classes,neg_label=0,pos_label=1,sparse_output=False)\u00b6", "function_name": "label_binarize", "args": ["y", "*", "classes"], "kwargs": [["neg_label", "0"], ["pos_label", "1"], ["sparse_output", "False"]]},
{"code": "sklearn.preprocessing.add_dummy_feature(X,value=1.0)\u00b6", "function_name": "add_dummy_feature", "args": ["X"], "kwargs": [["value", "1.0"]]},
{"code": "sklearn.preprocessing.binarize(X,*,threshold=0.0,copy=True)\u00b6", "function_name": "binarize", "args": ["X", "*"], "kwargs": [["threshold", "0.0"], ["copy", "True"]]},
{"code": "sklearn.preprocessing.maxabs_scale(X,*,axis=0,copy=True)\u00b6", "function_name": "maxabs_scale", "args": ["X", "*"], "kwargs": [["axis", "0"], ["copy", "True"]]},
{"code": "sklearn.pipeline.make_pipeline(*steps,**kwargs)\u00b6", "function_name": "make_pipeline", "args": ["*steps", "**kwargs"], "kwargs": []},
{"code": "sklearn.pipeline.make_union(*transformers,**kwargs)\u00b6", "function_name": "make_union", "args": ["*transformers", "**kwargs"], "kwargs": []},
{"code": "sklearn.neighbors.radius_neighbors_graph(X,radius,*,mode='connectivity',metric='minkowski',p=2,metric_params=None,include_self=False,n_jobs=None)\u00b6", "function_name": "radius_neighbors_graph", "args": ["X", "radius", "*"], "kwargs": [["mode", "'connectivity'"], ["metric", "'minkowski'"], ["p", "2"], ["metric_params", "None"], ["include_self", "False"], ["n_jobs", "None"]]},
{"code": "sklearn.neighbors.kneighbors_graph(X,n_neighbors,*,mode='connectivity',metric='minkowski',p=2,metric_params=None,include_self=False,n_jobs=None)\u00b6", "function_name": "kneighbors_graph", "args": ["X", "n_neighbors", "*"], "kwargs": [["mode", "'connectivity'"], ["metric", "'minkowski'"], ["p", "2"], ["metric_params", "None"], ["include_self", "False"], ["n_jobs", "None"]]},
{"code": "sklearn.model_selection.validation_curve(estimator,X,y,*,param_name,param_range,groups=None,cv=None,scoring=None,n_jobs=None,pre_dispatch='all',verbose=0,error_score=nan)\u00b6", "function_name": "validation_curve", "args": ["estimator", "X", "y", "*", "param_name", "param_range"], "kwargs": [["groups", "None"], ["cv", "None"], ["scoring", "None"], ["n_jobs", "None"], ["pre_dispatch", "'all'"], ["verbose", "0"], ["error_score", "nan"]]},
{"code": "sklearn.model_selection.cross_val_score(estimator,X,y=None,*,groups=None,scoring=None,cv=None,n_jobs=None,verbose=0,fit_params=None,pre_dispatch='2*n_jobs',error_score=nan)\u00b6", "function_name": "cross_val_score", "args": ["estimator", "X", "*"], "kwargs": [["y", "None"], ["groups", "None"], ["scoring", "None"], ["cv", "None"], ["n_jobs", "None"], ["verbose", "0"], ["fit_params", "None"], ["pre_dispatch", "'2*n_jobs'"], ["error_score", "nan"]]},
{"code": "sklearn.model_selection.permutation_test_score(estimator,X,y,*,groups=None,cv=None,n_permutations=100,n_jobs=None,random_state=0,verbose=0,scoring=None)\u00b6", "function_name": "permutation_test_score", "args": ["estimator", "X", "y", "*"], "kwargs": [["groups", "None"], ["cv", "None"], ["n_permutations", "100"], ["n_jobs", "None"], ["random_state", "0"], ["verbose", "0"], ["scoring", "None"]]},
{"code": "sklearn.model_selection.cross_val_predict(estimator,X,y=None,*,groups=None,cv=None,n_jobs=None,verbose=0,fit_params=None,pre_dispatch='2*n_jobs',method='predict')\u00b6", "function_name": "cross_val_predict", "args": ["estimator", "X", "*"], "kwargs": [["y", "None"], ["groups", "None"], ["cv", "None"], ["n_jobs", "None"], ["verbose", "0"], ["fit_params", "None"], ["pre_dispatch", "'2*n_jobs'"], ["method", "'predict'"]]},
{"code": "sklearn.model_selection.cross_validate(estimator,X,y=None,*,groups=None,scoring=None,cv=None,n_jobs=None,verbose=0,fit_params=None,pre_dispatch='2*n_jobs',return_train_score=False,return_estimator=False,error_score=nan)\u00b6", "function_name": "cross_validate", "args": ["estimator", "X", "*"], "kwargs": [["y", "None"], ["groups", "None"], ["scoring", "None"], ["cv", "None"], ["n_jobs", "None"], ["verbose", "0"], ["fit_params", "None"], ["pre_dispatch", "'2*n_jobs'"], ["return_train_score", "False"], ["return_estimator", "False"], ["error_score", "nan"]]},
{"code": "sklearn.model_selection.train_test_split(*arrays,**options)\u00b6", "function_name": "train_test_split", "args": ["*arrays", "**options"], "kwargs": []},
{"code": "sklearn.model_selection.check_cv(cv=5,y=None,*,classifier=False)\u00b6", "function_name": "check_cv", "args": ["*"], "kwargs": [["cv", "5"], ["y", "None"], ["classifier", "False"]]},
{"code": "sklearn.metrics.plot_roc_curve(estimator,X,y,*,sample_weight=None,drop_intermediate=True,response_method='auto',name=None,ax=None,**kwargs)\u00b6", "function_name": "plot_roc_curve", "args": ["estimator", "X", "y", "*", "**kwargs"], "kwargs": [["sample_weight", "None"], ["drop_intermediate", "True"], ["response_method", "'auto'"], ["name", "None"], ["ax", "None"]]},
{"code": "sklearn.metrics.plot_precision_recall_curve(estimator,X,y,*,sample_weight=None,response_method='auto',name=None,ax=None,**kwargs)\u00b6", "function_name": "plot_precision_recall_curve", "args": ["estimator", "X", "y", "*", "**kwargs"], "kwargs": [["sample_weight", "None"], ["response_method", "'auto'"], ["name", "None"], ["ax", "None"]]},
{"code": "sklearn.metrics.pairwise_distances_chunked(X,Y=None,*,reduce_func=None,metric='euclidean',n_jobs=None,working_memory=None,**kwds)\u00b6", "function_name": "pairwise_distances_chunked", "args": ["X", "*", "**kwds"], "kwargs": [["Y", "None"], ["reduce_func", "None"], ["metric", "'euclidean'"], ["n_jobs", "None"], ["working_memory", "None"]]},
{"code": "sklearn.metrics.pairwise.paired_cosine_distances(X,Y)\u00b6", "function_name": "paired_cosine_distances", "args": ["X", "Y"], "kwargs": []},
{"code": "sklearn.metrics.pairwise_distances_argmin(X,Y,*,axis=1,metric='euclidean',metric_kwargs=None)\u00b6", "function_name": "pairwise_distances_argmin", "args": ["X", "Y", "*"], "kwargs": [["axis", "1"], ["metric", "'euclidean'"], ["metric_kwargs", "None"]]},
{"code": "sklearn.metrics.pairwise_distances_argmin_min(X,Y,*,axis=1,metric='euclidean',metric_kwargs=None)\u00b6", "function_name": "pairwise_distances_argmin_min", "args": ["X", "Y", "*"], "kwargs": [["axis", "1"], ["metric", "'euclidean'"], ["metric_kwargs", "None"]]},
{"code": "sklearn.metrics.pairwise_distances(X,Y=None,metric='euclidean',*,n_jobs=None,force_all_finite=True,**kwds)\u00b6", "function_name": "pairwise_distances", "args": ["X", "*", "**kwds"], "kwargs": [["Y", "None"], ["metric", "'euclidean'"], ["n_jobs", "None"], ["force_all_finite", "True"]]},
{"code": "sklearn.metrics.pairwise.paired_distances(X,Y,*,metric='euclidean',**kwds)\u00b6", "function_name": "paired_distances", "args": ["X", "Y", "*", "**kwds"], "kwargs": [["metric", "'euclidean'"]]},
{"code": "sklearn.metrics.pairwise.paired_manhattan_distances(X,Y)\u00b6", "function_name": "paired_manhattan_distances", "args": ["X", "Y"], "kwargs": []},
{"code": "sklearn.metrics.plot_confusion_matrix(estimator,X,y_true,*,labels=None,sample_weight=None,normalize=None,display_labels=None,include_values=True,xticks_rotation='horizontal',values_format=None,cmap='viridis',ax=None)\u00b6", "function_name": "plot_confusion_matrix", "args": ["estimator", "X", "y_true", "*"], "kwargs": [["labels", "None"], ["sample_weight", "None"], ["normalize", "None"], ["display_labels", "None"], ["include_values", "True"], ["xticks_rotation", "'horizontal'"], ["values_format", "None"], ["cmap", "'viridis'"], ["ax", "None"]]},
{"code": "sklearn.metrics.pairwise.paired_euclidean_distances(X,Y)\u00b6", "function_name": "paired_euclidean_distances", "args": ["X", "Y"], "kwargs": []},
{"code": "sklearn.metrics.pairwise.sigmoid_kernel(X,Y=None,gamma=None,coef0=1)\u00b6", "function_name": "sigmoid_kernel", "args": ["X"], "kwargs": [["Y", "None"], ["gamma", "None"], ["coef0", "1"]]},
{"code": "sklearn.metrics.pairwise.polynomial_kernel(X,Y=None,degree=3,gamma=None,coef0=1)\u00b6", "function_name": "polynomial_kernel", "args": ["X"], "kwargs": [["Y", "None"], ["degree", "3"], ["gamma", "None"], ["coef0", "1"]]},
{"code": "sklearn.metrics.pairwise.rbf_kernel(X,Y=None,gamma=None)\u00b6", "function_name": "rbf_kernel", "args": ["X"], "kwargs": [["Y", "None"], ["gamma", "None"]]},
{"code": "sklearn.metrics.pairwise.pairwise_kernels(X,Y=None,metric='linear',*,filter_params=False,n_jobs=None,**kwds)\u00b6", "function_name": "pairwise_kernels", "args": ["X", "*", "**kwds"], "kwargs": [["Y", "None"], ["metric", "'linear'"], ["filter_params", "False"], ["n_jobs", "None"]]},
{"code": "sklearn.metrics.pairwise.nan_euclidean_distances(X,Y=None,*,squared=False,missing_values=nan,copy=True)\u00b6", "function_name": "nan_euclidean_distances", "args": ["X", "*"], "kwargs": [["Y", "None"], ["squared", "False"], ["missing_values", "nan"], ["copy", "True"]]},
{"code": "sklearn.metrics.pairwise.manhattan_distances(X,Y=None,*,sum_over_features=True)\u00b6", "function_name": "manhattan_distances", "args": ["X", "*"], "kwargs": [["Y", "None"], ["sum_over_features", "True"]]},
{"code": "sklearn.metrics.pairwise.linear_kernel(X,Y=None,dense_output=True)\u00b6", "function_name": "linear_kernel", "args": ["X"], "kwargs": [["Y", "None"], ["dense_output", "True"]]},
{"code": "sklearn.metrics.pairwise.laplacian_kernel(X,Y=None,gamma=None)\u00b6", "function_name": "laplacian_kernel", "args": ["X"], "kwargs": [["Y", "None"], ["gamma", "None"]]},
{"code": "sklearn.metrics.pairwise.haversine_distances(X,Y=None)\u00b6", "function_name": "haversine_distances", "args": ["X"], "kwargs": [["Y", "None"]]},
{"code": "sklearn.metrics.pairwise.kernel_metrics()\u00b6", "function_name": "kernel_metrics", "args": [""], "kwargs": []},
{"code": "sklearn.metrics.pairwise.cosine_distances(X,Y=None)\u00b6", "function_name": "cosine_distances", "args": ["X"], "kwargs": [["Y", "None"]]},
{"code": "sklearn.metrics.pairwise.distance_metrics()\u00b6", "function_name": "distance_metrics", "args": [""], "kwargs": []},
{"code": "sklearn.metrics.pairwise.cosine_similarity(X,Y=None,dense_output=True)\u00b6", "function_name": "cosine_similarity", "args": ["X"], "kwargs": [["Y", "None"], ["dense_output", "True"]]},
{"code": "sklearn.metrics.pairwise.euclidean_distances(X,Y=None,*,Y_norm_squared=None,squared=False,X_norm_squared=None)\u00b6", "function_name": "euclidean_distances", "args": ["X", "*"], "kwargs": [["Y", "None"], ["Y_norm_squared", "None"], ["squared", "False"], ["X_norm_squared", "None"]]},
{"code": "sklearn.metrics.pairwise.chi2_kernel(X,Y=None,gamma=1.0)\u00b6", "function_name": "chi2_kernel", "args": ["X"], "kwargs": [["Y", "None"], ["gamma", "1.0"]]},
{"code": "sklearn.metrics.pairwise.additive_chi2_kernel(X,Y=None)\u00b6", "function_name": "additive_chi2_kernel", "args": ["X"], "kwargs": [["Y", "None"]]},
{"code": "sklearn.metrics.consensus_score(a,b,*,similarity='jaccard')\u00b6", "function_name": "consensus_score", "args": ["a", "b", "*"], "kwargs": [["similarity", "'jaccard'"]]},
{"code": "sklearn.metrics.v_measure_score(labels_true,labels_pred,*,beta=1.0)\u00b6", "function_name": "v_measure_score", "args": ["labels_true", "labels_pred", "*"], "kwargs": [["beta", "1.0"]]},
{"code": "sklearn.metrics.silhouette_score(X,labels,*,metric='euclidean',sample_size=None,random_state=None,**kwds)\u00b6", "function_name": "silhouette_score", "args": ["X", "labels", "*", "**kwds"], "kwargs": [["metric", "'euclidean'"], ["sample_size", "None"], ["random_state", "None"]]},
{"code": "sklearn.metrics.silhouette_samples(X,labels,*,metric='euclidean',**kwds)\u00b6", "function_name": "silhouette_samples", "args": ["X", "labels", "*", "**kwds"], "kwargs": [["metric", "'euclidean'"]]},
{"code": "sklearn.metrics.homogeneity_score(labels_true,labels_pred)\u00b6", "function_name": "homogeneity_score", "args": ["labels_true", "labels_pred"], "kwargs": []},
{"code": "sklearn.metrics.normalized_mutual_info_score(labels_true,labels_pred,*,average_method='arithmetic')\u00b6", "function_name": "normalized_mutual_info_score", "args": ["labels_true", "labels_pred", "*"], "kwargs": [["average_method", "'arithmetic'"]]},
{"code": "sklearn.metrics.homogeneity_completeness_v_measure(labels_true,labels_pred,*,beta=1.0)\u00b6", "function_name": "homogeneity_completeness_v_measure", "args": ["labels_true", "labels_pred", "*"], "kwargs": [["beta", "1.0"]]},
{"code": "sklearn.metrics.mutual_info_score(labels_true,labels_pred,*,contingency=None)\u00b6", "function_name": "mutual_info_score", "args": ["labels_true", "labels_pred", "*"], "kwargs": [["contingency", "None"]]},
{"code": "sklearn.metrics.fowlkes_mallows_score(labels_true,labels_pred,*,sparse=False)\u00b6", "function_name": "fowlkes_mallows_score", "args": ["labels_true", "labels_pred", "*"], "kwargs": [["sparse", "False"]]},
{"code": "sklearn.metrics.cluster.contingency_matrix(labels_true,labels_pred,*,eps=None,sparse=False)\u00b6", "function_name": "contingency_matrix", "args": ["labels_true", "labels_pred", "*"], "kwargs": [["eps", "None"], ["sparse", "False"]]},
{"code": "sklearn.metrics.adjusted_mutual_info_score(labels_true,labels_pred,*,average_method='arithmetic')\u00b6", "function_name": "adjusted_mutual_info_score", "args": ["labels_true", "labels_pred", "*"], "kwargs": [["average_method", "'arithmetic'"]]},
{"code": "sklearn.metrics.adjusted_rand_score(labels_true,labels_pred)\u00b6", "function_name": "adjusted_rand_score", "args": ["labels_true", "labels_pred"], "kwargs": []},
{"code": "sklearn.metrics.label_ranking_loss(y_true,y_score,*,sample_weight=None)\u00b6", "function_name": "label_ranking_loss", "args": ["y_true", "y_score", "*"], "kwargs": [["sample_weight", "None"]]},
{"code": "sklearn.metrics.calinski_harabasz_score(X,labels)\u00b6", "function_name": "calinski_harabasz_score", "args": ["X", "labels"], "kwargs": []},
{"code": "sklearn.metrics.completeness_score(labels_true,labels_pred)\u00b6", "function_name": "completeness_score", "args": ["labels_true", "labels_pred"], "kwargs": []},
{"code": "sklearn.metrics.davies_bouldin_score(X,labels)\u00b6", "function_name": "davies_bouldin_score", "args": ["X", "labels"], "kwargs": []},
{"code": "sklearn.metrics.label_ranking_average_precision_score(y_true,y_score,*,sample_weight=None)\u00b6", "function_name": "label_ranking_average_precision_score", "args": ["y_true", "y_score", "*"], "kwargs": [["sample_weight", "None"]]},
{"code": "sklearn.metrics.coverage_error(y_true,y_score,*,sample_weight=None)\u00b6", "function_name": "coverage_error", "args": ["y_true", "y_score", "*"], "kwargs": [["sample_weight", "None"]]},
{"code": "sklearn.metrics.mean_squared_error(y_true,y_pred,*,sample_weight=None,multioutput='uniform_average',squared=True)\u00b6", "function_name": "mean_squared_error", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["multioutput", "'uniform_average'"], ["squared", "True"]]},
{"code": "sklearn.metrics.mean_tweedie_deviance(y_true,y_pred,*,sample_weight=None,power=0)\u00b6", "function_name": "mean_tweedie_deviance", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["power", "0"]]},
{"code": "sklearn.metrics.mean_gamma_deviance(y_true,y_pred,*,sample_weight=None)\u00b6", "function_name": "mean_gamma_deviance", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"]]},
{"code": "sklearn.metrics.mean_squared_log_error(y_true,y_pred,*,sample_weight=None,multioutput='uniform_average')\u00b6", "function_name": "mean_squared_log_error", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["multioutput", "'uniform_average'"]]},
{"code": "sklearn.metrics.r2_score(y_true,y_pred,*,sample_weight=None,multioutput='uniform_average')\u00b6", "function_name": "r2_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["multioutput", "'uniform_average'"]]},
{"code": "sklearn.metrics.mean_poisson_deviance(y_true,y_pred,*,sample_weight=None)\u00b6", "function_name": "mean_poisson_deviance", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"]]},
{"code": "sklearn.metrics.median_absolute_error(y_true,y_pred,*,multioutput='uniform_average')\u00b6", "function_name": "median_absolute_error", "args": ["y_true", "y_pred", "*"], "kwargs": [["multioutput", "'uniform_average'"]]},
{"code": "sklearn.metrics.mean_absolute_error(y_true,y_pred,*,sample_weight=None,multioutput='uniform_average')\u00b6", "function_name": "mean_absolute_error", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["multioutput", "'uniform_average'"]]},
{"code": "sklearn.metrics.max_error(y_true,y_pred)\u00b6", "function_name": "max_error", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "sklearn.metrics.explained_variance_score(y_true,y_pred,*,sample_weight=None,multioutput='uniform_average')\u00b6", "function_name": "explained_variance_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["multioutput", "'uniform_average'"]]},
{"code": "sklearn.metrics.zero_one_loss(y_true,y_pred,*,normalize=True,sample_weight=None)\u00b6", "function_name": "zero_one_loss", "args": ["y_true", "y_pred", "*"], "kwargs": [["normalize", "True"], ["sample_weight", "None"]]},
{"code": "sklearn.metrics.recall_score(y_true,y_pred,*,labels=None,pos_label=1,average='binary',sample_weight=None,zero_division='warn')\u00b6", "function_name": "recall_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["labels", "None"], ["pos_label", "1"], ["average", "'binary'"], ["sample_weight", "None"], ["zero_division", "'warn'"]]},
{"code": "sklearn.metrics.roc_curve(y_true,y_score,*,pos_label=None,sample_weight=None,drop_intermediate=True)\u00b6", "function_name": "roc_curve", "args": ["y_true", "y_score", "*"], "kwargs": [["pos_label", "None"], ["sample_weight", "None"], ["drop_intermediate", "True"]]},
{"code": "sklearn.metrics.precision_score(y_true,y_pred,*,labels=None,pos_label=1,average='binary',sample_weight=None,zero_division='warn')\u00b6", "function_name": "precision_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["labels", "None"], ["pos_label", "1"], ["average", "'binary'"], ["sample_weight", "None"], ["zero_division", "'warn'"]]},
{"code": "sklearn.metrics.precision_recall_curve(y_true,probas_pred,*,pos_label=None,sample_weight=None)\u00b6", "function_name": "precision_recall_curve", "args": ["y_true", "probas_pred", "*"], "kwargs": [["pos_label", "None"], ["sample_weight", "None"]]},
{"code": "sklearn.metrics.ndcg_score(y_true,y_score,*,k=None,sample_weight=None,ignore_ties=False)\u00b6", "function_name": "ndcg_score", "args": ["y_true", "y_score", "*"], "kwargs": [["k", "None"], ["sample_weight", "None"], ["ignore_ties", "False"]]},
{"code": "sklearn.metrics.roc_auc_score(y_true,y_score,*,average='macro',sample_weight=None,max_fpr=None,multi_class='raise',labels=None)\u00b6", "function_name": "roc_auc_score", "args": ["y_true", "y_score", "*"], "kwargs": [["average", "'macro'"], ["sample_weight", "None"], ["max_fpr", "None"], ["multi_class", "'raise'"], ["labels", "None"]]},
{"code": "sklearn.metrics.multilabel_confusion_matrix(y_true,y_pred,*,sample_weight=None,labels=None,samplewise=False)\u00b6", "function_name": "multilabel_confusion_matrix", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["labels", "None"], ["samplewise", "False"]]},
{"code": "sklearn.metrics.log_loss(y_true,y_pred,*,eps=1e-15,normalize=True,sample_weight=None,labels=None)\u00b6", "function_name": "log_loss", "args": ["y_true", "y_pred", "*"], "kwargs": [["eps", "1e-15"], ["normalize", "True"], ["sample_weight", "None"], ["labels", "None"]]},
{"code": "sklearn.metrics.matthews_corrcoef(y_true,y_pred,*,sample_weight=None)\u00b6", "function_name": "matthews_corrcoef", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"]]},
{"code": "sklearn.metrics.jaccard_score(y_true,y_pred,*,labels=None,pos_label=1,average='binary',sample_weight=None)\u00b6", "function_name": "jaccard_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["labels", "None"], ["pos_label", "1"], ["average", "'binary'"], ["sample_weight", "None"]]},
{"code": "sklearn.metrics.hinge_loss(y_true,pred_decision,*,labels=None,sample_weight=None)\u00b6", "function_name": "hinge_loss", "args": ["y_true", "pred_decision", "*"], "kwargs": [["labels", "None"], ["sample_weight", "None"]]},
{"code": "sklearn.metrics.hamming_loss(y_true,y_pred,*,sample_weight=None)\u00b6", "function_name": "hamming_loss", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"]]},
{"code": "sklearn.metrics.fbeta_score(y_true,y_pred,*,beta,labels=None,pos_label=1,average='binary',sample_weight=None,zero_division='warn')\u00b6", "function_name": "fbeta_score", "args": ["y_true", "y_pred", "*", "beta"], "kwargs": [["labels", "None"], ["pos_label", "1"], ["average", "'binary'"], ["sample_weight", "None"], ["zero_division", "'warn'"]]},
{"code": "sklearn.metrics.f1_score(y_true,y_pred,*,labels=None,pos_label=1,average='binary',sample_weight=None,zero_division='warn')\u00b6", "function_name": "f1_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["labels", "None"], ["pos_label", "1"], ["average", "'binary'"], ["sample_weight", "None"], ["zero_division", "'warn'"]]},
{"code": "sklearn.metrics.dcg_score(y_true,y_score,*,k=None,log_base=2,sample_weight=None,ignore_ties=False)\u00b6", "function_name": "dcg_score", "args": ["y_true", "y_score", "*"], "kwargs": [["k", "None"], ["log_base", "2"], ["sample_weight", "None"], ["ignore_ties", "False"]]},
{"code": "sklearn.metrics.confusion_matrix(y_true,y_pred,*,labels=None,sample_weight=None,normalize=None)\u00b6", "function_name": "confusion_matrix", "args": ["y_true", "y_pred", "*"], "kwargs": [["labels", "None"], ["sample_weight", "None"], ["normalize", "None"]]},
{"code": "sklearn.metrics.balanced_accuracy_score(y_true,y_pred,*,sample_weight=None,adjusted=False)\u00b6", "function_name": "balanced_accuracy_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["sample_weight", "None"], ["adjusted", "False"]]},
{"code": "sklearn.metrics.average_precision_score(y_true,y_score,*,average='macro',pos_label=1,sample_weight=None)\u00b6", "function_name": "average_precision_score", "args": ["y_true", "y_score", "*"], "kwargs": [["average", "'macro'"], ["pos_label", "1"], ["sample_weight", "None"]]},
{"code": "sklearn.metrics.brier_score_loss(y_true,y_prob,*,sample_weight=None,pos_label=None)\u00b6", "function_name": "brier_score_loss", "args": ["y_true", "y_prob", "*"], "kwargs": [["sample_weight", "None"], ["pos_label", "None"]]},
{"code": "sklearn.metrics.classification_report(y_true,y_pred,*,labels=None,target_names=None,sample_weight=None,digits=2,output_dict=False,zero_division='warn')\u00b6", "function_name": "classification_report", "args": ["y_true", "y_pred", "*"], "kwargs": [["labels", "None"], ["target_names", "None"], ["sample_weight", "None"], ["digits", "2"], ["output_dict", "False"], ["zero_division", "'warn'"]]},
{"code": "sklearn.metrics.cohen_kappa_score(y1,y2,*,labels=None,weights=None,sample_weight=None)\u00b6", "function_name": "cohen_kappa_score", "args": ["y1", "y2", "*"], "kwargs": [["labels", "None"], ["weights", "None"], ["sample_weight", "None"]]},
{"code": "sklearn.metrics.auc(x,y)\u00b6", "function_name": "auc", "args": ["x", "y"], "kwargs": []},
{"code": "sklearn.metrics.accuracy_score(y_true,y_pred,*,normalize=True,sample_weight=None)\u00b6", "function_name": "accuracy_score", "args": ["y_true", "y_pred", "*"], "kwargs": [["normalize", "True"], ["sample_weight", "None"]]},
{"code": "sklearn.metrics.make_scorer(score_func,*,greater_is_better=True,needs_proba=False,needs_threshold=False,**kwargs)\u00b6", "function_name": "make_scorer", "args": ["score_func", "*", "**kwargs"], "kwargs": [["greater_is_better", "True"], ["needs_proba", "False"], ["needs_threshold", "False"]]},
{"code": "sklearn.metrics.get_scorer(scoring)\u00b6", "function_name": "get_scorer", "args": ["scoring"], "kwargs": []},
{"code": "sklearn.manifold.smacof(dissimilarities,*,metric=True,n_components=2,init=None,n_init=8,n_jobs=None,max_iter=300,verbose=0,eps=0.001,random_state=None,return_n_iter=False)\u00b6", "function_name": "smacof", "args": ["dissimilarities", "*"], "kwargs": [["metric", "True"], ["n_components", "2"], ["init", "None"], ["n_init", "8"], ["n_jobs", "None"], ["max_iter", "300"], ["verbose", "0"], ["eps", "0.001"], ["random_state", "None"], ["return_n_iter", "False"]]},
{"code": "sklearn.metrics.check_scoring(estimator,scoring=None,*,allow_none=False)\u00b6", "function_name": "check_scoring", "args": ["estimator", "*"], "kwargs": [["scoring", "None"], ["allow_none", "False"]]},
{"code": "sklearn.manifold.trustworthiness(X,X_embedded,*,n_neighbors=5,metric='euclidean')\u00b6", "function_name": "trustworthiness", "args": ["X", "X_embedded", "*"], "kwargs": [["n_neighbors", "5"], ["metric", "'euclidean'"]]},
{"code": "sklearn.manifold.locally_linear_embedding(X,*,n_neighbors,n_components,reg=0.001,eigen_solver='auto',tol=1e-06,max_iter=100,method='standard',hessian_tol=0.0001,modified_tol=1e-12,random_state=None,n_jobs=None)\u00b6", "function_name": "locally_linear_embedding", "args": ["X", "*", "n_neighbors", "n_components"], "kwargs": [["reg", "0.001"], ["eigen_solver", "'auto'"], ["tol", "1e-06"], ["max_iter", "100"], ["method", "'standard'"], ["hessian_tol", "0.0001"], ["modified_tol", "1e-12"], ["random_state", "None"], ["n_jobs", "None"]]},
{"code": "sklearn.manifold.spectral_embedding(adjacency,*,n_components=8,eigen_solver=None,random_state=None,eigen_tol=0.0,norm_laplacian=True,drop_first=True)\u00b6", "function_name": "spectral_embedding", "args": ["adjacency", "*"], "kwargs": [["n_components", "8"], ["eigen_solver", "None"], ["random_state", "None"], ["eigen_tol", "0.0"], ["norm_laplacian", "True"], ["drop_first", "True"]]},
{"code": "sklearn.linear_model.orthogonal_mp(X,y,*,n_nonzero_coefs=None,tol=None,precompute=False,copy_X=True,return_path=False,return_n_iter=False)\u00b6", "function_name": "orthogonal_mp", "args": ["X", "y", "*"], "kwargs": [["n_nonzero_coefs", "None"], ["tol", "None"], ["precompute", "False"], ["copy_X", "True"], ["return_path", "False"], ["return_n_iter", "False"]]},
{"code": "sklearn.linear_model.ridge_regression(X,y,alpha,*,sample_weight=None,solver='auto',max_iter=None,tol=0.001,verbose=0,random_state=None,return_n_iter=False,return_intercept=False,check_input=True)\u00b6", "function_name": "ridge_regression", "args": ["X", "y", "alpha", "*"], "kwargs": [["sample_weight", "None"], ["solver", "'auto'"], ["max_iter", "None"], ["tol", "0.001"], ["verbose", "0"], ["random_state", "None"], ["return_n_iter", "False"], ["return_intercept", "False"], ["check_input", "True"]]},
{"code": "sklearn.linear_model.orthogonal_mp_gram(Gram,Xy,*,n_nonzero_coefs=None,tol=None,norms_squared=None,copy_Gram=True,copy_Xy=True,return_path=False,return_n_iter=False)\u00b6", "function_name": "orthogonal_mp_gram", "args": ["Gram", "Xy", "*"], "kwargs": [["n_nonzero_coefs", "None"], ["tol", "None"], ["norms_squared", "None"], ["copy_Gram", "True"], ["copy_Xy", "True"], ["return_path", "False"], ["return_n_iter", "False"]]},
{"code": "sklearn.linear_model.lars_path_gram(Xy,Gram,*,n_samples,max_iter=500,alpha_min=0,method='lar',copy_X=True,eps=2.220446049250313e-16,copy_Gram=True,verbose=0,return_path=True,return_n_iter=False,positive=False)\u00b6", "function_name": "lars_path_gram", "args": ["Xy", "Gram", "*", "n_samples"], "kwargs": [["max_iter", "500"], ["alpha_min", "0"], ["method", "'lar'"], ["copy_X", "True"], ["eps", "2.220446049250313e-16"], ["copy_Gram", "True"], ["verbose", "0"], ["return_path", "True"], ["return_n_iter", "False"], ["positive", "False"]]},
{"code": "sklearn.linear_model.lasso_path(X,y,*,eps=0.001,n_alphas=100,alphas=None,precompute='auto',Xy=None,copy_X=True,coef_init=None,verbose=False,return_n_iter=False,positive=False,**params)\u00b6", "function_name": "lasso_path", "args": ["X", "y", "*", "**params"], "kwargs": [["eps", "0.001"], ["n_alphas", "100"], ["alphas", "None"], ["precompute", "'auto'"], ["Xy", "None"], ["copy_X", "True"], ["coef_init", "None"], ["verbose", "False"], ["return_n_iter", "False"], ["positive", "False"]]},
{"code": "sklearn.linear_model.lars_path(X,y,Xy=None,*,Gram=None,max_iter=500,alpha_min=0,method='lar',copy_X=True,eps=2.220446049250313e-16,copy_Gram=True,verbose=0,return_path=True,return_n_iter=False,positive=False)\u00b6", "function_name": "lars_path", "args": ["X", "y", "*"], "kwargs": [["Xy", "None"], ["Gram", "None"], ["max_iter", "500"], ["alpha_min", "0"], ["method", "'lar'"], ["copy_X", "True"], ["eps", "2.220446049250313e-16"], ["copy_Gram", "True"], ["verbose", "0"], ["return_path", "True"], ["return_n_iter", "False"], ["positive", "False"]]},
{"code": "sklearn.linear_model.enet_path(X,y,*,l1_ratio=0.5,eps=0.001,n_alphas=100,alphas=None,precompute='auto',Xy=None,copy_X=True,coef_init=None,verbose=False,return_n_iter=False,positive=False,check_input=True,**params)\u00b6", "function_name": "enet_path", "args": ["X", "y", "*", "**params"], "kwargs": [["l1_ratio", "0.5"], ["eps", "0.001"], ["n_alphas", "100"], ["alphas", "None"], ["precompute", "'auto'"], ["Xy", "None"], ["copy_X", "True"], ["coef_init", "None"], ["verbose", "False"], ["return_n_iter", "False"], ["positive", "False"], ["check_input", "True"]]},
{"code": "sklearn.linear_model.PassiveAggressiveRegressor(*,C=1.0,fit_intercept=True,max_iter=1000,tol=0.001,early_stopping=False,validation_fraction=0.1,n_iter_no_change=5,shuffle=True,verbose=0,loss='epsilon_insensitive',epsilon=0.1,random_state=None,warm_start=False,average=False)\u00b6", "function_name": "PassiveAggressiveRegressor", "args": ["*"], "kwargs": [["C", "1.0"], ["fit_intercept", "True"], ["max_iter", "1000"], ["tol", "0.001"], ["early_stopping", "False"], ["validation_fraction", "0.1"], ["n_iter_no_change", "5"], ["shuffle", "True"], ["verbose", "0"], ["loss", "'epsilon_insensitive'"], ["epsilon", "0.1"], ["random_state", "None"], ["warm_start", "False"], ["average", "False"]]},
{"code": "sklearn.isotonic.check_increasing(x,y)\u00b6", "function_name": "check_increasing", "args": ["x", "y"], "kwargs": []},
{"code": "sklearn.isotonic.isotonic_regression(y,*,sample_weight=None,y_min=None,y_max=None,increasing=True)\u00b6", "function_name": "isotonic_regression", "args": ["y", "*"], "kwargs": [["sample_weight", "None"], ["y_min", "None"], ["y_max", "None"], ["increasing", "True"]]},
{"code": "sklearn.inspection.permutation_importance(estimator,X,y,*,scoring=None,n_repeats=5,n_jobs=None,random_state=None)\u00b6", "function_name": "permutation_importance", "args": ["estimator", "X", "y", "*"], "kwargs": [["scoring", "None"], ["n_repeats", "5"], ["n_jobs", "None"], ["random_state", "None"]]},
{"code": "sklearn.feature_selection.f_regression(X,y,*,center=True)\u00b6", "function_name": "f_regression", "args": ["X", "y", "*"], "kwargs": [["center", "True"]]},
{"code": "sklearn.feature_selection.mutual_info_regression(X,y,*,discrete_features='auto',n_neighbors=3,copy=True,random_state=None)\u00b6", "function_name": "mutual_info_regression", "args": ["X", "y", "*"], "kwargs": [["discrete_features", "'auto'"], ["n_neighbors", "3"], ["copy", "True"], ["random_state", "None"]]},
{"code": "sklearn.feature_selection.mutual_info_classif(X,y,*,discrete_features='auto',n_neighbors=3,copy=True,random_state=None)\u00b6", "function_name": "mutual_info_classif", "args": ["X", "y", "*"], "kwargs": [["discrete_features", "'auto'"], ["n_neighbors", "3"], ["copy", "True"], ["random_state", "None"]]},
{"code": "sklearn.feature_selection.f_classif(X,y)\u00b6", "function_name": "f_classif", "args": ["X", "y"], "kwargs": []},
{"code": "sklearn.feature_selection.chi2(X,y)\u00b6", "function_name": "chi2", "args": ["X", "y"], "kwargs": []},
{"code": "sklearn.feature_extraction.image.reconstruct_from_patches_2d(patches,image_size)\u00b6", "function_name": "reconstruct_from_patches_2d", "args": ["patches", "image_size"], "kwargs": []},
{"code": "sklearn.feature_extraction.image.extract_patches_2d(image,patch_size,*,max_patches=None,random_state=None)\u00b6", "function_name": "extract_patches_2d", "args": ["image", "patch_size", "*"], "kwargs": [["max_patches", "None"], ["random_state", "None"]]},
{"code": "sklearn.decomposition.sparse_encode(X,dictionary,*,gram=None,cov=None,algorithm='lasso_lars',n_nonzero_coefs=None,alpha=None,copy_cov=True,init=None,max_iter=1000,n_jobs=None,check_input=True,verbose=0,positive=False)\u00b6", "function_name": "sparse_encode", "args": ["X", "dictionary", "*"], "kwargs": [["gram", "None"], ["cov", "None"], ["algorithm", "'lasso_lars'"], ["n_nonzero_coefs", "None"], ["alpha", "None"], ["copy_cov", "True"], ["init", "None"], ["max_iter", "1000"], ["n_jobs", "None"], ["check_input", "True"], ["verbose", "0"], ["positive", "False"]]},
{"code": "sklearn.decomposition.dict_learning_online(X,n_components=2,*,alpha=1,n_iter=100,return_code=True,dict_init=None,callback=None,batch_size=3,verbose=False,shuffle=True,n_jobs=None,method='lars',iter_offset=0,random_state=None,return_inner_stats=False,inner_stats=None,return_n_iter=False,positive_dict=False,positive_code=False,method_max_iter=1000)\u00b6", "function_name": "dict_learning_online", "args": ["X", "*"], "kwargs": [["n_components", "2"], ["alpha", "1"], ["n_iter", "100"], ["return_code", "True"], ["dict_init", "None"], ["callback", "None"], ["batch_size", "3"], ["verbose", "False"], ["shuffle", "True"], ["n_jobs", "None"], ["method", "'lars'"], ["iter_offset", "0"], ["random_state", "None"], ["return_inner_stats", "False"], ["inner_stats", "None"], ["return_n_iter", "False"], ["positive_dict", "False"], ["positive_code", "False"], ["method_max_iter", "1000"]]},
{"code": "sklearn.decomposition.fastica(X,n_components=None,*,algorithm='parallel',whiten=True,fun='logcosh',fun_args=None,max_iter=200,tol=0.0001,w_init=None,random_state=None,return_X_mean=False,compute_sources=True,return_n_iter=False)\u00b6", "function_name": "fastica", "args": ["X", "*"], "kwargs": [["n_components", "None"], ["algorithm", "'parallel'"], ["whiten", "True"], ["fun", "'logcosh'"], ["fun_args", "None"], ["max_iter", "200"], ["tol", "0.0001"], ["w_init", "None"], ["random_state", "None"], ["return_X_mean", "False"], ["compute_sources", "True"], ["return_n_iter", "False"]]},
{"code": "sklearn.decomposition.non_negative_factorization(X,W=None,H=None,n_components=None,*,init=None,update_H=True,solver='cd',beta_loss='frobenius',tol=0.0001,max_iter=200,alpha=0.0,l1_ratio=0.0,regularization=None,random_state=None,verbose=0,shuffle=False)\u00b6", "function_name": "non_negative_factorization", "args": ["X", "*"], "kwargs": [["W", "None"], ["H", "None"], ["n_components", "None"], ["init", "None"], ["update_H", "True"], ["solver", "'cd'"], ["beta_loss", "'frobenius'"], ["tol", "0.0001"], ["max_iter", "200"], ["alpha", "0.0"], ["l1_ratio", "0.0"], ["regularization", "None"], ["random_state", "None"], ["verbose", "0"], ["shuffle", "False"]]},
{"code": "sklearn.decomposition.dict_learning(X,n_components,*,alpha,max_iter=100,tol=1e-08,method='lars',n_jobs=None,dict_init=None,code_init=None,callback=None,verbose=False,random_state=None,return_n_iter=False,positive_dict=False,positive_code=False,method_max_iter=1000)\u00b6", "function_name": "dict_learning", "args": ["X", "n_components", "*", "alpha"], "kwargs": [["max_iter", "100"], ["tol", "1e-08"], ["method", "'lars'"], ["n_jobs", "None"], ["dict_init", "None"], ["code_init", "None"], ["callback", "None"], ["verbose", "False"], ["random_state", "None"], ["return_n_iter", "False"], ["positive_dict", "False"], ["positive_code", "False"], ["method_max_iter", "1000"]]},
{"code": "sklearn.datasets.make_spd_matrix(n_dim,*,random_state=None)\u00b6", "function_name": "make_spd_matrix", "args": ["n_dim", "*"], "kwargs": [["random_state", "None"]]},
{"code": "sklearn.datasets.make_swiss_roll(n_samples=100,*,noise=0.0,random_state=None)\u00b6", "function_name": "make_swiss_roll", "args": ["*"], "kwargs": [["n_samples", "100"], ["noise", "0.0"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_s_curve(n_samples=100,*,noise=0.0,random_state=None)\u00b6", "function_name": "make_s_curve", "args": ["*"], "kwargs": [["n_samples", "100"], ["noise", "0.0"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_sparse_uncorrelated(n_samples=100,n_features=10,*,random_state=None)\u00b6", "function_name": "make_sparse_uncorrelated", "args": ["*"], "kwargs": [["n_samples", "100"], ["n_features", "10"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_sparse_spd_matrix(dim=1,*,alpha=0.95,norm_diag=False,smallest_coef=0.1,largest_coef=0.9,random_state=None)\u00b6", "function_name": "make_sparse_spd_matrix", "args": ["*"], "kwargs": [["dim", "1"], ["alpha", "0.95"], ["norm_diag", "False"], ["smallest_coef", "0.1"], ["largest_coef", "0.9"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_sparse_coded_signal(n_samples,*,n_components,n_features,n_nonzero_coefs,random_state=None)\u00b6", "function_name": "make_sparse_coded_signal", "args": ["n_samples", "*", "n_components", "n_features", "n_nonzero_coefs"], "kwargs": [["random_state", "None"]]},
{"code": "sklearn.datasets.make_multilabel_classification(n_samples=100,n_features=20,*,n_classes=5,n_labels=2,length=50,allow_unlabeled=True,sparse=False,return_indicator='dense',return_distributions=False,random_state=None)\u00b6", "function_name": "make_multilabel_classification", "args": ["*"], "kwargs": [["n_samples", "100"], ["n_features", "20"], ["n_classes", "5"], ["n_labels", "2"], ["length", "50"], ["allow_unlabeled", "True"], ["sparse", "False"], ["return_indicator", "'dense'"], ["return_distributions", "False"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_regression(n_samples=100,n_features=100,*,n_informative=10,n_targets=1,bias=0.0,effective_rank=None,tail_strength=0.5,noise=0.0,shuffle=True,coef=False,random_state=None)\u00b6", "function_name": "make_regression", "args": ["*"], "kwargs": [["n_samples", "100"], ["n_features", "100"], ["n_informative", "10"], ["n_targets", "1"], ["bias", "0.0"], ["effective_rank", "None"], ["tail_strength", "0.5"], ["noise", "0.0"], ["shuffle", "True"], ["coef", "False"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_low_rank_matrix(n_samples=100,n_features=100,*,effective_rank=10,tail_strength=0.5,random_state=None)\u00b6", "function_name": "make_low_rank_matrix", "args": ["*"], "kwargs": [["n_samples", "100"], ["n_features", "100"], ["effective_rank", "10"], ["tail_strength", "0.5"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_friedman1(n_samples=100,n_features=10,*,noise=0.0,random_state=None)\u00b6", "function_name": "make_friedman1", "args": ["*"], "kwargs": [["n_samples", "100"], ["n_features", "10"], ["noise", "0.0"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_friedman2(n_samples=100,*,noise=0.0,random_state=None)\u00b6", "function_name": "make_friedman2", "args": ["*"], "kwargs": [["n_samples", "100"], ["noise", "0.0"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_gaussian_quantiles(*,mean=None,cov=1.0,n_samples=100,n_features=2,n_classes=3,shuffle=True,random_state=None)\u00b6", "function_name": "make_gaussian_quantiles", "args": ["*"], "kwargs": [["mean", "None"], ["cov", "1.0"], ["n_samples", "100"], ["n_features", "2"], ["n_classes", "3"], ["shuffle", "True"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_moons(n_samples=100,*,shuffle=True,noise=None,random_state=None)\u00b6", "function_name": "make_moons", "args": ["*"], "kwargs": [["n_samples", "100"], ["shuffle", "True"], ["noise", "None"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_friedman3(n_samples=100,*,noise=0.0,random_state=None)\u00b6", "function_name": "make_friedman3", "args": ["*"], "kwargs": [["n_samples", "100"], ["noise", "0.0"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_classification(n_samples=100,n_features=20,*,n_informative=2,n_redundant=2,n_repeated=0,n_classes=2,n_clusters_per_class=2,weights=None,flip_y=0.01,class_sep=1.0,hypercube=True,shift=0.0,scale=1.0,shuffle=True,random_state=None)\u00b6", "function_name": "make_classification", "args": ["*"], "kwargs": [["n_samples", "100"], ["n_features", "20"], ["n_informative", "2"], ["n_redundant", "2"], ["n_repeated", "0"], ["n_classes", "2"], ["n_clusters_per_class", "2"], ["weights", "None"], ["flip_y", "0.01"], ["class_sep", "1.0"], ["hypercube", "True"], ["shift", "0.0"], ["scale", "1.0"], ["shuffle", "True"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_hastie_10_2(n_samples=12000,*,random_state=None)\u00b6", "function_name": "make_hastie_10_2", "args": ["*"], "kwargs": [["n_samples", "12000"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_circles(n_samples=100,*,shuffle=True,noise=None,random_state=None,factor=0.8)\u00b6", "function_name": "make_circles", "args": ["*"], "kwargs": [["n_samples", "100"], ["shuffle", "True"], ["noise", "None"], ["random_state", "None"], ["factor", "0.8"]]},
{"code": "sklearn.datasets.make_checkerboard(shape,n_clusters,*,noise=0.0,minval=10,maxval=100,shuffle=True,random_state=None)\u00b6", "function_name": "make_checkerboard", "args": ["shape", "n_clusters", "*"], "kwargs": [["noise", "0.0"], ["minval", "10"], ["maxval", "100"], ["shuffle", "True"], ["random_state", "None"]]},
{"code": "sklearn.datasets.make_biclusters(shape,n_clusters,*,noise=0.0,minval=10,maxval=100,shuffle=True,random_state=None)\u00b6", "function_name": "make_biclusters", "args": ["shape", "n_clusters", "*"], "kwargs": [["noise", "0.0"], ["minval", "10"], ["maxval", "100"], ["shuffle", "True"], ["random_state", "None"]]},
{"code": "sklearn.datasets.load_wine(*,return_X_y=False,as_frame=False)\u00b6", "function_name": "load_wine", "args": ["*"], "kwargs": [["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.load_sample_image(image_name)\u00b6", "function_name": "load_sample_image", "args": ["image_name"], "kwargs": []},
{"code": "sklearn.datasets.load_sample_images()\u00b6", "function_name": "load_sample_images", "args": [""], "kwargs": []},
{"code": "sklearn.datasets.load_linnerud(*,return_X_y=False,as_frame=False)\u00b6", "function_name": "load_linnerud", "args": ["*"], "kwargs": [["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.load_iris(*,return_X_y=False,as_frame=False)\u00b6", "function_name": "load_iris", "args": ["*"], "kwargs": [["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.load_files(container_path,*,description=None,categories=None,load_content=True,shuffle=True,encoding=None,decode_error='strict',random_state=0)\u00b6", "function_name": "load_files", "args": ["container_path", "*"], "kwargs": [["description", "None"], ["categories", "None"], ["load_content", "True"], ["shuffle", "True"], ["encoding", "None"], ["decode_error", "'strict'"], ["random_state", "0"]]},
{"code": "sklearn.datasets.load_boston(*,return_X_y=False)\u00b6", "function_name": "load_boston", "args": ["*"], "kwargs": [["return_X_y", "False"]]},
{"code": "sklearn.datasets.get_data_home(data_home=None)\u00b6", "function_name": "get_data_home", "args": [], "kwargs": [["data_home", "None"]]},
{"code": "sklearn.datasets.load_breast_cancer(*,return_X_y=False,as_frame=False)\u00b6", "function_name": "load_breast_cancer", "args": ["*"], "kwargs": [["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.load_diabetes(*,return_X_y=False,as_frame=False)\u00b6", "function_name": "load_diabetes", "args": ["*"], "kwargs": [["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.fetch_species_distributions(*,data_home=None,download_if_missing=True)\u00b6", "function_name": "fetch_species_distributions", "args": ["*"], "kwargs": [["data_home", "None"], ["download_if_missing", "True"]]},
{"code": "sklearn.datasets.load_digits(*,n_class=10,return_X_y=False,as_frame=False)\u00b6", "function_name": "load_digits", "args": ["*"], "kwargs": [["n_class", "10"], ["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.fetch_rcv1(*,data_home=None,subset='all',download_if_missing=True,random_state=None,shuffle=False,return_X_y=False)\u00b6", "function_name": "fetch_rcv1", "args": ["*"], "kwargs": [["data_home", "None"], ["subset", "'all'"], ["download_if_missing", "True"], ["random_state", "None"], ["shuffle", "False"], ["return_X_y", "False"]]},
{"code": "sklearn.datasets.fetch_openml(name=None,*,version='active',data_id=None,data_home=None,target_column='default-target',cache=True,return_X_y=False,as_frame=False)\u00b6", "function_name": "fetch_openml", "args": ["*"], "kwargs": [["name", "None"], ["version", "'active'"], ["data_id", "None"], ["data_home", "None"], ["target_column", "'default-target'"], ["cache", "True"], ["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.fetch_olivetti_faces(*,data_home=None,shuffle=False,random_state=0,download_if_missing=True,return_X_y=False)\u00b6", "function_name": "fetch_olivetti_faces", "args": ["*"], "kwargs": [["data_home", "None"], ["shuffle", "False"], ["random_state", "0"], ["download_if_missing", "True"], ["return_X_y", "False"]]},
{"code": "sklearn.datasets.fetch_california_housing(*,data_home=None,download_if_missing=True,return_X_y=False,as_frame=False)\u00b6", "function_name": "fetch_california_housing", "args": ["*"], "kwargs": [["data_home", "None"], ["download_if_missing", "True"], ["return_X_y", "False"], ["as_frame", "False"]]},
{"code": "sklearn.datasets.fetch_kddcup99(*,subset=None,data_home=None,shuffle=False,random_state=None,percent10=True,download_if_missing=True,return_X_y=False)\u00b6", "function_name": "fetch_kddcup99", "args": ["*"], "kwargs": [["subset", "None"], ["data_home", "None"], ["shuffle", "False"], ["random_state", "None"], ["percent10", "True"], ["download_if_missing", "True"], ["return_X_y", "False"]]},
{"code": "sklearn.datasets.fetch_covtype(*,data_home=None,download_if_missing=True,random_state=None,shuffle=False,return_X_y=False)\u00b6", "function_name": "fetch_covtype", "args": ["*"], "kwargs": [["data_home", "None"], ["download_if_missing", "True"], ["random_state", "None"], ["shuffle", "False"], ["return_X_y", "False"]]},
{"code": "sklearn.datasets.dump_svmlight_file(X,y,f,*,zero_based=True,comment=None,query_id=None,multilabel=False)\u00b6", "function_name": "dump_svmlight_file", "args": ["X", "y", "f", "*"], "kwargs": [["zero_based", "True"], ["comment", "None"], ["query_id", "None"], ["multilabel", "False"]]},
{"code": "sklearn.datasets.clear_data_home(data_home=None)\u00b6", "function_name": "clear_data_home", "args": [], "kwargs": [["data_home", "None"]]},
{"code": "sklearn.covariance.oas(X,*,assume_centered=False)\u00b6", "function_name": "oas", "args": ["X", "*"], "kwargs": [["assume_centered", "False"]]},
{"code": "sklearn.covariance.shrunk_covariance(emp_cov,shrinkage=0.1)\u00b6", "function_name": "shrunk_covariance", "args": ["emp_cov"], "kwargs": [["shrinkage", "0.1"]]},
{"code": "sklearn.covariance.ledoit_wolf(X,*,assume_centered=False,block_size=1000)\u00b6", "function_name": "ledoit_wolf", "args": ["X", "*"], "kwargs": [["assume_centered", "False"], ["block_size", "1000"]]},
{"code": "sklearn.covariance.empirical_covariance(X,*,assume_centered=False)\u00b6", "function_name": "empirical_covariance", "args": ["X", "*"], "kwargs": [["assume_centered", "False"]]},
{"code": "sklearn.covariance.graphical_lasso(emp_cov,alpha,*,cov_init=None,mode='cd',tol=0.0001,enet_tol=0.0001,max_iter=100,verbose=False,return_costs=False,eps=2.220446049250313e-16,return_n_iter=False)\u00b6", "function_name": "graphical_lasso", "args": ["emp_cov", "alpha", "*"], "kwargs": [["cov_init", "None"], ["mode", "'cd'"], ["tol", "0.0001"], ["enet_tol", "0.0001"], ["max_iter", "100"], ["verbose", "False"], ["return_costs", "False"], ["eps", "2.220446049250313e-16"], ["return_n_iter", "False"]]},
{"code": "sklearn.cluster.cluster_optics_dbscan(*,reachability,core_distances,ordering,eps)\u00b6", "function_name": "cluster_optics_dbscan", "args": ["*", "reachability", "core_distances", "ordering", "eps"], "kwargs": []},
{"code": "sklearn.cluster.cluster_optics_xi(*,reachability,predecessor,ordering,min_samples,min_cluster_size=None,xi=0.05,predecessor_correction=True)\u00b6", "function_name": "cluster_optics_xi", "args": ["*", "reachability", "predecessor", "ordering", "min_samples"], "kwargs": [["min_cluster_size", "None"], ["xi", "0.05"], ["predecessor_correction", "True"]]},
{"code": "sklearn.cluster.compute_optics_graph(X,*,min_samples,max_eps,metric,p,metric_params,algorithm,leaf_size,n_jobs)\u00b6", "function_name": "compute_optics_graph", "args": ["X", "*", "min_samples", "max_eps", "metric", "p", "metric_params", "algorithm", "leaf_size", "n_jobs"], "kwargs": []},
{"code": "sklearn.cluster.affinity_propagation(S,*,preference=None,convergence_iter=15,max_iter=200,damping=0.5,copy=True,verbose=False,return_n_iter=False,random_state='warn')\u00b6", "function_name": "affinity_propagation", "args": ["S", "*"], "kwargs": [["preference", "None"], ["convergence_iter", "15"], ["max_iter", "200"], ["damping", "0.5"], ["copy", "True"], ["verbose", "False"], ["return_n_iter", "False"], ["random_state", "'warn'"]]},
{"code": "sklearn.calibration.calibration_curve(y_true,y_prob,*,normalize=False,n_bins=5,strategy='uniform')\u00b6", "function_name": "calibration_curve", "args": ["y_true", "y_prob", "*"], "kwargs": [["normalize", "False"], ["n_bins", "5"], ["strategy", "'uniform'"]]},
{"code": "sklearn.show_versions()\u00b6", "function_name": "show_versions", "args": [""], "kwargs": []},
{"code": "sklearn.get_config()\u00b6", "function_name": "get_config", "args": [""], "kwargs": []},
{"code": "sklearn.base.is_classifier(estimator)\u00b6", "function_name": "is_classifier", "args": ["estimator"], "kwargs": []},
{"code": "sklearn.set_config(assume_finite=None,working_memory=None,print_changed_only=None,display=None)\u00b6", "function_name": "set_config", "args": [], "kwargs": [["assume_finite", "None"], ["working_memory", "None"], ["print_changed_only", "None"], ["display", "None"]]},
{"code": "sklearn.config_context(**new_config)\u00b6", "function_name": "config_context", "args": ["**new_config"], "kwargs": []},
{"code": "sklearn.base.is_regressor(estimator)\u00b6", "function_name": "is_regressor", "args": ["estimator"], "kwargs": []},
{"code": "sklearn.base.clone(estimator,*,safe=True)\u00b6", "function_name": "clone", "args": ["estimator", "*"], "kwargs": [["safe", "True"]]}
]