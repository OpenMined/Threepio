[
{"code": "tf.tensor(values,shape?,dtype?)", "function_name": "tensor", "args": ["values", "shape?", "dtype?"], "kwargs": []},
{"code": "tf.scalar(value,dtype?)", "function_name": "scalar", "args": ["value", "dtype?"], "kwargs": []},
{"code": "tf.tensor1d(values,dtype?)", "function_name": "tensor1d", "args": ["values", "dtype?"], "kwargs": []},
{"code": "tf.tensor2d(values,shape?,dtype?)", "function_name": "tensor2d", "args": ["values", "shape?", "dtype?"], "kwargs": []},
{"code": "tf.tensor3d(values,shape?,dtype?)", "function_name": "tensor3d", "args": ["values", "shape?", "dtype?"], "kwargs": []},
{"code": "tf.tensor4d(values,shape?,dtype?)", "function_name": "tensor4d", "args": ["values", "shape?", "dtype?"], "kwargs": []},
{"code": "tf.tensor5d(values,shape?,dtype?)", "function_name": "tensor5d", "args": ["values", "shape?", "dtype?"], "kwargs": []},
{"code": "tf.tensor6d(values,shape?,dtype?)", "function_name": "tensor6d", "args": ["values", "shape?", "dtype?"], "kwargs": []},
{"code": "tf.buffer(shape,dtype?,values?)", "function_name": "buffer", "args": ["shape", "dtype?", "values?"], "kwargs": []},
{"code": "tf.clone(x)", "function_name": "clone", "args": ["x"], "kwargs": []},
{"code": "tf.complex(real,imag)", "function_name": "complex", "args": ["real", "imag"], "kwargs": []},
{"code": "tf.eye(numRows,numColumns?,batchShape?,dtype?)", "function_name": "eye", "args": ["numRows", "numColumns?", "batchShape?", "dtype?"], "kwargs": []},
{"code": "tf.fill(shape,value,dtype?)", "function_name": "fill", "args": ["shape", "value", "dtype?"], "kwargs": []},
{"code": "tf.imag(input)", "function_name": "imag", "args": ["input"], "kwargs": []},
{"code": "tf.linspace(start,stop,num)", "function_name": "linspace", "args": ["start", "stop", "num"], "kwargs": []},
{"code": "tf.oneHot(indices,depth,onValue?,offValue?)", "function_name": "oneHot", "args": ["indices", "depth", "onValue?", "offValue?"], "kwargs": []},
{"code": "tf.ones(shape,dtype?)", "function_name": "ones", "args": ["shape", "dtype?"], "kwargs": []},
{"code": "tf.onesLike(x)", "function_name": "onesLike", "args": ["x"], "kwargs": []},
{"code": "tf.print(x,verbose?)", "function_name": "print", "args": ["x", "verbose?"], "kwargs": []},
{"code": "tf.range(start,stop,step?,dtype?)", "function_name": "range", "args": ["start", "stop", "step?", "dtype?"], "kwargs": []},
{"code": "tf.real(input)", "function_name": "real", "args": ["input"], "kwargs": []},
{"code": "tf.truncatedNormal(shape,mean?,stdDev?,dtype?,seed?)", "function_name": "truncatedNormal", "args": ["shape", "mean?", "stdDev?", "dtype?", "seed?"], "kwargs": []},
{"code": "tf.variable(initialValue,trainable?,name?,dtype?)", "function_name": "variable", "args": ["initialValue", "trainable?", "name?", "dtype?"], "kwargs": []},
{"code": "tf.zeros(shape,dtype?)", "function_name": "zeros", "args": ["shape", "dtype?"], "kwargs": []},
{"code": "tf.zerosLike(x)", "function_name": "zerosLike", "args": ["x"], "kwargs": []},
{"code": "flatten()", "function_name": "flatten", "args": [""], "kwargs": []},
{"code": "asScalar()", "function_name": "asScalar", "args": [""], "kwargs": []},
{"code": "as1D()", "function_name": "as1D", "args": [""], "kwargs": []},
{"code": "as2D(rows,columns)", "function_name": "as2D", "args": ["rows", "columns"], "kwargs": []},
{"code": "as3D(rows,columns,depth)", "function_name": "as3D", "args": ["rows", "columns", "depth"], "kwargs": []},
{"code": "as4D(rows,columns,depth,depth2)", "function_name": "as4D", "args": ["rows", "columns", "depth", "depth2"], "kwargs": []},
{"code": "as5D(rows,columns,depth,depth2,depth3)", "function_name": "as5D", "args": ["rows", "columns", "depth", "depth2", "depth3"], "kwargs": []},
{"code": "asType(dtype)", "function_name": "asType", "args": ["dtype"], "kwargs": []},
{"code": "buffer()", "function_name": "buffer", "args": [""], "kwargs": []},
{"code": "bufferSync()", "function_name": "bufferSync", "args": [""], "kwargs": []},
{"code": "array()", "function_name": "array", "args": [""], "kwargs": []},
{"code": "arraySync()", "function_name": "arraySync", "args": [""], "kwargs": []},
{"code": "data()", "function_name": "data", "args": [""], "kwargs": []},
{"code": "dataSync()", "function_name": "dataSync", "args": [""], "kwargs": []},
{"code": "dispose()", "function_name": "dispose", "args": [""], "kwargs": []},
{"code": "toFloat()", "function_name": "toFloat", "args": [""], "kwargs": []},
{"code": "toInt()", "function_name": "toInt", "args": [""], "kwargs": []},
{"code": "toBool()", "function_name": "toBool", "args": [""], "kwargs": []},
{"code": "print(verbose?)", "function_name": "print", "args": ["verbose?"], "kwargs": []},
{"code": "reshape(newShape)", "function_name": "reshape", "args": ["newShape"], "kwargs": []},
{"code": "reshapeAs(x)", "function_name": "reshapeAs", "args": ["x"], "kwargs": []},
{"code": "expandDims(axis?)", "function_name": "expandDims", "args": ["axis?"], "kwargs": []},
{"code": "cumsum(axis?,exclusive?,reverse?)", "function_name": "cumsum", "args": ["axis?", "exclusive?", "reverse?"], "kwargs": []},
{"code": "squeeze(axis?)", "function_name": "squeeze", "args": ["axis?"], "kwargs": []},
{"code": "clone()", "function_name": "clone", "args": [""], "kwargs": []},
{"code": "toString(verbose?)", "function_name": "toString", "args": ["verbose?"], "kwargs": []},
{"code": "assign(newValue)", "function_name": "assign", "args": ["newValue"], "kwargs": []},
{"code": "set(value,...locs)", "function_name": "set", "args": ["value", "...locs"], "kwargs": []},
{"code": "get(...locs)", "function_name": "get", "args": ["...locs"], "kwargs": []},
{"code": "toTensor()", "function_name": "toTensor", "args": [""], "kwargs": []},
{"code": "tf.batchToSpaceND(x,blockShape,crops)", "function_name": "batchToSpaceND", "args": ["x", "blockShape", "crops"], "kwargs": []},
{"code": "tf.broadcastTo(x,shape)", "function_name": "broadcastTo", "args": ["x", "shape"], "kwargs": []},
{"code": "tf.cast(x,dtype)", "function_name": "cast", "args": ["x", "dtype"], "kwargs": []},
{"code": "tf.depthToSpace(x,blockSize,dataFormat?)", "function_name": "depthToSpace", "args": ["x", "blockSize", "dataFormat?"], "kwargs": []},
{"code": "tf.expandDims(x,axis?)", "function_name": "expandDims", "args": ["x", "axis?"], "kwargs": []},
{"code": "tf.pad(x,paddings,constantValue?)", "function_name": "pad", "args": ["x", "paddings", "constantValue?"], "kwargs": []},
{"code": "tf.reshape(x,shape)", "function_name": "reshape", "args": ["x", "shape"], "kwargs": []},
{"code": "tf.setdiff1dAsync(x,y)", "function_name": "setdiff1dAsync", "args": ["x", "y"], "kwargs": []},
{"code": "tf.spaceToBatchND(x,blockShape,paddings)", "function_name": "spaceToBatchND", "args": ["x", "blockShape", "paddings"], "kwargs": []},
{"code": "tf.squeeze(x,axis?)", "function_name": "squeeze", "args": ["x", "axis?"], "kwargs": []},
{"code": "tf.booleanMaskAsync(tensor,mask,axis?)", "function_name": "booleanMaskAsync", "args": ["tensor", "mask", "axis?"], "kwargs": []},
{"code": "tf.concat(tensors,axis?)", "function_name": "concat", "args": ["tensors", "axis?"], "kwargs": []},
{"code": "tf.gather(x,indices,axis?)", "function_name": "gather", "args": ["x", "indices", "axis?"], "kwargs": []},
{"code": "tf.reverse(x,axis?)", "function_name": "reverse", "args": ["x", "axis?"], "kwargs": []},
{"code": "tf.slice(x,begin,size?)", "function_name": "slice", "args": ["x", "begin", "size?"], "kwargs": []},
{"code": "tf.split(x,numOrSizeSplits,axis?)", "function_name": "split", "args": ["x", "numOrSizeSplits", "axis?"], "kwargs": []},
{"code": "tf.stack(tensors,axis?)", "function_name": "stack", "args": ["tensors", "axis?"], "kwargs": []},
{"code": "tf.tile(x,reps)", "function_name": "tile", "args": ["x", "reps"], "kwargs": []},
{"code": "tf.unstack(x,axis?)", "function_name": "unstack", "args": ["x", "axis?"], "kwargs": []},
{"code": "tf.multinomial(logits,numSamples,seed?,normalized?)", "function_name": "multinomial", "args": ["logits", "numSamples", "seed?", "normalized?"], "kwargs": []},
{"code": "tf.randomGamma(shape,alpha,beta?,dtype?,seed?)", "function_name": "randomGamma", "args": ["shape", "alpha", "beta?", "dtype?", "seed?"], "kwargs": []},
{"code": "tf.randomNormal(shape,mean?,stdDev?,dtype?,seed?)", "function_name": "randomNormal", "args": ["shape", "mean?", "stdDev?", "dtype?", "seed?"], "kwargs": []},
{"code": "tf.randomUniform(shape,minval?,maxval?,dtype?,seed?)", "function_name": "randomUniform", "args": ["shape", "minval?", "maxval?", "dtype?", "seed?"], "kwargs": []},
{"code": "tf.sequential(config?)", "function_name": "sequential", "args": ["config?"], "kwargs": []},
{"code": "tf.model(args)", "function_name": "model", "args": ["args"], "kwargs": []},
{"code": "tf.input(config)", "function_name": "input", "args": ["config"], "kwargs": []},
{"code": "tf.loadGraphModel(modelUrl,options?)", "function_name": "loadGraphModel", "args": ["modelUrl", "options?"], "kwargs": []},
{"code": "tf.loadLayersModel(pathOrIOHandler,options?)", "function_name": "loadLayersModel", "args": ["pathOrIOHandler", "options?"], "kwargs": []},
{"code": "tf.io.browserDownloads(fileNamePrefix?)", "function_name": "browserDownloads", "args": ["fileNamePrefix?"], "kwargs": []},
{"code": "tf.io.browserFiles(files)", "function_name": "browserFiles", "args": ["files"], "kwargs": []},
{"code": "tf.io.http(path,loadOptions?)", "function_name": "http", "args": ["path", "loadOptions?"], "kwargs": []},
{"code": "tf.io.copyModel(sourceURL,destURL)", "function_name": "copyModel", "args": ["sourceURL", "destURL"], "kwargs": []},
{"code": "tf.io.listModels()", "function_name": "listModels", "args": [""], "kwargs": []},
{"code": "tf.io.moveModel(sourceURL,destURL)", "function_name": "moveModel", "args": ["sourceURL", "destURL"], "kwargs": []},
{"code": "tf.io.removeModel(url)", "function_name": "removeModel", "args": ["url"], "kwargs": []},
{"code": "tf.registerClass(cls)", "function_name": "registerClass", "args": ["cls"], "kwargs": []},
{"code": "predict(inputs,config?)", "function_name": "predict", "args": ["inputs", "config?"], "kwargs": []},
{"code": "execute(inputs,outputs?)", "function_name": "execute", "args": ["inputs", "outputs?"], "kwargs": []},
{"code": "executeAsync(inputs,outputs?)", "function_name": "executeAsync", "args": ["inputs", "outputs?"], "kwargs": []},
{"code": "dispose()", "function_name": "dispose", "args": [""], "kwargs": []},
{"code": "summary(lineLength?,positions?,printFn?)", "function_name": "summary", "args": ["lineLength?", "positions?", "printFn?"], "kwargs": []},
{"code": "compile(args)", "function_name": "compile", "args": ["args"], "kwargs": []},
{"code": "evaluate(x,y,args?)", "function_name": "evaluate", "args": ["x", "y", "args?"], "kwargs": []},
{"code": "evaluateDataset(dataset,args?)", "function_name": "evaluateDataset", "args": ["dataset", "args?"], "kwargs": []},
{"code": "predict(x,args?)", "function_name": "predict", "args": ["x", "args?"], "kwargs": []},
{"code": "predictOnBatch(x)", "function_name": "predictOnBatch", "args": ["x"], "kwargs": []},
{"code": "fit(x,y,args?)", "function_name": "fit", "args": ["x", "y", "args?"], "kwargs": []},
{"code": "fitDataset(dataset,args)", "function_name": "fitDataset", "args": ["dataset", "args"], "kwargs": []},
{"code": "trainOnBatch(x,y)", "function_name": "trainOnBatch", "args": ["x", "y"], "kwargs": []},
{"code": "save(handlerOrURL,config?)", "function_name": "save", "args": ["handlerOrURL", "config?"], "kwargs": []},
{"code": "getLayer(name?,index?)", "function_name": "getLayer", "args": ["name?", "index?"], "kwargs": []},
{"code": "add(layer)", "function_name": "add", "args": ["layer"], "kwargs": []},
{"code": "summary(lineLength?,positions?,printFn?)", "function_name": "summary", "args": ["lineLength?", "positions?", "printFn?"], "kwargs": []},
{"code": "evaluate(x,y,args?)", "function_name": "evaluate", "args": ["x", "y", "args?"], "kwargs": []},
{"code": "evaluateDataset(dataset,args)", "function_name": "evaluateDataset", "args": ["dataset", "args"], "kwargs": []},
{"code": "predict(x,args?)", "function_name": "predict", "args": ["x", "args?"], "kwargs": []},
{"code": "fit(x,y,args?)", "function_name": "fit", "args": ["x", "y", "args?"], "kwargs": []},
{"code": "fitDataset(dataset,args)", "function_name": "fitDataset", "args": ["dataset", "args"], "kwargs": []},
{"code": "trainOnBatch(x,y)", "function_name": "trainOnBatch", "args": ["x", "y"], "kwargs": []},
{"code": "tf.deregisterOp(name)", "function_name": "deregisterOp", "args": ["name"], "kwargs": []},
{"code": "tf.getRegisteredOp(name)", "function_name": "getRegisteredOp", "args": ["name"], "kwargs": []},
{"code": "tf.registerOp(name,opFunc)", "function_name": "registerOp", "args": ["name", "opFunc"], "kwargs": []},
{"code": "tf.layers.elu(args?)", "function_name": "elu", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.leakyReLU(args?)", "function_name": "leakyReLU", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.prelu(args?)", "function_name": "prelu", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.reLU(args?)", "function_name": "reLU", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.softmax(args?)", "function_name": "softmax", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.thresholdedReLU(args?)", "function_name": "thresholdedReLU", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.activation(args)", "function_name": "activation", "args": ["args"], "kwargs": []},
{"code": "tf.layers.dense(args)", "function_name": "dense", "args": ["args"], "kwargs": []},
{"code": "tf.layers.dropout(args)", "function_name": "dropout", "args": ["args"], "kwargs": []},
{"code": "tf.layers.embedding(args)", "function_name": "embedding", "args": ["args"], "kwargs": []},
{"code": "tf.layers.flatten(args?)", "function_name": "flatten", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.permute(args)", "function_name": "permute", "args": ["args"], "kwargs": []},
{"code": "tf.layers.repeatVector(args)", "function_name": "repeatVector", "args": ["args"], "kwargs": []},
{"code": "tf.layers.reshape(args)", "function_name": "reshape", "args": ["args"], "kwargs": []},
{"code": "tf.layers.spatialDropout1d(args)", "function_name": "spatialDropout1d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.conv1d(args)", "function_name": "conv1d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.conv2d(args)", "function_name": "conv2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.conv2dTranspose(args)", "function_name": "conv2dTranspose", "args": ["args"], "kwargs": []},
{"code": "tf.layers.conv3d(args)", "function_name": "conv3d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.cropping2D(args)", "function_name": "cropping2D", "args": ["args"], "kwargs": []},
{"code": "tf.layers.depthwiseConv2d(args)", "function_name": "depthwiseConv2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.separableConv2d(args)", "function_name": "separableConv2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.upSampling2d(args)", "function_name": "upSampling2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.add(args?)", "function_name": "add", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.average(args?)", "function_name": "average", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.concatenate(args?)", "function_name": "concatenate", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.dot(args)", "function_name": "dot", "args": ["args"], "kwargs": []},
{"code": "tf.layers.maximum(args?)", "function_name": "maximum", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.minimum(args?)", "function_name": "minimum", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.multiply(args?)", "function_name": "multiply", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.batchNormalization(args?)", "function_name": "batchNormalization", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.layerNormalization(args?)", "function_name": "layerNormalization", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.averagePooling1d(args)", "function_name": "averagePooling1d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.averagePooling2d(args)", "function_name": "averagePooling2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.averagePooling3d(args)", "function_name": "averagePooling3d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.globalAveragePooling1d(args?)", "function_name": "globalAveragePooling1d", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.globalAveragePooling2d(args)", "function_name": "globalAveragePooling2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.globalMaxPooling1d(args?)", "function_name": "globalMaxPooling1d", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.globalMaxPooling2d(args)", "function_name": "globalMaxPooling2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.maxPooling1d(args)", "function_name": "maxPooling1d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.maxPooling2d(args)", "function_name": "maxPooling2d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.maxPooling3d(args)", "function_name": "maxPooling3d", "args": ["args"], "kwargs": []},
{"code": "tf.layers.gru(args)", "function_name": "gru", "args": ["args"], "kwargs": []},
{"code": "tf.layers.gruCell(args)", "function_name": "gruCell", "args": ["args"], "kwargs": []},
{"code": "tf.layers.lstm(args)", "function_name": "lstm", "args": ["args"], "kwargs": []},
{"code": "tf.layers.lstmCell(args)", "function_name": "lstmCell", "args": ["args"], "kwargs": []},
{"code": "tf.layers.rnn(args)", "function_name": "rnn", "args": ["args"], "kwargs": []},
{"code": "tf.layers.simpleRNN(args)", "function_name": "simpleRNN", "args": ["args"], "kwargs": []},
{"code": "tf.layers.simpleRNNCell(args)", "function_name": "simpleRNNCell", "args": ["args"], "kwargs": []},
{"code": "tf.layers.stackedRNNCells(args)", "function_name": "stackedRNNCells", "args": ["args"], "kwargs": []},
{"code": "tf.layers.bidirectional(args)", "function_name": "bidirectional", "args": ["args"], "kwargs": []},
{"code": "tf.layers.timeDistributed(args)", "function_name": "timeDistributed", "args": ["args"], "kwargs": []},
{"code": "apply(inputs,kwargs?)", "function_name": "apply", "args": ["inputs", "kwargs?"], "kwargs": []},
{"code": "countParams()", "function_name": "countParams", "args": [""], "kwargs": []},
{"code": "build(inputShape)", "function_name": "build", "args": ["inputShape"], "kwargs": []},
{"code": "getWeights(trainableOnly?)", "function_name": "getWeights", "args": ["trainableOnly?"], "kwargs": []},
{"code": "setWeights(weights)", "function_name": "setWeights", "args": ["weights"], "kwargs": []},
{"code": "addWeight(name,shape,dtype?,initializer?,regularizer?,trainable?,constraint?)", "function_name": "addWeight", "args": ["name", "shape", "dtype?", "initializer?", "regularizer?", "trainable?", "constraint?"], "kwargs": []},
{"code": "addLoss(losses)", "function_name": "addLoss", "args": ["losses"], "kwargs": []},
{"code": "computeOutputShape(inputShape)", "function_name": "computeOutputShape", "args": ["inputShape"], "kwargs": []},
{"code": "getConfig()", "function_name": "getConfig", "args": [""], "kwargs": []},
{"code": "dispose()", "function_name": "dispose", "args": [""], "kwargs": []},
{"code": "tf.layers.inputLayer(args)", "function_name": "inputLayer", "args": ["args"], "kwargs": []},
{"code": "tf.layers.zeroPadding2d(args?)", "function_name": "zeroPadding2d", "args": ["args?"], "kwargs": []},
{"code": "tf.layers.alphaDropout(args)", "function_name": "alphaDropout", "args": ["args"], "kwargs": []},
{"code": "tf.layers.gaussianDropout(args)", "function_name": "gaussianDropout", "args": ["args"], "kwargs": []},
{"code": "tf.layers.gaussianNoise(args)", "function_name": "gaussianNoise", "args": ["args"], "kwargs": []},
{"code": "tf.layers.masking(args?)", "function_name": "masking", "args": ["args?"], "kwargs": []},
{"code": "tf.add(a,b)", "function_name": "add", "args": ["a", "b"], "kwargs": []},
{"code": "tf.sub(a,b)", "function_name": "sub", "args": ["a", "b"], "kwargs": []},
{"code": "tf.mul(a,b)", "function_name": "mul", "args": ["a", "b"], "kwargs": []},
{"code": "tf.div(a,b)", "function_name": "div", "args": ["a", "b"], "kwargs": []},
{"code": "tf.addN(tensors)", "function_name": "addN", "args": ["tensors"], "kwargs": []},
{"code": "tf.divNoNan(a,b)", "function_name": "divNoNan", "args": ["a", "b"], "kwargs": []},
{"code": "tf.floorDiv(a,b)", "function_name": "floorDiv", "args": ["a", "b"], "kwargs": []},
{"code": "tf.maximum(a,b)", "function_name": "maximum", "args": ["a", "b"], "kwargs": []},
{"code": "tf.minimum(a,b)", "function_name": "minimum", "args": ["a", "b"], "kwargs": []},
{"code": "tf.mod(a,b)", "function_name": "mod", "args": ["a", "b"], "kwargs": []},
{"code": "tf.pow(base,exp)", "function_name": "pow", "args": ["base", "exp"], "kwargs": []},
{"code": "tf.squaredDifference(a,b)", "function_name": "squaredDifference", "args": ["a", "b"], "kwargs": []},
{"code": "tf.abs(x)", "function_name": "abs", "args": ["x"], "kwargs": []},
{"code": "tf.acos(x)", "function_name": "acos", "args": ["x"], "kwargs": []},
{"code": "tf.acosh(x)", "function_name": "acosh", "args": ["x"], "kwargs": []},
{"code": "tf.asin(x)", "function_name": "asin", "args": ["x"], "kwargs": []},
{"code": "tf.asinh(x)", "function_name": "asinh", "args": ["x"], "kwargs": []},
{"code": "tf.atan(x)", "function_name": "atan", "args": ["x"], "kwargs": []},
{"code": "tf.atan2(a,b)", "function_name": "atan2", "args": ["a", "b"], "kwargs": []},
{"code": "tf.atanh(x)", "function_name": "atanh", "args": ["x"], "kwargs": []},
{"code": "tf.ceil(x)", "function_name": "ceil", "args": ["x"], "kwargs": []},
{"code": "tf.clipByValue(x,clipValueMin,clipValueMax)", "function_name": "clipByValue", "args": ["x", "clipValueMin", "clipValueMax"], "kwargs": []},
{"code": "tf.cos(x)", "function_name": "cos", "args": ["x"], "kwargs": []},
{"code": "tf.cosh(x)", "function_name": "cosh", "args": ["x"], "kwargs": []},
{"code": "tf.elu(x)", "function_name": "elu", "args": ["x"], "kwargs": []},
{"code": "tf.erf(x)", "function_name": "erf", "args": ["x"], "kwargs": []},
{"code": "tf.exp(x)", "function_name": "exp", "args": ["x"], "kwargs": []},
{"code": "tf.expm1(x)", "function_name": "expm1", "args": ["x"], "kwargs": []},
{"code": "tf.floor(x)", "function_name": "floor", "args": ["x"], "kwargs": []},
{"code": "tf.isFinite(x)", "function_name": "isFinite", "args": ["x"], "kwargs": []},
{"code": "tf.isInf(x)", "function_name": "isInf", "args": ["x"], "kwargs": []},
{"code": "tf.isNaN(x)", "function_name": "isNaN", "args": ["x"], "kwargs": []},
{"code": "tf.leakyRelu(x,alpha?)", "function_name": "leakyRelu", "args": ["x", "alpha?"], "kwargs": []},
{"code": "tf.log(x)", "function_name": "log", "args": ["x"], "kwargs": []},
{"code": "tf.log1p(x)", "function_name": "log1p", "args": ["x"], "kwargs": []},
{"code": "tf.logSigmoid(x)", "function_name": "logSigmoid", "args": ["x"], "kwargs": []},
{"code": "tf.neg(x)", "function_name": "neg", "args": ["x"], "kwargs": []},
{"code": "tf.prelu(x,alpha)", "function_name": "prelu", "args": ["x", "alpha"], "kwargs": []},
{"code": "tf.reciprocal(x)", "function_name": "reciprocal", "args": ["x"], "kwargs": []},
{"code": "tf.relu(x)", "function_name": "relu", "args": ["x"], "kwargs": []},
{"code": "tf.relu6(x)", "function_name": "relu6", "args": ["x"], "kwargs": []},
{"code": "tf.round(x)", "function_name": "round", "args": ["x"], "kwargs": []},
{"code": "tf.rsqrt(x)", "function_name": "rsqrt", "args": ["x"], "kwargs": []},
{"code": "tf.selu(x)", "function_name": "selu", "args": ["x"], "kwargs": []},
{"code": "tf.sigmoid(x)", "function_name": "sigmoid", "args": ["x"], "kwargs": []},
{"code": "tf.sign(x)", "function_name": "sign", "args": ["x"], "kwargs": []},
{"code": "tf.sin(x)", "function_name": "sin", "args": ["x"], "kwargs": []},
{"code": "tf.sinh(x)", "function_name": "sinh", "args": ["x"], "kwargs": []},
{"code": "tf.softplus(x)", "function_name": "softplus", "args": ["x"], "kwargs": []},
{"code": "tf.sqrt(x)", "function_name": "sqrt", "args": ["x"], "kwargs": []},
{"code": "tf.square(x)", "function_name": "square", "args": ["x"], "kwargs": []},
{"code": "tf.step(x,alpha?)", "function_name": "step", "args": ["x", "alpha?"], "kwargs": []},
{"code": "tf.tan(x)", "function_name": "tan", "args": ["x"], "kwargs": []},
{"code": "tf.tanh(x)", "function_name": "tanh", "args": ["x"], "kwargs": []},
{"code": "tf.dot(t1,t2)", "function_name": "dot", "args": ["t1", "t2"], "kwargs": []},
{"code": "tf.matMul(a,b,transposeA?,transposeB?)", "function_name": "matMul", "args": ["a", "b", "transposeA?", "transposeB?"], "kwargs": []},
{"code": "tf.norm(x,ord?,axis?,keepDims?)", "function_name": "norm", "args": ["x", "ord?", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.outerProduct(v1,v2)", "function_name": "outerProduct", "args": ["v1", "v2"], "kwargs": []},
{"code": "tf.transpose(x,perm?)", "function_name": "transpose", "args": ["x", "perm?"], "kwargs": []},
{"code": "tf.avgPool(x,filterSize,strides,pad,dimRoundingMode?)", "function_name": "avgPool", "args": ["x", "filterSize", "strides", "pad", "dimRoundingMode?"], "kwargs": []},
{"code": "tf.avgPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)", "function_name": "avgPool3d", "args": ["x", "filterSize", "strides", "pad", "dimRoundingMode?", "dataFormat?", "dilations?"], "kwargs": []},
{"code": "tf.conv1d(x,filter,stride,pad,dataFormat?,dilation?,dimRoundingMode?)", "function_name": "conv1d", "args": ["x", "filter", "stride", "pad", "dataFormat?", "dilation?", "dimRoundingMode?"], "kwargs": []},
{"code": "tf.conv2d(x,filter,strides,pad,dataFormat?,dilations?,dimRoundingMode?)", "function_name": "conv2d", "args": ["x", "filter", "strides", "pad", "dataFormat?", "dilations?", "dimRoundingMode?"], "kwargs": []},
{"code": "tf.conv2dTranspose(x,filter,outputShape,strides,pad,dimRoundingMode?)", "function_name": "conv2dTranspose", "args": ["x", "filter", "outputShape", "strides", "pad", "dimRoundingMode?"], "kwargs": []},
{"code": "tf.conv3d(x,filter,strides,pad,dataFormat?,dilations?)", "function_name": "conv3d", "args": ["x", "filter", "strides", "pad", "dataFormat?", "dilations?"], "kwargs": []},
{"code": "tf.conv3dTranspose(x,filter,outputShape,strides,pad)", "function_name": "conv3dTranspose", "args": ["x", "filter", "outputShape", "strides", "pad"], "kwargs": []},
{"code": "tf.depthwiseConv2d(x,filter,strides,pad,dataFormat?,dilations?,dimRoundingMode?)", "function_name": "depthwiseConv2d", "args": ["x", "filter", "strides", "pad", "dataFormat?", "dilations?", "dimRoundingMode?"], "kwargs": []},
{"code": "tf.maxPool(x,filterSize,strides,pad,dimRoundingMode?)", "function_name": "maxPool", "args": ["x", "filterSize", "strides", "pad", "dimRoundingMode?"], "kwargs": []},
{"code": "tf.maxPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)", "function_name": "maxPool3d", "args": ["x", "filterSize", "strides", "pad", "dimRoundingMode?", "dataFormat?", "dilations?"], "kwargs": []},
{"code": "tf.pool(input,windowShape,poolingType,pad,dilations?,strides?)", "function_name": "pool", "args": ["input", "windowShape", "poolingType", "pad", "dilations?", "strides?"], "kwargs": []},
{"code": "tf.separableConv2d(x,depthwiseFilter,pointwiseFilter,strides,pad,dilation?,dataFormat?)", "function_name": "separableConv2d", "args": ["x", "depthwiseFilter", "pointwiseFilter", "strides", "pad", "dilation?", "dataFormat?"], "kwargs": []},
{"code": "tf.all(x,axis?,keepDims?)", "function_name": "all", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.any(x,axis?,keepDims?)", "function_name": "any", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.argMax(x,axis?)", "function_name": "argMax", "args": ["x", "axis?"], "kwargs": []},
{"code": "tf.argMin(x,axis?)", "function_name": "argMin", "args": ["x", "axis?"], "kwargs": []},
{"code": "tf.logSumExp(x,axis?,keepDims?)", "function_name": "logSumExp", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.max(x,axis?,keepDims?)", "function_name": "max", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.mean(x,axis?,keepDims?)", "function_name": "mean", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.min(x,axis?,keepDims?)", "function_name": "min", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.prod(x,axis?,keepDims?)", "function_name": "prod", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.sum(x,axis?,keepDims?)", "function_name": "sum", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.batchNorm(x,mean,variance,offset?,scale?,varianceEpsilon?)", "function_name": "batchNorm", "args": ["x", "mean", "variance", "offset?", "scale?", "varianceEpsilon?"], "kwargs": []},
{"code": "tf.localResponseNormalization(x,depthRadius?,bias?,alpha?,beta?)", "function_name": "localResponseNormalization", "args": ["x", "depthRadius?", "bias?", "alpha?", "beta?"], "kwargs": []},
{"code": "tf.logSoftmax(logits,axis?)", "function_name": "logSoftmax", "args": ["logits", "axis?"], "kwargs": []},
{"code": "tf.moments(x,axis?,keepDims?)", "function_name": "moments", "args": ["x", "axis?", "keepDims?"], "kwargs": []},
{"code": "tf.softmax(logits,dim?)", "function_name": "softmax", "args": ["logits", "dim?"], "kwargs": []},
{"code": "tf.sparseToDense(sparseIndices,sparseValues,outputShape,defaultValue?)", "function_name": "sparseToDense", "args": ["sparseIndices", "sparseValues", "outputShape", "defaultValue?"], "kwargs": []},
{"code": "tf.image.cropAndResize(image,boxes,boxInd,cropSize,?,extrapolationValue?)", "function_name": "cropAndResize", "args": ["image", "boxes", "boxInd", "cropSize", "?", "extrapolationValue?"], "kwargs": []},
{"code": "tf.image.nonMaxSuppression(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?)", "function_name": "nonMaxSuppression", "args": ["boxes", "scores", "maxOutputSize", "iouThreshold?", "scoreThreshold?"], "kwargs": []},
{"code": "tf.image.nonMaxSuppressionWithScore(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?,softNmsSigma?)", "function_name": "nonMaxSuppressionWithScore", "args": ["boxes", "scores", "maxOutputSize", "iouThreshold?", "scoreThreshold?", "softNmsSigma?"], "kwargs": []},
{"code": "tf.image.resizeBilinear(images,size,alignCorners?)", "function_name": "resizeBilinear", "args": ["images", "size", "alignCorners?"], "kwargs": []},
{"code": "tf.image.resizeNearestNeighbor(images,size,alignCorners?)", "function_name": "resizeNearestNeighbor", "args": ["images", "size", "alignCorners?"], "kwargs": []},
{"code": "tf.basicLSTMCell(forgetBias,lstmKernel,lstmBias,data,c,h)", "function_name": "basicLSTMCell", "args": ["forgetBias", "lstmKernel", "lstmBias", "data", "c", "h"], "kwargs": []},
{"code": "tf.multiRNNCell(lstmCells,data,c,h)", "function_name": "multiRNNCell", "args": ["lstmCells", "data", "c", "h"], "kwargs": []},
{"code": "tf.equal(a,b)", "function_name": "equal", "args": ["a", "b"], "kwargs": []},
{"code": "tf.greater(a,b)", "function_name": "greater", "args": ["a", "b"], "kwargs": []},
{"code": "tf.greaterEqual(a,b)", "function_name": "greaterEqual", "args": ["a", "b"], "kwargs": []},
{"code": "tf.less(a,b)", "function_name": "less", "args": ["a", "b"], "kwargs": []},
{"code": "tf.lessEqual(a,b)", "function_name": "lessEqual", "args": ["a", "b"], "kwargs": []},
{"code": "tf.logicalAnd(a,b)", "function_name": "logicalAnd", "args": ["a", "b"], "kwargs": []},
{"code": "tf.logicalNot(x)", "function_name": "logicalNot", "args": ["x"], "kwargs": []},
{"code": "tf.logicalOr(a,b)", "function_name": "logicalOr", "args": ["a", "b"], "kwargs": []},
{"code": "tf.logicalXor(a,b)", "function_name": "logicalXor", "args": ["a", "b"], "kwargs": []},
{"code": "tf.notEqual(a,b)", "function_name": "notEqual", "args": ["a", "b"], "kwargs": []},
{"code": "tf.where(condition,a,b)", "function_name": "where", "args": ["condition", "a", "b"], "kwargs": []},
{"code": "tf.whereAsync(condition)", "function_name": "whereAsync", "args": ["condition"], "kwargs": []},
{"code": "tf.cumsum(x,axis?,exclusive?,reverse?)", "function_name": "cumsum", "args": ["x", "axis?", "exclusive?", "reverse?"], "kwargs": []},
{"code": "tf.unsortedSegmentSum(x,segmentIds,numSegments)", "function_name": "unsortedSegmentSum", "args": ["x", "segmentIds", "numSegments"], "kwargs": []},
{"code": "tf.movingAverage(v,x,decay,step?,zeroDebias?)", "function_name": "movingAverage", "args": ["v", "x", "decay", "step?", "zeroDebias?"], "kwargs": []},
{"code": "tf.gatherND(x,indices)", "function_name": "gatherND", "args": ["x", "indices"], "kwargs": []},
{"code": "tf.scatterND(indices,updates,shape)", "function_name": "scatterND", "args": ["indices", "updates", "shape"], "kwargs": []},
{"code": "tf.stridedSlice(x,begin,end,strides?,beginMask?,endMask?,ellipsisMask?,newAxisMask?,shrinkAxisMask?)", "function_name": "stridedSlice", "args": ["x", "begin", "end", "strides?", "beginMask?", "endMask?", "ellipsisMask?", "newAxisMask?", "shrinkAxisMask?"], "kwargs": []},
{"code": "tf.confusionMatrix(labels,predictions,numClasses)", "function_name": "confusionMatrix", "args": ["labels", "predictions", "numClasses"], "kwargs": []},
{"code": "tf.inTopKAsync(predictions,targets,k?)", "function_name": "inTopKAsync", "args": ["predictions", "targets", "k?"], "kwargs": []},
{"code": "tf.topk(x,k?,sorted?)", "function_name": "topk", "args": ["x", "k?", "sorted?"], "kwargs": []},
{"code": "tf.spectral.fft(input)", "function_name": "fft", "args": ["input"], "kwargs": []},
{"code": "tf.spectral.ifft(input)", "function_name": "ifft", "args": ["input"], "kwargs": []},
{"code": "tf.spectral.irfft(input)", "function_name": "irfft", "args": ["input"], "kwargs": []},
{"code": "tf.spectral.rfft(input,fftLength?)", "function_name": "rfft", "args": ["input", "fftLength?"], "kwargs": []},
{"code": "tf.dropout(x,rate,noiseShape?,seed?)", "function_name": "dropout", "args": ["x", "rate", "noiseShape?", "seed?"], "kwargs": []},
{"code": "tf.signal.frame(signal,frameLength,frameStep,padEnd?,padValue?)", "function_name": "frame", "args": ["signal", "frameLength", "frameStep", "padEnd?", "padValue?"], "kwargs": []},
{"code": "tf.signal.hammingWindow(windowLength)", "function_name": "hammingWindow", "args": ["windowLength"], "kwargs": []},
{"code": "tf.signal.hannWindow(windowLength)", "function_name": "hannWindow", "args": ["windowLength"], "kwargs": []},
{"code": "tf.signal.stft(signal,frameLength,frameStep,fftLength?,windowFn?)", "function_name": "stft", "args": ["signal", "frameLength", "frameStep", "fftLength?", "windowFn?"], "kwargs": []},
{"code": "tf.linalg.bandPart(a,numLower,numUpper)", "function_name": "bandPart", "args": ["a", "numLower", "numUpper"], "kwargs": []},
{"code": "tf.linalg.gramSchmidt(xs)", "function_name": "gramSchmidt", "args": ["xs"], "kwargs": []},
{"code": "tf.linalg.qr(x,fullMatrices?)", "function_name": "qr", "args": ["x", "fullMatrices?"], "kwargs": []},
{"code": "tf.grad(f)", "function_name": "grad", "args": ["f"], "kwargs": []},
{"code": "tf.grads(f)", "function_name": "grads", "args": ["f"], "kwargs": []},
{"code": "tf.customGrad(f)", "function_name": "customGrad", "args": ["f"], "kwargs": []},
{"code": "tf.valueAndGrad(f)", "function_name": "valueAndGrad", "args": ["f"], "kwargs": []},
{"code": "tf.valueAndGrads(f)", "function_name": "valueAndGrads", "args": ["f"], "kwargs": []},
{"code": "tf.variableGrads(f,varList?)", "function_name": "variableGrads", "args": ["f", "varList?"], "kwargs": []},
{"code": "tf.train.sgd(learningRate)", "function_name": "sgd", "args": ["learningRate"], "kwargs": []},
{"code": "tf.train.momentum(learningRate,momentum,useNesterov?)", "function_name": "momentum", "args": ["learningRate", "momentum", "useNesterov?"], "kwargs": []},
{"code": "tf.train.adagrad(learningRate,initialAccumulatorValue?)", "function_name": "adagrad", "args": ["learningRate", "initialAccumulatorValue?"], "kwargs": []},
{"code": "tf.train.adadelta(learningRate?,rho?,epsilon?)", "function_name": "adadelta", "args": ["learningRate?", "rho?", "epsilon?"], "kwargs": []},
{"code": "tf.train.adam(learningRate?,beta1?,beta2?,epsilon?)", "function_name": "adam", "args": ["learningRate?", "beta1?", "beta2?", "epsilon?"], "kwargs": []},
{"code": "tf.train.adamax(learningRate?,beta1?,beta2?,epsilon?,decay?)", "function_name": "adamax", "args": ["learningRate?", "beta1?", "beta2?", "epsilon?", "decay?"], "kwargs": []},
{"code": "tf.train.rmsprop(learningRate,decay?,momentum?,epsilon?,centered?)", "function_name": "rmsprop", "args": ["learningRate", "decay?", "momentum?", "epsilon?", "centered?"], "kwargs": []},
{"code": "tf.losses.absoluteDifference(labels,predictions,weights?,reduction?)", "function_name": "absoluteDifference", "args": ["labels", "predictions", "weights?", "reduction?"], "kwargs": []},
{"code": "tf.losses.computeWeightedLoss(losses,weights?,reduction?)", "function_name": "computeWeightedLoss", "args": ["losses", "weights?", "reduction?"], "kwargs": []},
{"code": "tf.losses.cosineDistance(labels,predictions,axis,weights?,reduction?)", "function_name": "cosineDistance", "args": ["labels", "predictions", "axis", "weights?", "reduction?"], "kwargs": []},
{"code": "tf.losses.hingeLoss(labels,predictions,weights?,reduction?)", "function_name": "hingeLoss", "args": ["labels", "predictions", "weights?", "reduction?"], "kwargs": []},
{"code": "tf.losses.huberLoss(labels,predictions,weights?,delta?,reduction?)", "function_name": "huberLoss", "args": ["labels", "predictions", "weights?", "delta?", "reduction?"], "kwargs": []},
{"code": "tf.losses.logLoss(labels,predictions,weights?,epsilon?,reduction?)", "function_name": "logLoss", "args": ["labels", "predictions", "weights?", "epsilon?", "reduction?"], "kwargs": []},
{"code": "tf.losses.meanSquaredError(labels,predictions,weights?,reduction?)", "function_name": "meanSquaredError", "args": ["labels", "predictions", "weights?", "reduction?"], "kwargs": []},
{"code": "tf.losses.sigmoidCrossEntropy(multiClassLabels,logits,weights?,labelSmoothing?,reduction?)", "function_name": "sigmoidCrossEntropy", "args": ["multiClassLabels", "logits", "weights?", "labelSmoothing?", "reduction?"], "kwargs": []},
{"code": "tf.losses.softmaxCrossEntropy(onehotLabels,logits,weights?,labelSmoothing?,reduction?)", "function_name": "softmaxCrossEntropy", "args": ["onehotLabels", "logits", "weights?", "labelSmoothing?", "reduction?"], "kwargs": []},
{"code": "minimize(f,returnCost?,varList?)", "function_name": "minimize", "args": ["f", "returnCost?", "varList?"], "kwargs": []},
{"code": "tf.tidy(nameOrFn,fn?)", "function_name": "tidy", "args": ["nameOrFn", "fn?"], "kwargs": []},
{"code": "tf.dispose(container)", "function_name": "dispose", "args": ["container"], "kwargs": []},
{"code": "tf.keep(result)", "function_name": "keep", "args": ["result"], "kwargs": []},
{"code": "tf.memory()", "function_name": "memory", "args": [""], "kwargs": []},
{"code": "tf.time(f)", "function_name": "time", "args": ["f"], "kwargs": []},
{"code": "tf.nextFrame()", "function_name": "nextFrame", "args": [""], "kwargs": []},
{"code": "tf.profile(f)", "function_name": "profile", "args": ["f"], "kwargs": []},
{"code": "tf.disposeVariables()", "function_name": "disposeVariables", "args": [""], "kwargs": []},
{"code": "tf.enableDebugMode()", "function_name": "enableDebugMode", "args": [""], "kwargs": []},
{"code": "tf.enableProdMode()", "function_name": "enableProdMode", "args": [""], "kwargs": []},
{"code": "tf.engine()", "function_name": "engine", "args": [""], "kwargs": []},
{"code": "tf.env()", "function_name": "env", "args": [""], "kwargs": []},
{"code": "tf.webgl.forceHalfFloat()", "function_name": "forceHalfFloat", "args": [""], "kwargs": []},
{"code": "tf.constraints.maxNorm(args)", "function_name": "maxNorm", "args": ["args"], "kwargs": []},
{"code": "tf.constraints.minMaxNorm(config)", "function_name": "minMaxNorm", "args": ["config"], "kwargs": []},
{"code": "tf.constraints.nonNeg()", "function_name": "nonNeg", "args": [""], "kwargs": []},
{"code": "tf.constraints.unitNorm(args)", "function_name": "unitNorm", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.constant(args)", "function_name": "constant", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.glorotNormal(args)", "function_name": "glorotNormal", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.glorotUniform(args)", "function_name": "glorotUniform", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.heNormal(args)", "function_name": "heNormal", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.heUniform(args)", "function_name": "heUniform", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.identity(args)", "function_name": "identity", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.leCunNormal(args)", "function_name": "leCunNormal", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.leCunUniform(args)", "function_name": "leCunUniform", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.ones()", "function_name": "ones", "args": [""], "kwargs": []},
{"code": "tf.initializers.orthogonal(args)", "function_name": "orthogonal", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.randomNormal(args)", "function_name": "randomNormal", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.randomUniform(args)", "function_name": "randomUniform", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.truncatedNormal(args)", "function_name": "truncatedNormal", "args": ["args"], "kwargs": []},
{"code": "tf.initializers.varianceScaling(config)", "function_name": "varianceScaling", "args": ["config"], "kwargs": []},
{"code": "tf.initializers.zeros()", "function_name": "zeros", "args": [""], "kwargs": []},
{"code": "tf.regularizers.l1(config?)", "function_name": "l1", "args": ["config?"], "kwargs": []},
{"code": "tf.regularizers.l1l2(config?)", "function_name": "l1l2", "args": ["config?"], "kwargs": []},
{"code": "tf.regularizers.l2(config?)", "function_name": "l2", "args": ["config?"], "kwargs": []},
{"code": "tf.data.array(items)", "function_name": "array", "args": ["items"], "kwargs": []},
{"code": "tf.data.csv(source,csvConfig?)", "function_name": "csv", "args": ["source", "csvConfig?"], "kwargs": []},
{"code": "tf.data.generator(generator)", "function_name": "generator", "args": ["generator"], "kwargs": []},
{"code": "tf.data.microphone(microphoneConfig?)", "function_name": "microphone", "args": ["microphoneConfig?"], "kwargs": []},
{"code": "tf.data.webcam(webcamVideoElement?,webcamConfig?)", "function_name": "webcam", "args": ["webcamVideoElement?", "webcamConfig?"], "kwargs": []},
{"code": "tf.data.zip(datasets)", "function_name": "zip", "args": ["datasets"], "kwargs": []},
{"code": "columnNames()", "function_name": "columnNames", "args": [""], "kwargs": []},
{"code": "batch(batchSize,smallLastBatch?)", "function_name": "batch", "args": ["batchSize", "smallLastBatch?"], "kwargs": []},
{"code": "concatenate(dataset)", "function_name": "concatenate", "args": ["dataset"], "kwargs": []},
{"code": "filter(predicate)", "function_name": "filter", "args": ["predicate"], "kwargs": []},
{"code": "forEachAsync(f)", "function_name": "forEachAsync", "args": ["f"], "kwargs": []},
{"code": "map(transform)", "function_name": "map", "args": ["transform"], "kwargs": []},
{"code": "mapAsync(transform)", "function_name": "mapAsync", "args": ["transform"], "kwargs": []},
{"code": "prefetch(bufferSize)", "function_name": "prefetch", "args": ["bufferSize"], "kwargs": []},
{"code": "repeat(count?)", "function_name": "repeat", "args": ["count?"], "kwargs": []},
{"code": "skip(count)", "function_name": "skip", "args": ["count"], "kwargs": []},
{"code": "shuffle(bufferSize,seed?,reshuffleEachIteration?)", "function_name": "shuffle", "args": ["bufferSize", "seed?", "reshuffleEachIteration?"], "kwargs": []},
{"code": "take(count)", "function_name": "take", "args": ["count"], "kwargs": []},
{"code": "toArray()", "function_name": "toArray", "args": [""], "kwargs": []},
{"code": "tf.util.assert(expr,msg)", "function_name": "assert", "args": ["expr", "msg"], "kwargs": []},
{"code": "tf.util.createShuffledIndices(n)", "function_name": "createShuffledIndices", "args": ["n"], "kwargs": []},
{"code": "tf.decodeString(bytes,encoding?)", "function_name": "decodeString", "args": ["bytes", "encoding?"], "kwargs": []},
{"code": "tf.encodeString(s,encoding?)", "function_name": "encodeString", "args": ["s", "encoding?"], "kwargs": []},
{"code": "tf.fetch(path,requestInits?)", "function_name": "fetch", "args": ["path", "requestInits?"], "kwargs": []},
{"code": "tf.util.flatten(arr,result?,skipTypedArray?)", "function_name": "flatten", "args": ["arr", "result?", "skipTypedArray?"], "kwargs": []},
{"code": "tf.util.now()", "function_name": "now", "args": [""], "kwargs": []},
{"code": "tf.util.shuffle(array)", "function_name": "shuffle", "args": ["array"], "kwargs": []},
{"code": "tf.util.sizeFromShape(shape)", "function_name": "sizeFromShape", "args": ["shape"], "kwargs": []},
{"code": "tf.backend()", "function_name": "backend", "args": [""], "kwargs": []},
{"code": "tf.getBackend()", "function_name": "getBackend", "args": [""], "kwargs": []},
{"code": "tf.ready()", "function_name": "ready", "args": [""], "kwargs": []},
{"code": "tf.registerBackend(name,factory,priority?)", "function_name": "registerBackend", "args": ["name", "factory", "priority?"], "kwargs": []},
{"code": "tf.removeBackend(name)", "function_name": "removeBackend", "args": ["name"], "kwargs": []},
{"code": "tf.setBackend(backendName)", "function_name": "setBackend", "args": ["backendName"], "kwargs": []},
{"code": "tf.browser.fromPixels(pixels,numChannels?)", "function_name": "fromPixels", "args": ["pixels", "numChannels?"], "kwargs": []},
{"code": "tf.browser.toPixels(img,canvas?)", "function_name": "toPixels", "args": ["img", "canvas?"], "kwargs": []},
{"code": "tf.metrics.binaryAccuracy(yTrue,yPred)", "function_name": "binaryAccuracy", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.binaryCrossentropy(yTrue,yPred)", "function_name": "binaryCrossentropy", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.categoricalAccuracy(yTrue,yPred)", "function_name": "categoricalAccuracy", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.categoricalCrossentropy(yTrue,yPred)", "function_name": "categoricalCrossentropy", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.cosineProximity(yTrue,yPred)", "function_name": "cosineProximity", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.meanAbsoluteError(yTrue,yPred)", "function_name": "meanAbsoluteError", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.meanAbsolutePercentageError(yTrue,yPred)", "function_name": "meanAbsolutePercentageError", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.meanSquaredError(yTrue,yPred)", "function_name": "meanSquaredError", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.precision(yTrue,yPred)", "function_name": "precision", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.recall(yTrue,yPred)", "function_name": "recall", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.metrics.sparseCategoricalAccuracy(yTrue,yPred)", "function_name": "sparseCategoricalAccuracy", "args": ["yTrue", "yPred"], "kwargs": []},
{"code": "tf.callbacks.earlyStopping(args?)", "function_name": "earlyStopping", "args": ["args?"], "kwargs": []}
]