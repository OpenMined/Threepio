[
{"code": "tf.keras.constraints.MaxNorm(max_value=2,axis=0)", "function_name": "MaxNorm", "args": [], "kwargs": [["max_value", "2"], ["axis", "0"]]},
{"code": "tf.keras.constraints.MinMaxNorm(min_value=0.0,max_value=1.0,rate=1.0,axis=0)", "function_name": "MinMaxNorm", "args": [], "kwargs": [["min_value", "0.0"], ["max_value", "1.0"], ["rate", "1.0"], ["axis", "0"]]},
{"code": "tf.keras.constraints.NonNeg()", "function_name": "NonNeg", "args": [""], "kwargs": []},
{"code": "tf.keras.constraints.UnitNorm(axis=0)", "function_name": "UnitNorm", "args": [], "kwargs": [["axis", "0"]]},
{"code": "tf.keras.constraints.RadialConstraint()", "function_name": "RadialConstraint", "args": [""], "kwargs": []},
{"code": "tf.keras.Model()", "function_name": "Model", "args": [""], "kwargs": []},
{"code": "Model.summary(line_length=None,positions=None,print_fn=None)", "function_name": "summary", "args": [], "kwargs": [["line_length", "None"], ["positions", "None"], ["print_fn", "None"]]},
{"code": "Model.get_layer(name=None,index=None)", "function_name": "get_layer", "args": [], "kwargs": [["name", "None"], ["index", "None"]]},
{"code": "tf.keras.regularizers.l1(l1=0.01,**kwargs)", "function_name": "l1", "args": ["**kwargs"], "kwargs": [["l1", "0.01"]]},
{"code": "tf.keras.regularizers.l2(l2=0.01,**kwargs)", "function_name": "l2", "args": ["**kwargs"], "kwargs": [["l2", "0.01"]]},
{"code": "tf.keras.regularizers.l1_l2(l1=0.01,l2=0.01)", "function_name": "l1_l2", "args": [], "kwargs": [["l1", "0.01"], ["l2", "0.01"]]},
{"code": "tf.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0)", "function_name": "relu", "args": ["x"], "kwargs": [["alpha", "0.0"], ["max_value", "None"], ["threshold", "0"]]},
{"code": "tf.keras.activations.sigmoid(x)", "function_name": "sigmoid", "args": ["x"], "kwargs": []},
{"code": "tf.keras.activations.softplus(x)", "function_name": "softplus", "args": ["x"], "kwargs": []},
{"code": "tf.keras.activations.softsign(x)", "function_name": "softsign", "args": ["x"], "kwargs": []},
{"code": "tf.keras.activations.tanh(x)", "function_name": "tanh", "args": ["x"], "kwargs": []},
{"code": "tf.keras.activations.selu(x)", "function_name": "selu", "args": ["x"], "kwargs": []},
{"code": "tf.keras.activations.elu(x,alpha=1.0)", "function_name": "elu", "args": ["x"], "kwargs": [["alpha", "1.0"]]},
{"code": "tf.keras.activations.exponential(x)", "function_name": "exponential", "args": ["x"], "kwargs": []},
{"code": "Model.save(filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None,)", "function_name": "save", "args": ["filepath", ""], "kwargs": [["overwrite", "True"], ["include_optimizer", "True"], ["save_format", "None"], ["signatures", "None"], ["options", "None"]]},
{"code": "tf.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None,)", "function_name": "save_model", "args": ["model", "filepath", ""], "kwargs": [["overwrite", "True"], ["include_optimizer", "True"], ["save_format", "None"], ["signatures", "None"], ["options", "None"]]},
{"code": "tf.keras.models.load_model(filepath,custom_objects=None,compile=True,options=None)", "function_name": "load_model", "args": ["filepath"], "kwargs": [["custom_objects", "None"], ["compile", "True"], ["options", "None"]]},
{"code": "Model.get_weights()", "function_name": "get_weights", "args": [""], "kwargs": []},
{"code": "Model.set_weights(weights)", "function_name": "set_weights", "args": ["weights"], "kwargs": []},
{"code": "Model.load_weights(filepath,by_name=False,skip_mismatch=False,options=None)", "function_name": "load_weights", "args": ["filepath"], "kwargs": [["by_name", "False"], ["skip_mismatch", "False"], ["options", "None"]]},
{"code": "Model.get_config()", "function_name": "get_config", "args": [""], "kwargs": []},
{"code": "tf.keras.initializers.RandomNormal(mean=0.0,stddev=0.05,seed=None)", "function_name": "RandomNormal", "args": [], "kwargs": [["mean", "0.0"], ["stddev", "0.05"], ["seed", "None"]]},
{"code": "Model.from_config(config,custom_objects=None)", "function_name": "from_config", "args": ["config"], "kwargs": [["custom_objects", "None"]]},
{"code": "tf.keras.models.model_from_config(config,custom_objects=None)", "function_name": "model_from_config", "args": ["config"], "kwargs": [["custom_objects", "None"]]},
{"code": "Model.to_json(**kwargs)", "function_name": "to_json", "args": ["**kwargs"], "kwargs": []},
{"code": "tf.keras.models.model_from_json(json_string,custom_objects=None)", "function_name": "model_from_json", "args": ["json_string"], "kwargs": [["custom_objects", "None"]]},
{"code": "tf.keras.models.clone_model(model,input_tensors=None,clone_function=None)", "function_name": "clone_model", "args": ["model"], "kwargs": [["input_tensors", "None"], ["clone_function", "None"]]},
{"code": "tf.keras.initializers.TruncatedNormal(mean=0.0,stddev=0.05,seed=None)", "function_name": "TruncatedNormal", "args": [], "kwargs": [["mean", "0.0"], ["stddev", "0.05"], ["seed", "None"]]},
{"code": "tf.keras.initializers.Zeros()", "function_name": "Zeros", "args": [""], "kwargs": []},
{"code": "tf.keras.initializers.Ones()", "function_name": "Ones", "args": [""], "kwargs": []},
{"code": "tf.keras.initializers.GlorotNormal(seed=None)", "function_name": "GlorotNormal", "args": [], "kwargs": [["seed", "None"]]},
{"code": "tf.keras.initializers.GlorotUniform(seed=None)", "function_name": "GlorotUniform", "args": [], "kwargs": [["seed", "None"]]},
{"code": "tf.keras.initializers.Identity(gain=1.0)", "function_name": "Identity", "args": [], "kwargs": [["gain", "1.0"]]},
{"code": "tf.keras.initializers.Orthogonal(gain=1.0,seed=None)", "function_name": "Orthogonal", "args": [], "kwargs": [["gain", "1.0"], ["seed", "None"]]},
{"code": "tf.keras.initializers.Constant(value=0)", "function_name": "Constant", "args": [], "kwargs": [["value", "0"]]},
{"code": "tf.keras.utils.custom_object_scope(*args)", "function_name": "custom_object_scope", "args": ["*args"], "kwargs": []},
{"code": "tf.keras.utils.get_custom_objects()", "function_name": "get_custom_objects", "args": [""], "kwargs": []},
{"code": "tf.keras.utils.serialize_keras_object(instance)", "function_name": "serialize_keras_object", "args": ["instance"], "kwargs": []},
{"code": "tf.keras.utils.Sequence()", "function_name": "Sequence", "args": [""], "kwargs": []},
{"code": "tf.keras.backend.clear_session()", "function_name": "clear_session", "args": [""], "kwargs": []},
{"code": "tf.keras.backend.floatx()", "function_name": "floatx", "args": [""], "kwargs": []},
{"code": "tf.keras.backend.set_floatx(value)", "function_name": "set_floatx", "args": ["value"], "kwargs": []},
{"code": "tf.keras.backend.image_data_format()", "function_name": "image_data_format", "args": [""], "kwargs": []},
{"code": "tf.keras.backend.set_image_data_format(data_format)", "function_name": "set_image_data_format", "args": ["data_format"], "kwargs": []},
{"code": "tf.keras.backend.epsilon()", "function_name": "epsilon", "args": [""], "kwargs": []},
{"code": "tf.keras.backend.set_epsilon(value)", "function_name": "set_epsilon", "args": ["value"], "kwargs": []},
{"code": "tf.keras.backend.is_keras_tensor(x)", "function_name": "is_keras_tensor", "args": ["x"], "kwargs": []},
{"code": "tf.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False,)", "function_name": "rnn", "args": ["step_function", "inputs", "initial_states", ""], "kwargs": [["go_backwards", "False"], ["mask", "None"], ["constants", "None"], ["unroll", "False"], ["input_length", "None"], ["time_major", "False"], ["zero_output_for_mask", "False"]]},
{"code": "tf.keras.layers.Layer(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)", "function_name": "Layer", "args": ["**kwargs"], "kwargs": [["trainable", "True"], ["name", "None"], ["dtype", "None"], ["dynamic", "False"]]},
{"code": "Layer.get_weights()", "function_name": "get_weights", "args": [""], "kwargs": []},
{"code": "Layer.set_weights(weights)", "function_name": "set_weights", "args": ["weights"], "kwargs": []},
{"code": "Model.get_config()", "function_name": "get_config", "args": [""], "kwargs": []},
{"code": "Layer.add_loss(losses,**kwargs)", "function_name": "add_loss", "args": ["losses", "**kwargs"], "kwargs": []},
{"code": "Layer.add_metric(value,name=None,**kwargs)", "function_name": "add_metric", "args": ["value", "**kwargs"], "kwargs": [["name", "None"]]},
{"code": "Model.fit(x=None,y=None,batch_size=None,epochs=1,verbose=1,callbacks=None,validation_split=0.0,validation_data=None,shuffle=True,class_weight=None,sample_weight=None,initial_epoch=0,steps_per_epoch=None,validation_steps=None,validation_batch_size=None,validation_freq=1,max_queue_size=10,workers=1,use_multiprocessing=False,)", "function_name": "fit", "args": [""], "kwargs": [["x", "None"], ["y", "None"], ["batch_size", "None"], ["epochs", "1"], ["verbose", "1"], ["callbacks", "None"], ["validation_split", "0.0"], ["validation_data", "None"], ["shuffle", "True"], ["class_weight", "None"], ["sample_weight", "None"], ["initial_epoch", "0"], ["steps_per_epoch", "None"], ["validation_steps", "None"], ["validation_batch_size", "None"], ["validation_freq", "1"], ["max_queue_size", "10"], ["workers", "1"], ["use_multiprocessing", "False"]]},
{"code": "Model.evaluate(x=None,y=None,batch_size=None,verbose=1,sample_weight=None,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,return_dict=False,)", "function_name": "evaluate", "args": [""], "kwargs": [["x", "None"], ["y", "None"], ["batch_size", "None"], ["verbose", "1"], ["sample_weight", "None"], ["steps", "None"], ["callbacks", "None"], ["max_queue_size", "10"], ["workers", "1"], ["use_multiprocessing", "False"], ["return_dict", "False"]]},
{"code": "Model.predict(x,batch_size=None,verbose=0,steps=None,callbacks=None,max_queue_size=10,workers=1,use_multiprocessing=False,)", "function_name": "predict", "args": ["x", ""], "kwargs": [["batch_size", "None"], ["verbose", "0"], ["steps", "None"], ["callbacks", "None"], ["max_queue_size", "10"], ["workers", "1"], ["use_multiprocessing", "False"]]},
{"code": "Model.train_on_batch(x,y=None,sample_weight=None,class_weight=None,reset_metrics=True,return_dict=False,)", "function_name": "train_on_batch", "args": ["x", ""], "kwargs": [["y", "None"], ["sample_weight", "None"], ["class_weight", "None"], ["reset_metrics", "True"], ["return_dict", "False"]]},
{"code": "Model.test_on_batch(x,y=None,sample_weight=None,reset_metrics=True,return_dict=False)", "function_name": "test_on_batch", "args": ["x"], "kwargs": [["y", "None"], ["sample_weight", "None"], ["reset_metrics", "True"], ["return_dict", "False"]]},
{"code": "Model.predict_on_batch(x)", "function_name": "predict_on_batch", "args": ["x"], "kwargs": []},
{"code": "tf.keras.datasets.fashion_mnist.load_data()", "function_name": "load_data", "args": [""], "kwargs": []},
{"code": "tf.keras.datasets.cifar10.load_data()", "function_name": "load_data", "args": [""], "kwargs": []},
{"code": "tf.keras.losses.hinge(y_true,y_pred)", "function_name": "hinge", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.squared_hinge(y_true,y_pred)", "function_name": "squared_hinge", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.categorical_hinge(y_true,y_pred)", "function_name": "categorical_hinge", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0)", "function_name": "binary_crossentropy", "args": ["y_true", "y_pred"], "kwargs": [["from_logits", "False"], ["label_smoothing", "0"]]},
{"code": "tf.keras.losses.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0)", "function_name": "categorical_crossentropy", "args": ["y_true", "y_pred"], "kwargs": [["from_logits", "False"], ["label_smoothing", "0"]]},
{"code": "tf.keras.losses.poisson(y_true,y_pred)", "function_name": "poisson", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.kl_divergence(y_true,y_pred)", "function_name": "kl_divergence", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.mean_squared_error(y_true,y_pred)", "function_name": "mean_squared_error", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.mean_absolute_error(y_true,y_pred)", "function_name": "mean_absolute_error", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.mean_absolute_percentage_error(y_true,y_pred)", "function_name": "mean_absolute_percentage_error", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.mean_squared_logarithmic_error(y_true,y_pred)", "function_name": "mean_squared_logarithmic_error", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.losses.huber(y_true,y_pred,delta=1.0)", "function_name": "huber", "args": ["y_true", "y_pred"], "kwargs": [["delta", "1.0"]]},
{"code": "tf.keras.losses.log_cosh(y_true,y_pred)", "function_name": "log_cosh", "args": ["y_true", "y_pred"], "kwargs": []},
{"code": "tf.keras.metrics.MeanIoU(num_classes,name=None,dtype=None)", "function_name": "MeanIoU", "args": ["num_classes"], "kwargs": [["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.Precision(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)", "function_name": "Precision", "args": [], "kwargs": [["thresholds", "None"], ["top_k", "None"], ["class_id", "None"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.Recall(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)", "function_name": "Recall", "args": [], "kwargs": [["thresholds", "None"], ["top_k", "None"], ["class_id", "None"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.TruePositives(thresholds=None,name=None,dtype=None)", "function_name": "TruePositives", "args": [], "kwargs": [["thresholds", "None"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.TrueNegatives(thresholds=None,name=None,dtype=None)", "function_name": "TrueNegatives", "args": [], "kwargs": [["thresholds", "None"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.FalsePositives(thresholds=None,name=None,dtype=None)", "function_name": "FalsePositives", "args": [], "kwargs": [["thresholds", "None"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.FalseNegatives(thresholds=None,name=None,dtype=None)", "function_name": "FalseNegatives", "args": [], "kwargs": [["thresholds", "None"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.PrecisionAtRecall(recall,num_thresholds=200,name=None,dtype=None)", "function_name": "PrecisionAtRecall", "args": ["recall"], "kwargs": [["num_thresholds", "200"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.SensitivityAtSpecificity(specificity,num_thresholds=200,name=None,dtype=None)", "function_name": "SensitivityAtSpecificity", "args": ["specificity"], "kwargs": [["num_thresholds", "200"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.metrics.SpecificityAtSensitivity(sensitivity,num_thresholds=200,name=None,dtype=None)", "function_name": "SpecificityAtSensitivity", "args": ["sensitivity"], "kwargs": [["num_thresholds", "200"], ["name", "None"], ["dtype", "None"]]},
{"code": "tf.keras.preprocessing.timeseries_dataset_from_array(data,targets,sequence_length,sequence_stride=1,sampling_rate=1,batch_size=128,shuffle=False,seed=None,start_index=None,end_index=None,)", "function_name": "timeseries_dataset_from_array", "args": ["data", "targets", "sequence_length", ""], "kwargs": [["sequence_stride", "1"], ["sampling_rate", "1"], ["batch_size", "128"], ["shuffle", "False"], ["seed", "None"], ["start_index", "None"], ["end_index", "None"]]},
{"code": "tf.keras.preprocessing.sequence.TimeseriesGenerator(data,targets,length,sampling_rate=1,stride=1,start_index=0,end_index=None,shuffle=False,reverse=False,batch_size=128,)", "function_name": "TimeseriesGenerator", "args": ["data", "targets", "length", ""], "kwargs": [["sampling_rate", "1"], ["stride", "1"], ["start_index", "0"], ["end_index", "None"], ["shuffle", "False"], ["reverse", "False"], ["batch_size", "128"]]},
{"code": "tf.keras.preprocessing.image.img_to_array(img,data_format=None,dtype=None)", "function_name": "img_to_array", "args": ["img"], "kwargs": [["data_format", "None"], ["dtype", "None"]]},
{"code": "tf.keras.callbacks.TerminateOnNaN()", "function_name": "TerminateOnNaN", "args": [""], "kwargs": []},
{"code": "tf.keras.callbacks.LambdaCallback(on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)", "function_name": "LambdaCallback", "args": ["**kwargs"], "kwargs": [["on_epoch_begin", "None"], ["on_epoch_end", "None"], ["on_batch_begin", "None"], ["on_batch_end", "None"], ["on_train_begin", "None"], ["on_train_end", "None"]]},
{"code": "tf.keras.callbacks.LearningRateScheduler(schedule,verbose=0)", "function_name": "LearningRateScheduler", "args": ["schedule"], "kwargs": [["verbose", "0"]]},
{"code": "tf.keras.callbacks.Callback()", "function_name": "Callback", "args": [""], "kwargs": []},
{"code": "tf.keras.Sequential(layers=None,name=None)", "function_name": "Sequential", "args": [], "kwargs": [["layers", "None"], ["name", "None"]]},
{"code": "Sequential.add(layer)", "function_name": "add", "args": ["layer"], "kwargs": []},
{"code": "Sequential.pop()", "function_name": "pop", "args": [""], "kwargs": []}
]