[
{"code": "torch.utils.model_zoo.load_url(url,model_dir=None,map_location=None,progress=True,check_hash=False)\u00b6", "function_name": "load_url", "args": ["url"], "kwargs": [["model_dir", "None"], ["map_location", "None"], ["progress", "True"], ["check_hash", "False"]]},
{"code": "torch.utils.dlpack.from_dlpack(dlpack)\u2192Tensor\u00b6", "function_name": "from_dlpack", "args": ["dlpack"], "kwargs": []},
{"code": "torch.utils.dlpack.to_dlpack(tensor)\u2192PyCapsule\u00b6", "function_name": "to_dlpack", "args": ["tensor"], "kwargs": []},
{"code": "torch.utils.cpp_extension.CppExtension(name,sources,*args,**kwargs)\u00b6", "function_name": "CppExtension", "args": ["name", "sources", "*args", "**kwargs"], "kwargs": []},
{"code": "torch.utils.cpp_extension.CUDAExtension(name,sources,*args,**kwargs)\u00b6", "function_name": "CUDAExtension", "args": ["name", "sources", "*args", "**kwargs"], "kwargs": []},
{"code": "torch.utils.cpp_extension.BuildExtension(*args,**kwargs)\u00b6", "function_name": "BuildExtension", "args": ["*args", "**kwargs"], "kwargs": []},
{"code": "torch.utils.cpp_extension.load(name,sources,extra_cflags=None,extra_cuda_cflags=None,extra_ldflags=None,extra_include_paths=None,build_directory=None,verbose=False,with_cuda=None,is_python_module=True)\u00b6", "function_name": "load", "args": ["name", "sources"], "kwargs": [["extra_cflags", "None"], ["extra_cuda_cflags", "None"], ["extra_ldflags", "None"], ["extra_include_paths", "None"], ["build_directory", "None"], ["verbose", "False"], ["with_cuda", "None"], ["is_python_module", "True"]]},
{"code": "torch.utils.cpp_extension.load_inline(name,cpp_sources,cuda_sources=None,functions=None,extra_cflags=None,extra_cuda_cflags=None,extra_ldflags=None,extra_include_paths=None,build_directory=None,verbose=False,with_cuda=None,is_python_module=True,with_pytorch_error_handling=True)\u00b6", "function_name": "load_inline", "args": ["name", "cpp_sources"], "kwargs": [["cuda_sources", "None"], ["functions", "None"], ["extra_cflags", "None"], ["extra_cuda_cflags", "None"], ["extra_ldflags", "None"], ["extra_include_paths", "None"], ["build_directory", "None"], ["verbose", "False"], ["with_cuda", "None"], ["is_python_module", "True"], ["with_pytorch_error_handling", "True"]]},
{"code": "torch.utils.cpp_extension.include_paths(cuda=False)\u00b6", "function_name": "include_paths", "args": [], "kwargs": [["cuda", "False"]]},
{"code": "torch.utils.cpp_extension.check_compiler_abi_compatibility(compiler)\u00b6", "function_name": "check_compiler_abi_compatibility", "args": ["compiler"], "kwargs": []},
{"code": "torch.utils.cpp_extension.verify_ninja_availability()\u00b6", "function_name": "verify_ninja_availability", "args": [""], "kwargs": []},
{"code": "torch.utils.data.get_worker_info()\u00b6", "function_name": "get_worker_info", "args": [""], "kwargs": []},
{"code": "torch.utils.data.random_split(dataset,lengths)\u00b6", "function_name": "random_split", "args": ["dataset", "lengths"], "kwargs": []},
{"code": "torch.utils.checkpoint.checkpoint(function,*args,**kwargs)\u00b6", "function_name": "checkpoint", "args": ["function", "*args", "**kwargs"], "kwargs": []},
{"code": "torch.utils.checkpoint.checkpoint_sequential(functions,segments,*inputs,**kwargs)\u00b6", "function_name": "checkpoint_sequential", "args": ["functions", "segments", "*inputs", "**kwargs"], "kwargs": []},
{"code": "torch.sparse.addmm(mat,mat1,mat2,beta=1,alpha=1)\u00b6", "function_name": "addmm", "args": ["mat", "mat1", "mat2"], "kwargs": [["beta", "1"], ["alpha", "1"]]},
{"code": "torch.sparse.mm(mat1,mat2)\u00b6", "function_name": "mm", "args": ["mat1", "mat2"], "kwargs": []},
{"code": "torch.sparse.sum(input,dim=None,dtype=None)\u00b6", "function_name": "sum", "args": ["input"], "kwargs": [["dim", "None"], ["dtype", "None"]]},
{"code": "torch.random.fork_rng(devices=None,enabled=True,_caller='fork_rng',_devices_kw='devices')", "function_name": "fork_rng", "args": [], "kwargs": [["devices", "None"], ["enabled", "True"], ["_caller", "'fork_rng'"], ["_devices_kw", "'devices'"]]},
{"code": "torch.random.get_rng_state()", "function_name": "get_rng_state", "args": [""], "kwargs": []},
{"code": "torch.random.initial_seed()", "function_name": "initial_seed", "args": [""], "kwargs": []},
{"code": "torch.random.manual_seed(seed)", "function_name": "manual_seed", "args": ["seed"], "kwargs": []},
{"code": "torch.random.seed()", "function_name": "seed", "args": [""], "kwargs": []},
{"code": "torch.random.set_rng_state(new_state)", "function_name": "set_rng_state", "args": ["new_state"], "kwargs": []},
{"code": "torch.distributed.rpc.init_rpc(name,backend=BackendType.PROCESS_GROUP,rank=-1,world_size=None,rpc_backend_options=None)\u00b6", "function_name": "init_rpc", "args": ["name"], "kwargs": [["backend", "BackendType.PROCESS_GROUP"], ["rank", "-1"], ["world_size", "None"], ["rpc_backend_options", "None"]]},
{"code": "torch.distributed.rpc.rpc_sync(to,func,args=None,kwargs=None)\u00b6", "function_name": "rpc_sync", "args": ["to", "func"], "kwargs": [["args", "None"], ["kwargs", "None"]]},
{"code": "torch.distributed.rpc.rpc_async(to,func,args=None,kwargs=None)\u00b6", "function_name": "rpc_async", "args": ["to", "func"], "kwargs": [["args", "None"], ["kwargs", "None"]]},
{"code": "torch.distributed.rpc.remote(to,func,args=None,kwargs=None)\u00b6", "function_name": "remote", "args": ["to", "func"], "kwargs": [["args", "None"], ["kwargs", "None"]]},
{"code": "torch.distributed.rpc.get_worker_info(worker_name=None)\u00b6", "function_name": "get_worker_info", "args": [], "kwargs": [["worker_name", "None"]]},
{"code": "torch.distributed.rpc.shutdown(graceful=True)\u00b6", "function_name": "shutdown", "args": [], "kwargs": [["graceful", "True"]]},
{"code": "torch.quantization.quantize(model,run_fn,run_args,mapping=None,inplace=False)\u00b6", "function_name": "quantize", "args": ["model", "run_fn", "run_args"], "kwargs": [["mapping", "None"], ["inplace", "False"]]},
{"code": "torch.quantization.quantize_dynamic(model,qconfig_spec=None,dtype=torch.qint8,mapping=None,inplace=False)\u00b6", "function_name": "quantize_dynamic", "args": ["model"], "kwargs": [["qconfig_spec", "None"], ["dtype", "torch.qint8"], ["mapping", "None"], ["inplace", "False"]]},
{"code": "torch.quantization.quantize_qat(model,run_fn,run_args,inplace=False)\u00b6", "function_name": "quantize_qat", "args": ["model", "run_fn", "run_args"], "kwargs": [["inplace", "False"]]},
{"code": "torch.quantization.prepare(model,qconfig_dict=None,inplace=False)\u00b6", "function_name": "prepare", "args": ["model"], "kwargs": [["qconfig_dict", "None"], ["inplace", "False"]]},
{"code": "torch.quantization.prepare_qat(model,mapping=None,inplace=False)\u00b6", "function_name": "prepare_qat", "args": ["model"], "kwargs": [["mapping", "None"], ["inplace", "False"]]},
{"code": "torch.quantization.convert(module,mapping=None,inplace=False)\u00b6", "function_name": "convert", "args": ["module"], "kwargs": [["mapping", "None"], ["inplace", "False"]]},
{"code": "torch.quantization.add_quant_dequant(module)\u00b6", "function_name": "add_quant_dequant", "args": ["module"], "kwargs": []},
{"code": "torch.quantization.add_observer_(module)\u00b6", "function_name": "add_observer_", "args": ["module"], "kwargs": []},
{"code": "torch.quantization.swap_module(mod,mapping)\u00b6", "function_name": "swap_module", "args": ["mod", "mapping"], "kwargs": []},
{"code": "torch.quantization.propagate_qconfig_(module,qconfig_dict=None)\u00b6", "function_name": "propagate_qconfig_", "args": ["module"], "kwargs": [["qconfig_dict", "None"]]},
{"code": "torch.quantization.default_eval_fn(model,calib_data)\u00b6", "function_name": "default_eval_fn", "args": ["model", "calib_data"], "kwargs": []},
{"code": "torch.quantization.get_observer_dict(mod,target_dict,prefix='')\u00b6", "function_name": "get_observer_dict", "args": ["mod", "target_dict"], "kwargs": [["prefix", "''"]]},
{"code": "torch.nn.quantized.functional.relu(input,inplace=False)\u2192Tensor\u00b6", "function_name": "relu", "args": ["input"], "kwargs": [["inplace", "False"]]},
{"code": "torch.nn.quantized.functional.linear(input,weight,bias=None,scale=None,zero_point=None)\u00b6", "function_name": "linear", "args": ["input", "weight"], "kwargs": [["bias", "None"], ["scale", "None"], ["zero_point", "None"]]},
{"code": "torch.nn.quantized.functional.conv2d(input,weight,bias,stride=1,padding=0,dilation=1,groups=1,padding_mode='zeros',scale=1.0,zero_point=0,dtype=torch.quint8)\u00b6", "function_name": "conv2d", "args": ["input", "weight", "bias"], "kwargs": [["stride", "1"], ["padding", "0"], ["dilation", "1"], ["groups", "1"], ["padding_mode", "'zeros'"], ["scale", "1.0"], ["zero_point", "0"], ["dtype", "torch.quint8"]]},
{"code": "torch.nn.quantized.functional.conv3d(input,weight,bias,stride=1,padding=0,dilation=1,groups=1,padding_mode='zeros',scale=1.0,zero_point=0,dtype=torch.quint8)\u00b6", "function_name": "conv3d", "args": ["input", "weight", "bias"], "kwargs": [["stride", "1"], ["padding", "0"], ["dilation", "1"], ["groups", "1"], ["padding_mode", "'zeros'"], ["scale", "1.0"], ["zero_point", "0"], ["dtype", "torch.quint8"]]},
{"code": "torch.nn.quantized.functional.max_pool2d(input,kernel_size,stride=None,padding=0,dilation=1,ceil_mode=False,return_indices=False)\u00b6", "function_name": "max_pool2d", "args": ["input", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["dilation", "1"], ["ceil_mode", "False"], ["return_indices", "False"]]},
{"code": "torch.nn.quantized.functional.adaptive_avg_pool2d(input,output_size)\u00b6", "function_name": "adaptive_avg_pool2d", "args": ["input", "output_size"], "kwargs": []},
{"code": "torch.nn.quantized.functional.avg_pool2d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True,divisor_override=None)\u00b6", "function_name": "avg_pool2d", "args": ["input", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["ceil_mode", "False"], ["count_include_pad", "True"], ["divisor_override", "None"]]},
{"code": "torch.nn.quantized.functional.interpolate(input,size=None,scale_factor=None,mode='nearest',align_corners=None)\u00b6", "function_name": "interpolate", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"], ["mode", "'nearest'"], ["align_corners", "None"]]},
{"code": "torch.nn.quantized.functional.upsample(input,size=None,scale_factor=None,mode='nearest',align_corners=None)\u00b6", "function_name": "upsample", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"], ["mode", "'nearest'"], ["align_corners", "None"]]},
{"code": "torch.nn.quantized.functional.upsample_bilinear(input,size=None,scale_factor=None)\u00b6", "function_name": "upsample_bilinear", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"]]},
{"code": "torch.nn.quantized.functional.upsample_nearest(input,size=None,scale_factor=None)\u00b6", "function_name": "upsample_nearest", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"]]},
{"code": "torch.onnx.export(model,args,f,export_params=True,verbose=False,training=False,input_names=None,output_names=None,aten=False,export_raw_ir=False,operator_export_type=None,opset_version=None,_retain_param_name=True,do_constant_folding=False,example_outputs=None,strip_doc_string=True,dynamic_axes=None,keep_initializers_as_inputs=None)\u00b6", "function_name": "export", "args": ["model", "args", "f"], "kwargs": [["export_params", "True"], ["verbose", "False"], ["training", "False"], ["input_names", "None"], ["output_names", "None"], ["aten", "False"], ["export_raw_ir", "False"], ["operator_export_type", "None"], ["opset_version", "None"], ["_retain_param_name", "True"], ["do_constant_folding", "False"], ["example_outputs", "None"], ["strip_doc_string", "True"], ["dynamic_axes", "None"], ["keep_initializers_as_inputs", "None"]]},
{"code": "torch.onnx.register_custom_op_symbolic(symbolic_name,symbolic_fn,opset_version)\u00b6", "function_name": "register_custom_op_symbolic", "args": ["symbolic_name", "symbolic_fn", "opset_version"], "kwargs": []},
{"code": "torch.onnx.operators.shape_as_tensor(x)\u00b6", "function_name": "shape_as_tensor", "args": ["x"], "kwargs": []},
{"code": "torch.onnx.set_training(model,mode)\u00b6", "function_name": "set_training", "args": ["model", "mode"], "kwargs": []},
{"code": "torch.onnx.is_in_onnx_export()\u00b6", "function_name": "is_in_onnx_export", "args": [""], "kwargs": []},
{"code": "torch.nn.init.calculate_gain(nonlinearity,param=None)\u00b6", "function_name": "calculate_gain", "args": ["nonlinearity"], "kwargs": [["param", "None"]]},
{"code": "torch.nn.init.uniform_(tensor,a=0.0,b=1.0)\u00b6", "function_name": "uniform_", "args": ["tensor"], "kwargs": [["a", "0.0"], ["b", "1.0"]]},
{"code": "torch.nn.init.normal_(tensor,mean=0.0,std=1.0)\u00b6", "function_name": "normal_", "args": ["tensor"], "kwargs": [["mean", "0.0"], ["std", "1.0"]]},
{"code": "torch.nn.init.constant_(tensor,val)\u00b6", "function_name": "constant_", "args": ["tensor", "val"], "kwargs": []},
{"code": "torch.nn.init.ones_(tensor)\u00b6", "function_name": "ones_", "args": ["tensor"], "kwargs": []},
{"code": "torch.nn.init.zeros_(tensor)\u00b6", "function_name": "zeros_", "args": ["tensor"], "kwargs": []},
{"code": "torch.nn.init.eye_(tensor)\u00b6", "function_name": "eye_", "args": ["tensor"], "kwargs": []},
{"code": "torch.nn.init.dirac_(tensor)\u00b6", "function_name": "dirac_", "args": ["tensor"], "kwargs": []},
{"code": "torch.nn.init.xavier_uniform_(tensor,gain=1.0)\u00b6", "function_name": "xavier_uniform_", "args": ["tensor"], "kwargs": [["gain", "1.0"]]},
{"code": "torch.nn.init.xavier_normal_(tensor,gain=1.0)\u00b6", "function_name": "xavier_normal_", "args": ["tensor"], "kwargs": [["gain", "1.0"]]},
{"code": "torch.nn.init.kaiming_uniform_(tensor,a=0,mode='fan_in',nonlinearity='leaky_relu')\u00b6", "function_name": "kaiming_uniform_", "args": ["tensor"], "kwargs": [["a", "0"], ["mode", "'fan_in'"], ["nonlinearity", "'leaky_relu'"]]},
{"code": "torch.nn.init.kaiming_normal_(tensor,a=0,mode='fan_in',nonlinearity='leaky_relu')\u00b6", "function_name": "kaiming_normal_", "args": ["tensor"], "kwargs": [["a", "0"], ["mode", "'fan_in'"], ["nonlinearity", "'leaky_relu'"]]},
{"code": "torch.nn.init.orthogonal_(tensor,gain=1)\u00b6", "function_name": "orthogonal_", "args": ["tensor"], "kwargs": [["gain", "1"]]},
{"code": "torch.nn.init.sparse_(tensor,sparsity,std=0.01)\u00b6", "function_name": "sparse_", "args": ["tensor", "sparsity"], "kwargs": [["std", "0.01"]]},
{"code": "torch.hub.list(github,force_reload=False)\u00b6", "function_name": "list", "args": ["github"], "kwargs": [["force_reload", "False"]]},
{"code": "torch.hub.help(github,model,force_reload=False)\u00b6", "function_name": "help", "args": ["github", "model"], "kwargs": [["force_reload", "False"]]},
{"code": "torch.hub.load(github,model,*args,**kwargs)\u00b6", "function_name": "load", "args": ["github", "model", "*args", "**kwargs"], "kwargs": []},
{"code": "torch.hub.download_url_to_file(url,dst,hash_prefix=None,progress=True)\u00b6", "function_name": "download_url_to_file", "args": ["url", "dst"], "kwargs": [["hash_prefix", "None"], ["progress", "True"]]},
{"code": "torch.hub.load_state_dict_from_url(url,model_dir=None,map_location=None,progress=True,check_hash=False)\u00b6", "function_name": "load_state_dict_from_url", "args": ["url"], "kwargs": [["model_dir", "None"], ["map_location", "None"], ["progress", "True"], ["check_hash", "False"]]},
{"code": "torch.hub.set_dir(d)\u00b6", "function_name": "set_dir", "args": ["d"], "kwargs": []},
{"code": "torch.distributed.is_initialized()\u00b6", "function_name": "is_initialized", "args": [""], "kwargs": []},
{"code": "torch.distributed.is_mpi_available()\u00b6", "function_name": "is_mpi_available", "args": [""], "kwargs": []},
{"code": "torch.distributed.is_nccl_available()\u00b6", "function_name": "is_nccl_available", "args": [""], "kwargs": []},
{"code": "torch.distributions.kl.kl_divergence(p,q)\u00b6", "function_name": "kl_divergence", "args": ["p", "q"], "kwargs": []},
{"code": "torch.distributions.kl.register_kl(type_p,type_q)\u00b6", "function_name": "register_kl", "args": ["type_p", "type_q"], "kwargs": []},
{"code": "torch.cuda.current_blas_handle()\u00b6", "function_name": "current_blas_handle", "args": [""], "kwargs": []},
{"code": "torch.cuda.current_device()\u00b6", "function_name": "current_device", "args": [""], "kwargs": []},
{"code": "torch.cuda.current_stream(device=None)\u00b6", "function_name": "current_stream", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.default_stream(device=None)\u00b6", "function_name": "default_stream", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.device_count()\u00b6", "function_name": "device_count", "args": [""], "kwargs": []},
{"code": "torch.cuda.get_device_capability(device=None)\u00b6", "function_name": "get_device_capability", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.get_device_name(device=None)\u00b6", "function_name": "get_device_name", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.init()\u00b6", "function_name": "init", "args": [""], "kwargs": []},
{"code": "torch.cuda.ipc_collect()\u00b6", "function_name": "ipc_collect", "args": [""], "kwargs": []},
{"code": "torch.cuda.is_available()\u00b6", "function_name": "is_available", "args": [""], "kwargs": []},
{"code": "torch.cuda.is_initialized()\u00b6", "function_name": "is_initialized", "args": [""], "kwargs": []},
{"code": "torch.cuda.set_device(device)\u00b6", "function_name": "set_device", "args": ["device"], "kwargs": []},
{"code": "torch.cuda.stream(stream)\u00b6", "function_name": "stream", "args": ["stream"], "kwargs": []},
{"code": "torch.cuda.synchronize(device=None)\u00b6", "function_name": "synchronize", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.get_rng_state(device='cuda')\u00b6", "function_name": "get_rng_state", "args": [], "kwargs": [["device", "'cuda'"]]},
{"code": "torch.cuda.get_rng_state_all()\u00b6", "function_name": "get_rng_state_all", "args": [""], "kwargs": []},
{"code": "torch.cuda.set_rng_state(new_state,device='cuda')\u00b6", "function_name": "set_rng_state", "args": ["new_state"], "kwargs": [["device", "'cuda'"]]},
{"code": "torch.cuda.set_rng_state_all(new_states)\u00b6", "function_name": "set_rng_state_all", "args": ["new_states"], "kwargs": []},
{"code": "torch.cuda.manual_seed(seed)\u00b6", "function_name": "manual_seed", "args": ["seed"], "kwargs": []},
{"code": "torch.cuda.manual_seed_all(seed)\u00b6", "function_name": "manual_seed_all", "args": ["seed"], "kwargs": []},
{"code": "torch.cuda.seed()\u00b6", "function_name": "seed", "args": [""], "kwargs": []},
{"code": "torch.cuda.seed_all()\u00b6", "function_name": "seed_all", "args": [""], "kwargs": []},
{"code": "torch.cuda.initial_seed()\u00b6", "function_name": "initial_seed", "args": [""], "kwargs": []},
{"code": "torch.cuda.comm.broadcast(tensor,devices)\u00b6", "function_name": "broadcast", "args": ["tensor", "devices"], "kwargs": []},
{"code": "torch.cuda.comm.broadcast_coalesced(tensors,devices,buffer_size=10485760)\u00b6", "function_name": "broadcast_coalesced", "args": ["tensors", "devices"], "kwargs": [["buffer_size", "10485760"]]},
{"code": "torch.cuda.comm.reduce_add(inputs,destination=None)\u00b6", "function_name": "reduce_add", "args": ["inputs"], "kwargs": [["destination", "None"]]},
{"code": "torch.cuda.comm.scatter(tensor,devices,chunk_sizes=None,dim=0,streams=None)\u00b6", "function_name": "scatter", "args": ["tensor", "devices"], "kwargs": [["chunk_sizes", "None"], ["dim", "0"], ["streams", "None"]]},
{"code": "torch.cuda.comm.gather(tensors,dim=0,destination=None)\u00b6", "function_name": "gather", "args": ["tensors"], "kwargs": [["dim", "0"], ["destination", "None"]]},
{"code": "torch.cuda.empty_cache()\u00b6", "function_name": "empty_cache", "args": [""], "kwargs": []},
{"code": "torch.cuda.memory_stats(device=None)\u00b6", "function_name": "memory_stats", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.memory_summary(device=None,abbreviated=False)\u00b6", "function_name": "memory_summary", "args": [], "kwargs": [["device", "None"], ["abbreviated", "False"]]},
{"code": "torch.cuda.memory_snapshot()\u00b6", "function_name": "memory_snapshot", "args": [""], "kwargs": []},
{"code": "torch.cuda.memory_allocated(device=None)\u00b6", "function_name": "memory_allocated", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.max_memory_allocated(device=None)\u00b6", "function_name": "max_memory_allocated", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.reset_max_memory_allocated(device=None)\u00b6", "function_name": "reset_max_memory_allocated", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.memory_reserved(device=None)\u00b6", "function_name": "memory_reserved", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.max_memory_reserved(device=None)\u00b6", "function_name": "max_memory_reserved", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.memory_cached(device=None)\u00b6", "function_name": "memory_cached", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.max_memory_cached(device=None)\u00b6", "function_name": "max_memory_cached", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.reset_max_memory_cached(device=None)\u00b6", "function_name": "reset_max_memory_cached", "args": [], "kwargs": [["device", "None"]]},
{"code": "torch.cuda.nvtx.mark(msg)\u00b6", "function_name": "mark", "args": ["msg"], "kwargs": []},
{"code": "torch.cuda.nvtx.range_push(msg)\u00b6", "function_name": "range_push", "args": ["msg"], "kwargs": []},
{"code": "torch.cuda.nvtx.range_pop()\u00b6", "function_name": "range_pop", "args": [""], "kwargs": []},
{"code": "torch.autograd.backward(tensors,grad_tensors=None,retain_graph=None,create_graph=False,grad_variables=None)\u00b6", "function_name": "backward", "args": ["tensors"], "kwargs": [["grad_tensors", "None"], ["retain_graph", "None"], ["create_graph", "False"], ["grad_variables", "None"]]},
{"code": "torch.autograd.grad(outputs,inputs,grad_outputs=None,retain_graph=None,create_graph=False,only_inputs=True,allow_unused=False)\u00b6", "function_name": "grad", "args": ["outputs", "inputs"], "kwargs": [["grad_outputs", "None"], ["retain_graph", "None"], ["create_graph", "False"], ["only_inputs", "True"], ["allow_unused", "False"]]},
{"code": "torch.autograd.gradcheck(func,inputs,eps=1e-06,atol=1e-05,rtol=0.001,raise_exception=True,check_sparse_nnz=False,nondet_tol=0.0)\u00b6", "function_name": "gradcheck", "args": ["func", "inputs"], "kwargs": [["eps", "1e-06"], ["atol", "1e-05"], ["rtol", "0.001"], ["raise_exception", "True"], ["check_sparse_nnz", "False"], ["nondet_tol", "0.0"]]},
{"code": "torch.autograd.gradgradcheck(func,inputs,grad_outputs=None,eps=1e-06,atol=1e-05,rtol=0.001,gen_non_contig_grad_outputs=False,raise_exception=True,nondet_tol=0.0)\u00b6", "function_name": "gradgradcheck", "args": ["func", "inputs"], "kwargs": [["grad_outputs", "None"], ["eps", "1e-06"], ["atol", "1e-05"], ["rtol", "0.001"], ["gen_non_contig_grad_outputs", "False"], ["raise_exception", "True"], ["nondet_tol", "0.0"]]},
{"code": "torch.autograd.profiler.load_nvprof(path)\u00b6", "function_name": "load_nvprof", "args": ["path"], "kwargs": []},
{"code": "torch.jit.script(obj)\u00b6", "function_name": "script", "args": ["obj"], "kwargs": []},
{"code": "torch.jit.trace(func,example_inputs,optimize=None,check_trace=True,check_inputs=None,check_tolerance=1e-5)\u00b6", "function_name": "trace", "args": ["func", "example_inputs"], "kwargs": [["optimize", "None"], ["check_trace", "True"], ["check_inputs", "None"], ["check_tolerance", "1e-5"]]},
{"code": "torch.jit.trace_module(mod,inputs,optimize=None,check_trace=True,check_inputs=None,check_tolerance=1e-5)\u00b6", "function_name": "trace_module", "args": ["mod", "inputs"], "kwargs": [["optimize", "None"], ["check_trace", "True"], ["check_inputs", "None"], ["check_tolerance", "1e-5"]]},
{"code": "torch.jit.export(fn)\u00b6", "function_name": "export", "args": ["fn"], "kwargs": []},
{"code": "torch.jit.ignore(drop=False,**kwargs)\u00b6", "function_name": "ignore", "args": ["**kwargs"], "kwargs": [["drop", "False"]]},
{"code": "torch.jit.unused(fn)\u00b6", "function_name": "unused", "args": ["fn"], "kwargs": []},
{"code": "torch.jit.is_scripting()\u00b6", "function_name": "is_scripting", "args": [""], "kwargs": []},
{"code": "bernoulli_(p_tensor,*,generator=None)\u2192Tensor", "function_name": "bernoulli_", "args": ["p_tensor", "*"], "kwargs": [["generator", "None"]]},
{"code": "to(other,non_blocking=False,copy=False)\u2192Tensor", "function_name": "to", "args": ["other"], "kwargs": [["non_blocking", "False"], ["copy", "False"]]},
{"code": "all(dim,keepdim=False,out=None)\u2192Tensor", "function_name": "all", "args": ["dim"], "kwargs": [["keepdim", "False"], ["out", "None"]]},
{"code": "any(dim,keepdim=False,out=None)\u2192Tensor", "function_name": "any", "args": ["dim"], "kwargs": [["keepdim", "False"], ["out", "None"]]},
{"code": "torch.nn.functional.conv1d(input,weight,bias=None,stride=1,padding=0,dilation=1,groups=1)\u2192Tensor\u00b6", "function_name": "conv1d", "args": ["input", "weight"], "kwargs": [["bias", "None"], ["stride", "1"], ["padding", "0"], ["dilation", "1"], ["groups", "1"]]},
{"code": "torch.nn.functional.conv2d(input,weight,bias=None,stride=1,padding=0,dilation=1,groups=1)\u2192Tensor\u00b6", "function_name": "conv2d", "args": ["input", "weight"], "kwargs": [["bias", "None"], ["stride", "1"], ["padding", "0"], ["dilation", "1"], ["groups", "1"]]},
{"code": "torch.nn.functional.conv3d(input,weight,bias=None,stride=1,padding=0,dilation=1,groups=1)\u2192Tensor\u00b6", "function_name": "conv3d", "args": ["input", "weight"], "kwargs": [["bias", "None"], ["stride", "1"], ["padding", "0"], ["dilation", "1"], ["groups", "1"]]},
{"code": "torch.nn.functional.conv_transpose1d(input,weight,bias=None,stride=1,padding=0,output_padding=0,groups=1,dilation=1)\u2192Tensor\u00b6", "function_name": "conv_transpose1d", "args": ["input", "weight"], "kwargs": [["bias", "None"], ["stride", "1"], ["padding", "0"], ["output_padding", "0"], ["groups", "1"], ["dilation", "1"]]},
{"code": "torch.nn.functional.conv_transpose2d(input,weight,bias=None,stride=1,padding=0,output_padding=0,groups=1,dilation=1)\u2192Tensor\u00b6", "function_name": "conv_transpose2d", "args": ["input", "weight"], "kwargs": [["bias", "None"], ["stride", "1"], ["padding", "0"], ["output_padding", "0"], ["groups", "1"], ["dilation", "1"]]},
{"code": "torch.nn.functional.conv_transpose3d(input,weight,bias=None,stride=1,padding=0,output_padding=0,groups=1,dilation=1)\u2192Tensor\u00b6", "function_name": "conv_transpose3d", "args": ["input", "weight"], "kwargs": [["bias", "None"], ["stride", "1"], ["padding", "0"], ["output_padding", "0"], ["groups", "1"], ["dilation", "1"]]},
{"code": "torch.nn.functional.unfold(input,kernel_size,dilation=1,padding=0,stride=1)\u00b6", "function_name": "unfold", "args": ["input", "kernel_size"], "kwargs": [["dilation", "1"], ["padding", "0"], ["stride", "1"]]},
{"code": "torch.nn.functional.fold(input,output_size,kernel_size,dilation=1,padding=0,stride=1)\u00b6", "function_name": "fold", "args": ["input", "output_size", "kernel_size"], "kwargs": [["dilation", "1"], ["padding", "0"], ["stride", "1"]]},
{"code": "torch.nn.functional.avg_pool1d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True)\u2192Tensor\u00b6", "function_name": "avg_pool1d", "args": ["input", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["ceil_mode", "False"], ["count_include_pad", "True"]]},
{"code": "torch.nn.functional.avg_pool2d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True,divisor_override=None)\u2192Tensor\u00b6", "function_name": "avg_pool2d", "args": ["input", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["ceil_mode", "False"], ["count_include_pad", "True"], ["divisor_override", "None"]]},
{"code": "torch.nn.functional.avg_pool3d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True,divisor_override=None)\u2192Tensor\u00b6", "function_name": "avg_pool3d", "args": ["input", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["ceil_mode", "False"], ["count_include_pad", "True"], ["divisor_override", "None"]]},
{"code": "torch.nn.functional.max_pool1d(*args,**kwargs)\u00b6", "function_name": "max_pool1d", "args": ["*args", "**kwargs"], "kwargs": []},
{"code": "torch.nn.functional.max_pool2d(*args,**kwargs)\u00b6", "function_name": "max_pool2d", "args": ["*args", "**kwargs"], "kwargs": []},
{"code": "torch.nn.functional.max_pool3d(*args,**kwargs)\u00b6", "function_name": "max_pool3d", "args": ["*args", "**kwargs"], "kwargs": []},
{"code": "torch.nn.functional.max_unpool1d(input,indices,kernel_size,stride=None,padding=0,output_size=None)\u00b6", "function_name": "max_unpool1d", "args": ["input", "indices", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["output_size", "None"]]},
{"code": "torch.nn.functional.max_unpool2d(input,indices,kernel_size,stride=None,padding=0,output_size=None)\u00b6", "function_name": "max_unpool2d", "args": ["input", "indices", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["output_size", "None"]]},
{"code": "torch.nn.functional.max_unpool3d(input,indices,kernel_size,stride=None,padding=0,output_size=None)\u00b6", "function_name": "max_unpool3d", "args": ["input", "indices", "kernel_size"], "kwargs": [["stride", "None"], ["padding", "0"], ["output_size", "None"]]},
{"code": "torch.nn.functional.lp_pool1d(input,norm_type,kernel_size,stride=None,ceil_mode=False)\u00b6", "function_name": "lp_pool1d", "args": ["input", "norm_type", "kernel_size"], "kwargs": [["stride", "None"], ["ceil_mode", "False"]]},
{"code": "torch.nn.functional.lp_pool2d(input,norm_type,kernel_size,stride=None,ceil_mode=False)\u00b6", "function_name": "lp_pool2d", "args": ["input", "norm_type", "kernel_size"], "kwargs": [["stride", "None"], ["ceil_mode", "False"]]},
{"code": "torch.nn.functional.adaptive_max_pool1d(*args,**kwargs)\u00b6", "function_name": "adaptive_max_pool1d", "args": ["*args", "**kwargs"], "kwargs": []},
{"code": "torch.nn.functional.adaptive_max_pool2d(*args,**kwargs)\u00b6", "function_name": "adaptive_max_pool2d", "args": ["*args", "**kwargs"], "kwargs": []},
{"code": "torch.nn.functional.adaptive_max_pool3d(*args,**kwargs)\u00b6", "function_name": "adaptive_max_pool3d", "args": ["*args", "**kwargs"], "kwargs": []},
{"code": "torch.nn.functional.adaptive_avg_pool1d(input,output_size)\u2192Tensor\u00b6", "function_name": "adaptive_avg_pool1d", "args": ["input", "output_size"], "kwargs": []},
{"code": "torch.nn.functional.adaptive_avg_pool2d(input,output_size)\u00b6", "function_name": "adaptive_avg_pool2d", "args": ["input", "output_size"], "kwargs": []},
{"code": "torch.nn.functional.adaptive_avg_pool3d(input,output_size)\u00b6", "function_name": "adaptive_avg_pool3d", "args": ["input", "output_size"], "kwargs": []},
{"code": "torch.nn.functional.threshold(input,threshold,value,inplace=False)\u00b6", "function_name": "threshold", "args": ["input", "threshold", "value"], "kwargs": [["inplace", "False"]]},
{"code": "torch.nn.functional.threshold_(input,threshold,value)\u2192Tensor\u00b6", "function_name": "threshold_", "args": ["input", "threshold", "value"], "kwargs": []},
{"code": "torch.nn.functional.relu(input,inplace=False)\u2192Tensor\u00b6", "function_name": "relu", "args": ["input"], "kwargs": [["inplace", "False"]]},
{"code": "torch.nn.functional.relu_(input)\u2192Tensor\u00b6", "function_name": "relu_", "args": ["input"], "kwargs": []},
{"code": "torch.nn.functional.hardtanh(input,min_val=-1.,max_val=1.,inplace=False)\u2192Tensor\u00b6", "function_name": "hardtanh", "args": ["input"], "kwargs": [["min_val", "-1."], ["max_val", "1."], ["inplace", "False"]]},
{"code": "torch.nn.functional.hardtanh_(input,min_val=-1.,max_val=1.)\u2192Tensor\u00b6", "function_name": "hardtanh_", "args": ["input"], "kwargs": [["min_val", "-1."], ["max_val", "1."]]},
{"code": "torch.nn.functional.relu6(input,inplace=False)\u2192Tensor\u00b6", "function_name": "relu6", "args": ["input"], "kwargs": [["inplace", "False"]]},
{"code": "torch.nn.functional.elu(input,alpha=1.0,inplace=False)\u00b6", "function_name": "elu", "args": ["input"], "kwargs": [["alpha", "1.0"], ["inplace", "False"]]},
{"code": "torch.nn.functional.elu_(input,alpha=1.)\u2192Tensor\u00b6", "function_name": "elu_", "args": ["input"], "kwargs": [["alpha", "1."]]},
{"code": "torch.nn.functional.selu(input,inplace=False)\u2192Tensor\u00b6", "function_name": "selu", "args": ["input"], "kwargs": [["inplace", "False"]]},
{"code": "torch.nn.functional.celu(input,alpha=1.,inplace=False)\u2192Tensor\u00b6", "function_name": "celu", "args": ["input"], "kwargs": [["alpha", "1."], ["inplace", "False"]]},
{"code": "torch.nn.functional.leaky_relu(input,negative_slope=0.01,inplace=False)\u2192Tensor\u00b6", "function_name": "leaky_relu", "args": ["input"], "kwargs": [["negative_slope", "0.01"], ["inplace", "False"]]},
{"code": "torch.nn.functional.leaky_relu_(input,negative_slope=0.01)\u2192Tensor\u00b6", "function_name": "leaky_relu_", "args": ["input"], "kwargs": [["negative_slope", "0.01"]]},
{"code": "torch.nn.functional.prelu(input,weight)\u2192Tensor\u00b6", "function_name": "prelu", "args": ["input", "weight"], "kwargs": []},
{"code": "torch.nn.functional.glu(input,dim=-1)\u2192Tensor\u00b6", "function_name": "glu", "args": ["input"], "kwargs": [["dim", "-1"]]},
{"code": "torch.nn.functional.gelu(input)\u2192Tensor\u00b6", "function_name": "gelu", "args": ["input"], "kwargs": []},
{"code": "torch.nn.functional.logsigmoid(input)\u2192Tensor\u00b6", "function_name": "logsigmoid", "args": ["input"], "kwargs": []},
{"code": "torch.nn.functional.hardshrink(input,lambd=0.5)\u2192Tensor\u00b6", "function_name": "hardshrink", "args": ["input"], "kwargs": [["lambd", "0.5"]]},
{"code": "torch.nn.functional.tanhshrink(input)\u2192Tensor\u00b6", "function_name": "tanhshrink", "args": ["input"], "kwargs": []},
{"code": "torch.nn.functional.softsign(input)\u2192Tensor\u00b6", "function_name": "softsign", "args": ["input"], "kwargs": []},
{"code": "torch.nn.functional.softplus(input,beta=1,threshold=20)\u2192Tensor\u00b6", "function_name": "softplus", "args": ["input"], "kwargs": [["beta", "1"], ["threshold", "20"]]},
{"code": "torch.nn.functional.softmin(input,dim=None,_stacklevel=3,dtype=None)\u00b6", "function_name": "softmin", "args": ["input"], "kwargs": [["dim", "None"], ["_stacklevel", "3"], ["dtype", "None"]]},
{"code": "torch.nn.functional.softmax(input,dim=None,_stacklevel=3,dtype=None)\u00b6", "function_name": "softmax", "args": ["input"], "kwargs": [["dim", "None"], ["_stacklevel", "3"], ["dtype", "None"]]},
{"code": "torch.nn.functional.softshrink(input,lambd=0.5)\u2192Tensor\u00b6", "function_name": "softshrink", "args": ["input"], "kwargs": [["lambd", "0.5"]]},
{"code": "torch.nn.functional.gumbel_softmax(logits,tau=1,hard=False,eps=1e-10,dim=-1)\u00b6", "function_name": "gumbel_softmax", "args": ["logits"], "kwargs": [["tau", "1"], ["hard", "False"], ["eps", "1e-10"], ["dim", "-1"]]},
{"code": "torch.nn.functional.log_softmax(input,dim=None,_stacklevel=3,dtype=None)\u00b6", "function_name": "log_softmax", "args": ["input"], "kwargs": [["dim", "None"], ["_stacklevel", "3"], ["dtype", "None"]]},
{"code": "torch.nn.functional.tanh(input)\u2192Tensor\u00b6", "function_name": "tanh", "args": ["input"], "kwargs": []},
{"code": "torch.nn.functional.sigmoid(input)\u2192Tensor\u00b6", "function_name": "sigmoid", "args": ["input"], "kwargs": []},
{"code": "torch.nn.functional.batch_norm(input,running_mean,running_var,weight=None,bias=None,training=False,momentum=0.1,eps=1e-05)\u00b6", "function_name": "batch_norm", "args": ["input", "running_mean", "running_var"], "kwargs": [["weight", "None"], ["bias", "None"], ["training", "False"], ["momentum", "0.1"], ["eps", "1e-05"]]},
{"code": "torch.nn.functional.instance_norm(input,running_mean=None,running_var=None,weight=None,bias=None,use_input_stats=True,momentum=0.1,eps=1e-05)\u00b6", "function_name": "instance_norm", "args": ["input"], "kwargs": [["running_mean", "None"], ["running_var", "None"], ["weight", "None"], ["bias", "None"], ["use_input_stats", "True"], ["momentum", "0.1"], ["eps", "1e-05"]]},
{"code": "torch.nn.functional.layer_norm(input,normalized_shape,weight=None,bias=None,eps=1e-05)\u00b6", "function_name": "layer_norm", "args": ["input", "normalized_shape"], "kwargs": [["weight", "None"], ["bias", "None"], ["eps", "1e-05"]]},
{"code": "torch.nn.functional.local_response_norm(input,size,alpha=0.0001,beta=0.75,k=1.0)\u00b6", "function_name": "local_response_norm", "args": ["input", "size"], "kwargs": [["alpha", "0.0001"], ["beta", "0.75"], ["k", "1.0"]]},
{"code": "torch.nn.functional.normalize(input,p=2,dim=1,eps=1e-12,out=None)\u00b6", "function_name": "normalize", "args": ["input"], "kwargs": [["p", "2"], ["dim", "1"], ["eps", "1e-12"], ["out", "None"]]},
{"code": "torch.nn.functional.linear(input,weight,bias=None)\u00b6", "function_name": "linear", "args": ["input", "weight"], "kwargs": [["bias", "None"]]},
{"code": "torch.nn.functional.bilinear(input1,input2,weight,bias=None)\u00b6", "function_name": "bilinear", "args": ["input1", "input2", "weight"], "kwargs": [["bias", "None"]]},
{"code": "torch.nn.functional.dropout(input,p=0.5,training=True,inplace=False)\u00b6", "function_name": "dropout", "args": ["input"], "kwargs": [["p", "0.5"], ["training", "True"], ["inplace", "False"]]},
{"code": "torch.nn.functional.alpha_dropout(input,p=0.5,training=False,inplace=False)\u00b6", "function_name": "alpha_dropout", "args": ["input"], "kwargs": [["p", "0.5"], ["training", "False"], ["inplace", "False"]]},
{"code": "torch.nn.functional.dropout2d(input,p=0.5,training=True,inplace=False)\u00b6", "function_name": "dropout2d", "args": ["input"], "kwargs": [["p", "0.5"], ["training", "True"], ["inplace", "False"]]},
{"code": "torch.nn.functional.dropout3d(input,p=0.5,training=True,inplace=False)\u00b6", "function_name": "dropout3d", "args": ["input"], "kwargs": [["p", "0.5"], ["training", "True"], ["inplace", "False"]]},
{"code": "torch.nn.functional.embedding(input,weight,padding_idx=None,max_norm=None,norm_type=2.0,scale_grad_by_freq=False,sparse=False)\u00b6", "function_name": "embedding", "args": ["input", "weight"], "kwargs": [["padding_idx", "None"], ["max_norm", "None"], ["norm_type", "2.0"], ["scale_grad_by_freq", "False"], ["sparse", "False"]]},
{"code": "torch.nn.functional.embedding_bag(input,weight,offsets=None,max_norm=None,norm_type=2,scale_grad_by_freq=False,mode='mean',sparse=False,per_sample_weights=None)\u00b6", "function_name": "embedding_bag", "args": ["input", "weight"], "kwargs": [["offsets", "None"], ["max_norm", "None"], ["norm_type", "2"], ["scale_grad_by_freq", "False"], ["mode", "'mean'"], ["sparse", "False"], ["per_sample_weights", "None"]]},
{"code": "torch.nn.functional.one_hot(tensor,num_classes=-1)\u2192LongTensor\u00b6", "function_name": "one_hot", "args": ["tensor"], "kwargs": [["num_classes", "-1"]]},
{"code": "torch.nn.functional.pairwise_distance(x1,x2,p=2.0,eps=1e-06,keepdim=False)\u00b6", "function_name": "pairwise_distance", "args": ["x1", "x2"], "kwargs": [["p", "2.0"], ["eps", "1e-06"], ["keepdim", "False"]]},
{"code": "torch.nn.functional.cosine_similarity(x1,x2,dim=1,eps=1e-8)\u2192Tensor\u00b6", "function_name": "cosine_similarity", "args": ["x1", "x2"], "kwargs": [["dim", "1"], ["eps", "1e-8"]]},
{"code": "torch.nn.functional.pdist(input,p=2)\u2192Tensor\u00b6", "function_name": "pdist", "args": ["input"], "kwargs": [["p", "2"]]},
{"code": "torch.nn.functional.binary_cross_entropy(input,target,weight=None,size_average=None,reduce=None,reduction='mean')\u00b6", "function_name": "binary_cross_entropy", "args": ["input", "target"], "kwargs": [["weight", "None"], ["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.binary_cross_entropy_with_logits(input,target,weight=None,size_average=None,reduce=None,reduction='mean',pos_weight=None)\u00b6", "function_name": "binary_cross_entropy_with_logits", "args": ["input", "target"], "kwargs": [["weight", "None"], ["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"], ["pos_weight", "None"]]},
{"code": "torch.nn.functional.poisson_nll_loss(input,target,log_input=True,full=False,size_average=None,eps=1e-08,reduce=None,reduction='mean')\u00b6", "function_name": "poisson_nll_loss", "args": ["input", "target"], "kwargs": [["log_input", "True"], ["full", "False"], ["size_average", "None"], ["eps", "1e-08"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.cosine_embedding_loss(input1,input2,target,margin=0,size_average=None,reduce=None,reduction='mean')\u2192Tensor\u00b6", "function_name": "cosine_embedding_loss", "args": ["input1", "input2", "target"], "kwargs": [["margin", "0"], ["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.cross_entropy(input,target,weight=None,size_average=None,ignore_index=-100,reduce=None,reduction='mean')\u00b6", "function_name": "cross_entropy", "args": ["input", "target"], "kwargs": [["weight", "None"], ["size_average", "None"], ["ignore_index", "-100"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.ctc_loss(log_probs,targets,input_lengths,target_lengths,blank=0,reduction='mean',zero_infinity=False)\u00b6", "function_name": "ctc_loss", "args": ["log_probs", "targets", "input_lengths", "target_lengths"], "kwargs": [["blank", "0"], ["reduction", "'mean'"], ["zero_infinity", "False"]]},
{"code": "torch.nn.functional.hinge_embedding_loss(input,target,margin=1.0,size_average=None,reduce=None,reduction='mean')\u2192Tensor\u00b6", "function_name": "hinge_embedding_loss", "args": ["input", "target"], "kwargs": [["margin", "1.0"], ["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.kl_div(input,target,size_average=None,reduce=None,reduction='mean')\u00b6", "function_name": "kl_div", "args": ["input", "target"], "kwargs": [["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.l1_loss(input,target,size_average=None,reduce=None,reduction='mean')\u2192Tensor\u00b6", "function_name": "l1_loss", "args": ["input", "target"], "kwargs": [["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.mse_loss(input,target,size_average=None,reduce=None,reduction='mean')\u2192Tensor\u00b6", "function_name": "mse_loss", "args": ["input", "target"], "kwargs": [["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.margin_ranking_loss(input1,input2,target,margin=0,size_average=None,reduce=None,reduction='mean')\u2192Tensor\u00b6", "function_name": "margin_ranking_loss", "args": ["input1", "input2", "target"], "kwargs": [["margin", "0"], ["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.multilabel_margin_loss(input,target,size_average=None,reduce=None,reduction='mean')\u2192Tensor\u00b6", "function_name": "multilabel_margin_loss", "args": ["input", "target"], "kwargs": [["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.multilabel_soft_margin_loss(input,target,weight=None,size_average=None)\u2192Tensor\u00b6", "function_name": "multilabel_soft_margin_loss", "args": ["input", "target"], "kwargs": [["weight", "None"], ["size_average", "None"]]},
{"code": "torch.nn.functional.multi_margin_loss(input,target,p=1,margin=1.0,weight=None,size_average=None,reduce=None,reduction='mean')\u00b6", "function_name": "multi_margin_loss", "args": ["input", "target"], "kwargs": [["p", "1"], ["margin", "1.0"], ["weight", "None"], ["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.nll_loss(input,target,weight=None,size_average=None,ignore_index=-100,reduce=None,reduction='mean')\u00b6", "function_name": "nll_loss", "args": ["input", "target"], "kwargs": [["weight", "None"], ["size_average", "None"], ["ignore_index", "-100"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.smooth_l1_loss(input,target,size_average=None,reduce=None,reduction='mean')\u00b6", "function_name": "smooth_l1_loss", "args": ["input", "target"], "kwargs": [["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.soft_margin_loss(input,target,size_average=None,reduce=None,reduction='mean')\u2192Tensor\u00b6", "function_name": "soft_margin_loss", "args": ["input", "target"], "kwargs": [["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.triplet_margin_loss(anchor,positive,negative,margin=1.0,p=2,eps=1e-06,swap=False,size_average=None,reduce=None,reduction='mean')\u00b6", "function_name": "triplet_margin_loss", "args": ["anchor", "positive", "negative"], "kwargs": [["margin", "1.0"], ["p", "2"], ["eps", "1e-06"], ["swap", "False"], ["size_average", "None"], ["reduce", "None"], ["reduction", "'mean'"]]},
{"code": "torch.nn.functional.pixel_shuffle()\u00b6", "function_name": "pixel_shuffle", "args": [""], "kwargs": []},
{"code": "torch.nn.functional.pad(input,pad,mode='constant',value=0)\u00b6", "function_name": "pad", "args": ["input", "pad"], "kwargs": [["mode", "'constant'"], ["value", "0"]]},
{"code": "torch.nn.functional.interpolate(input,size=None,scale_factor=None,mode='nearest',align_corners=None)\u00b6", "function_name": "interpolate", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"], ["mode", "'nearest'"], ["align_corners", "None"]]},
{"code": "torch.nn.functional.upsample(input,size=None,scale_factor=None,mode='nearest',align_corners=None)\u00b6", "function_name": "upsample", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"], ["mode", "'nearest'"], ["align_corners", "None"]]},
{"code": "torch.nn.functional.upsample_nearest(input,size=None,scale_factor=None)\u00b6", "function_name": "upsample_nearest", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"]]},
{"code": "torch.nn.functional.upsample_bilinear(input,size=None,scale_factor=None)\u00b6", "function_name": "upsample_bilinear", "args": ["input"], "kwargs": [["size", "None"], ["scale_factor", "None"]]},
{"code": "torch.nn.functional.grid_sample(input,grid,mode='bilinear',padding_mode='zeros',align_corners=None)\u00b6", "function_name": "grid_sample", "args": ["input", "grid"], "kwargs": [["mode", "'bilinear'"], ["padding_mode", "'zeros'"], ["align_corners", "None"]]},
{"code": "torch.nn.functional.affine_grid(theta,size,align_corners=None)\u00b6", "function_name": "affine_grid", "args": ["theta", "size"], "kwargs": [["align_corners", "None"]]},
{"code": "torch.nn.parallel.data_parallel(module,inputs,device_ids=None,output_device=None,dim=0,module_kwargs=None)\u00b6", "function_name": "data_parallel", "args": ["module", "inputs"], "kwargs": [["device_ids", "None"], ["output_device", "None"], ["dim", "0"], ["module_kwargs", "None"]]},
{"code": "torch.is_tensor(obj)\u00b6", "function_name": "is_tensor", "args": ["obj"], "kwargs": []},
{"code": "torch.is_storage(obj)\u00b6", "function_name": "is_storage", "args": ["obj"], "kwargs": []},
{"code": "torch.is_floating_point(input)-;(bool)\u00b6", "function_name": "is_floating_point", "args": ["input"], "kwargs": []},
{"code": "torch.set_default_dtype(d)\u00b6", "function_name": "set_default_dtype", "args": ["d"], "kwargs": []},
{"code": "torch.get_default_dtype()\u2192torch.dtype\u00b6", "function_name": "get_default_dtype", "args": [""], "kwargs": []},
{"code": "torch.set_default_tensor_type(t)\u00b6", "function_name": "set_default_tensor_type", "args": ["t"], "kwargs": []},
{"code": "torch.numel(input)\u2192int\u00b6", "function_name": "numel", "args": ["input"], "kwargs": []},
{"code": "torch.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,profile=None,sci_mode=None)\u00b6", "function_name": "set_printoptions", "args": [], "kwargs": [["precision", "None"], ["threshold", "None"], ["edgeitems", "None"], ["linewidth", "None"], ["profile", "None"], ["sci_mode", "None"]]},
{"code": "torch.set_flush_denormal(mode)\u2192bool\u00b6", "function_name": "set_flush_denormal", "args": ["mode"], "kwargs": []},
{"code": "torch.tensor(data,dtype=None,device=None,requires_grad=False,pin_memory=False)\u2192Tensor\u00b6", "function_name": "tensor", "args": ["data"], "kwargs": [["dtype", "None"], ["device", "None"], ["requires_grad", "False"], ["pin_memory", "False"]]},
{"code": "torch.sparse_coo_tensor(indices,values,size=None,dtype=None,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "sparse_coo_tensor", "args": ["indices", "values"], "kwargs": [["size", "None"], ["dtype", "None"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.as_tensor(data,dtype=None,device=None)\u2192Tensor\u00b6", "function_name": "as_tensor", "args": ["data"], "kwargs": [["dtype", "None"], ["device", "None"]]},
{"code": "torch.as_strided(input,size,stride,storage_offset=0)\u2192Tensor\u00b6", "function_name": "as_strided", "args": ["input", "size", "stride"], "kwargs": [["storage_offset", "0"]]},
{"code": "torch.from_numpy(ndarray)\u2192Tensor\u00b6", "function_name": "from_numpy", "args": ["ndarray"], "kwargs": []},
{"code": "torch.zeros(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "zeros", "args": ["*size"], "kwargs": [["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.zeros_like(input,dtype=None,layout=None,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "zeros_like", "args": ["input"], "kwargs": [["dtype", "None"], ["layout", "None"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.ones(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "ones", "args": ["*size"], "kwargs": [["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.ones_like(input,dtype=None,layout=None,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "ones_like", "args": ["input"], "kwargs": [["dtype", "None"], ["layout", "None"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.arange(start=0,end,step=1,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "arange", "args": ["end"], "kwargs": [["start", "0"], ["step", "1"], ["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.range(start=0,end,step=1,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "range", "args": ["end"], "kwargs": [["start", "0"], ["step", "1"], ["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.linspace(start,end,steps=100,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "linspace", "args": ["start", "end"], "kwargs": [["steps", "100"], ["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.logspace(start,end,steps=100,base=10.0,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "logspace", "args": ["start", "end"], "kwargs": [["steps", "100"], ["base", "10.0"], ["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.eye(n,m=None,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "eye", "args": ["n"], "kwargs": [["m", "None"], ["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.empty(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False,pin_memory=False)\u2192Tensor\u00b6", "function_name": "empty", "args": ["*size"], "kwargs": [["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"], ["pin_memory", "False"]]},
{"code": "torch.empty_like(input,dtype=None,layout=None,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "empty_like", "args": ["input"], "kwargs": [["dtype", "None"], ["layout", "None"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.empty_strided(size,stride,dtype=None,layout=None,device=None,requires_grad=False,pin_memory=False)\u2192Tensor\u00b6", "function_name": "empty_strided", "args": ["size", "stride"], "kwargs": [["dtype", "None"], ["layout", "None"], ["device", "None"], ["requires_grad", "False"], ["pin_memory", "False"]]},
{"code": "torch.full(size,fill_value,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "full", "args": ["size", "fill_value"], "kwargs": [["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.full_like(input,fill_value,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "full_like", "args": ["input", "fill_value"], "kwargs": [["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.quantize_per_tensor(input,scale,zero_point,dtype)\u2192Tensor\u00b6", "function_name": "quantize_per_tensor", "args": ["input", "scale", "zero_point", "dtype"], "kwargs": []},
{"code": "torch.quantize_per_channel(input,scales,zero_points,axis,dtype)\u2192Tensor\u00b6", "function_name": "quantize_per_channel", "args": ["input", "scales", "zero_points", "axis", "dtype"], "kwargs": []},
{"code": "torch.cat(tensors,dim=0,out=None)\u2192Tensor\u00b6", "function_name": "cat", "args": ["tensors"], "kwargs": [["dim", "0"], ["out", "None"]]},
{"code": "torch.chunk(input,chunks,dim=0)\u2192ListofTensors\u00b6", "function_name": "chunk", "args": ["input", "chunks"], "kwargs": [["dim", "0"]]},
{"code": "torch.gather(input,dim,index,out=None,sparse_grad=False)\u2192Tensor\u00b6", "function_name": "gather", "args": ["input", "dim", "index"], "kwargs": [["out", "None"], ["sparse_grad", "False"]]},
{"code": "torch.index_select(input,dim,index,out=None)\u2192Tensor\u00b6", "function_name": "index_select", "args": ["input", "dim", "index"], "kwargs": [["out", "None"]]},
{"code": "torch.masked_select(input,mask,out=None)\u2192Tensor\u00b6", "function_name": "masked_select", "args": ["input", "mask"], "kwargs": [["out", "None"]]},
{"code": "torch.narrow(input,dim,start,length)\u2192Tensor\u00b6", "function_name": "narrow", "args": ["input", "dim", "start", "length"], "kwargs": []},
{"code": "torch.nonzero(input,*,out=None,as_tuple=False)\u2192LongTensorortupleofLongTensors\u00b6", "function_name": "nonzero", "args": ["input", "*"], "kwargs": [["out", "None"], ["as_tuple", "False"]]},
{"code": "torch.reshape(input,shape)\u2192Tensor\u00b6", "function_name": "reshape", "args": ["input", "shape"], "kwargs": []},
{"code": "torch.split(tensor,split_size_or_sections,dim=0)\u00b6", "function_name": "split", "args": ["tensor", "split_size_or_sections"], "kwargs": [["dim", "0"]]},
{"code": "torch.squeeze(input,dim=None,out=None)\u2192Tensor\u00b6", "function_name": "squeeze", "args": ["input"], "kwargs": [["dim", "None"], ["out", "None"]]},
{"code": "torch.stack(tensors,dim=0,out=None)\u2192Tensor\u00b6", "function_name": "stack", "args": ["tensors"], "kwargs": [["dim", "0"], ["out", "None"]]},
{"code": "torch.t(input)\u2192Tensor\u00b6", "function_name": "t", "args": ["input"], "kwargs": []},
{"code": "torch.take(input,index)\u2192Tensor\u00b6", "function_name": "take", "args": ["input", "index"], "kwargs": []},
{"code": "torch.transpose(input,dim0,dim1)\u2192Tensor\u00b6", "function_name": "transpose", "args": ["input", "dim0", "dim1"], "kwargs": []},
{"code": "torch.unbind(input,dim=0)\u2192seq\u00b6", "function_name": "unbind", "args": ["input"], "kwargs": [["dim", "0"]]},
{"code": "torch.unsqueeze(input,dim,out=None)\u2192Tensor\u00b6", "function_name": "unsqueeze", "args": ["input", "dim"], "kwargs": [["out", "None"]]},
{"code": "torch.where(condition)\u2192tupleofLongTensor", "function_name": "where", "args": ["condition"], "kwargs": []},
{"code": "torch.seed()\u00b6", "function_name": "seed", "args": [""], "kwargs": []},
{"code": "torch.manual_seed(seed)\u00b6", "function_name": "manual_seed", "args": ["seed"], "kwargs": []},
{"code": "torch.initial_seed()\u00b6", "function_name": "initial_seed", "args": [""], "kwargs": []},
{"code": "torch.get_rng_state()\u00b6", "function_name": "get_rng_state", "args": [""], "kwargs": []},
{"code": "torch.set_rng_state(new_state)\u00b6", "function_name": "set_rng_state", "args": ["new_state"], "kwargs": []},
{"code": "torch.bernoulli(input,*,generator=None,out=None)\u2192Tensor\u00b6", "function_name": "bernoulli", "args": ["input", "*"], "kwargs": [["generator", "None"], ["out", "None"]]},
{"code": "torch.multinomial(input,num_samples,replacement=False,*,generator=None,out=None)\u2192LongTensor\u00b6", "function_name": "multinomial", "args": ["input", "num_samples", "*"], "kwargs": [["replacement", "False"], ["generator", "None"], ["out", "None"]]},
{"code": "torch.normal(mean,std,size,*,out=None)\u2192Tensor", "function_name": "normal", "args": ["mean", "std", "size", "*"], "kwargs": [["out", "None"]]},
{"code": "torch.rand(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "rand", "args": ["*size"], "kwargs": [["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.rand_like(input,dtype=None,layout=None,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "rand_like", "args": ["input"], "kwargs": [["dtype", "None"], ["layout", "None"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.randint(low=0,high,size,*,generator=None,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "randint", "args": ["high", "size", "*"], "kwargs": [["low", "0"], ["generator", "None"], ["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.randint_like(input,low=0,high,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "randint_like", "args": ["input", "high"], "kwargs": [["low", "0"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.randn(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "randn", "args": ["*size"], "kwargs": [["out", "None"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.randn_like(input,dtype=None,layout=None,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "randn_like", "args": ["input"], "kwargs": [["dtype", "None"], ["layout", "None"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.randperm(n,out=None,dtype=torch.int64,layout=torch.strided,device=None,requires_grad=False)\u2192LongTensor\u00b6", "function_name": "randperm", "args": ["n"], "kwargs": [["out", "None"], ["dtype", "torch.int64"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.get_num_threads()\u2192int\u00b6", "function_name": "get_num_threads", "args": [""], "kwargs": []},
{"code": "torch.set_num_threads(int)\u00b6", "function_name": "set_num_threads", "args": ["int"], "kwargs": []},
{"code": "torch.get_num_interop_threads()\u2192int\u00b6", "function_name": "get_num_interop_threads", "args": [""], "kwargs": []},
{"code": "torch.set_num_interop_threads(int)\u00b6", "function_name": "set_num_interop_threads", "args": ["int"], "kwargs": []},
{"code": "torch.abs(input,out=None)\u2192Tensor\u00b6", "function_name": "abs", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.acos(input,out=None)\u2192Tensor\u00b6", "function_name": "acos", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.add(input,alpha=1,other,out=None)", "function_name": "add", "args": ["input", "other"], "kwargs": [["alpha", "1"], ["out", "None"]]},
{"code": "torch.addcdiv(input,value=1,tensor1,tensor2,out=None)\u2192Tensor\u00b6", "function_name": "addcdiv", "args": ["input", "tensor1", "tensor2"], "kwargs": [["value", "1"], ["out", "None"]]},
{"code": "torch.addcmul(input,value=1,tensor1,tensor2,out=None)\u2192Tensor\u00b6", "function_name": "addcmul", "args": ["input", "tensor1", "tensor2"], "kwargs": [["value", "1"], ["out", "None"]]},
{"code": "torch.angle(input,out=None)\u2192Tensor\u00b6", "function_name": "angle", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.asin(input,out=None)\u2192Tensor\u00b6", "function_name": "asin", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.atan(input,out=None)\u2192Tensor\u00b6", "function_name": "atan", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.atan2(input,other,out=None)\u2192Tensor\u00b6", "function_name": "atan2", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.bitwise_not(input,out=None)\u2192Tensor\u00b6", "function_name": "bitwise_not", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.bitwise_xor(input,other,out=None)\u2192Tensor\u00b6", "function_name": "bitwise_xor", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.ceil(input,out=None)\u2192Tensor\u00b6", "function_name": "ceil", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.clamp(input,*,max,out=None)\u2192Tensor", "function_name": "clamp", "args": ["input", "*", "max"], "kwargs": [["out", "None"]]},
{"code": "torch.conj(input,out=None)\u2192Tensor\u00b6", "function_name": "conj", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.cos(input,out=None)\u2192Tensor\u00b6", "function_name": "cos", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.cosh(input,out=None)\u2192Tensor\u00b6", "function_name": "cosh", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.div(input,other,out=None)\u2192Tensor", "function_name": "div", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.digamma(input,out=None)\u2192Tensor\u00b6", "function_name": "digamma", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.erf(input,out=None)\u2192Tensor\u00b6", "function_name": "erf", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.erfc(input,out=None)\u2192Tensor\u00b6", "function_name": "erfc", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.erfinv(input,out=None)\u2192Tensor\u00b6", "function_name": "erfinv", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.exp(input,out=None)\u2192Tensor\u00b6", "function_name": "exp", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.expm1(input,out=None)\u2192Tensor\u00b6", "function_name": "expm1", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.floor(input,out=None)\u2192Tensor\u00b6", "function_name": "floor", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.fmod(input,other,out=None)\u2192Tensor\u00b6", "function_name": "fmod", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.frac(input,out=None)\u2192Tensor\u00b6", "function_name": "frac", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.imag(input,out=None)\u2192Tensor\u00b6", "function_name": "imag", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.lerp(input,end,weight,out=None)\u00b6", "function_name": "lerp", "args": ["input", "end", "weight"], "kwargs": [["out", "None"]]},
{"code": "torch.lgamma(input,out=None)\u2192Tensor\u00b6", "function_name": "lgamma", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.log(input,out=None)\u2192Tensor\u00b6", "function_name": "log", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.log10(input,out=None)\u2192Tensor\u00b6", "function_name": "log10", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.log1p(input,out=None)\u2192Tensor\u00b6", "function_name": "log1p", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.log2(input,out=None)\u2192Tensor\u00b6", "function_name": "log2", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.logical_not(input,out=None)\u2192Tensor\u00b6", "function_name": "logical_not", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.logical_xor(input,other,out=None)\u2192Tensor\u00b6", "function_name": "logical_xor", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.mul(input,other,out=None)", "function_name": "mul", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.mvlgamma(input,p)\u2192Tensor\u00b6", "function_name": "mvlgamma", "args": ["input", "p"], "kwargs": []},
{"code": "torch.neg(input,out=None)\u2192Tensor\u00b6", "function_name": "neg", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.polygamma(n,input,out=None)\u2192Tensor\u00b6", "function_name": "polygamma", "args": ["n", "input"], "kwargs": [["out", "None"]]},
{"code": "torch.pow(self,exponent,out=None)\u2192Tensor", "function_name": "pow", "args": ["self", "exponent"], "kwargs": [["out", "None"]]},
{"code": "torch.real(input,out=None)\u2192Tensor\u00b6", "function_name": "real", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.reciprocal(input,out=None)\u2192Tensor\u00b6", "function_name": "reciprocal", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.remainder(input,other,out=None)\u2192Tensor\u00b6", "function_name": "remainder", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.round(input,out=None)\u2192Tensor\u00b6", "function_name": "round", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.rsqrt(input,out=None)\u2192Tensor\u00b6", "function_name": "rsqrt", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.sigmoid(input,out=None)\u2192Tensor\u00b6", "function_name": "sigmoid", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.sign(input,out=None)\u2192Tensor\u00b6", "function_name": "sign", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.sin(input,out=None)\u2192Tensor\u00b6", "function_name": "sin", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.sinh(input,out=None)\u2192Tensor\u00b6", "function_name": "sinh", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.sqrt(input,out=None)\u2192Tensor\u00b6", "function_name": "sqrt", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.tan(input,out=None)\u2192Tensor\u00b6", "function_name": "tan", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.tanh(input,out=None)\u2192Tensor\u00b6", "function_name": "tanh", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.trunc(input,out=None)\u2192Tensor\u00b6", "function_name": "trunc", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.argmax(input,dim,keepdim=False)\u2192LongTensor", "function_name": "argmax", "args": ["input", "dim"], "kwargs": [["keepdim", "False"]]},
{"code": "torch.argmin(input,dim,keepdim=False,out=None)\u2192LongTensor", "function_name": "argmin", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["out", "None"]]},
{"code": "torch.dist(input,other,p=2)\u2192Tensor\u00b6", "function_name": "dist", "args": ["input", "other"], "kwargs": [["p", "2"]]},
{"code": "torch.logsumexp(input,dim,keepdim=False,out=None)\u00b6", "function_name": "logsumexp", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["out", "None"]]},
{"code": "torch.mean(input,dim,keepdim=False,out=None)\u2192Tensor", "function_name": "mean", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["out", "None"]]},
{"code": "torch.median(input,dim=-1,keepdim=False,values=None,indices=None)-;(Tensor,LongTensor)", "function_name": "median", "args": ["input"], "kwargs": [["dim", "-1"], ["keepdim", "False"], ["values", "None"], ["indices", "None"]]},
{"code": "torch.mode(input,dim=-1,keepdim=False,values=None,indices=None)-;(Tensor,LongTensor)\u00b6", "function_name": "mode", "args": ["input"], "kwargs": [["dim", "-1"], ["keepdim", "False"], ["values", "None"], ["indices", "None"]]},
{"code": "torch.norm(input,p='fro',dim=None,keepdim=False,out=None,dtype=None)\u00b6", "function_name": "norm", "args": ["input"], "kwargs": [["p", "'fro'"], ["dim", "None"], ["keepdim", "False"], ["out", "None"], ["dtype", "None"]]},
{"code": "torch.prod(input,dim,keepdim=False,dtype=None)\u2192Tensor", "function_name": "prod", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["dtype", "None"]]},
{"code": "torch.std(input,dim,keepdim=False,unbiased=True)-;(Tensor,Tensor)", "function_name": "std", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["unbiased", "True"]]},
{"code": "torch.std_mean(input,unbiased=True)-;(Tensor,Tensor)", "function_name": "std_mean", "args": ["input"], "kwargs": [["unbiased", "True"]]},
{"code": "torch.sum(input,dim,keepdim=False,dtype=None)\u2192Tensor", "function_name": "sum", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["dtype", "None"]]},
{"code": "torch.unique(input,sorted=True,return_inverse=False,return_counts=False,dim=None)\u00b6", "function_name": "unique", "args": ["input"], "kwargs": [["sorted", "True"], ["return_inverse", "False"], ["return_counts", "False"], ["dim", "None"]]},
{"code": "torch.unique_consecutive(input,return_inverse=False,return_counts=False,dim=None)\u00b6", "function_name": "unique_consecutive", "args": ["input"], "kwargs": [["return_inverse", "False"], ["return_counts", "False"], ["dim", "None"]]},
{"code": "torch.var(input,dim,keepdim=False,unbiased=True,out=None)\u2192Tensor", "function_name": "var", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["unbiased", "True"], ["out", "None"]]},
{"code": "torch.var_mean(input,dim,keepdim=False,unbiased=True)-;(Tensor,Tensor)", "function_name": "var_mean", "args": ["input", "dim"], "kwargs": [["keepdim", "False"], ["unbiased", "True"]]},
{"code": "torch.allclose(input,other,rtol=1e-05,atol=1e-08,equal_nan=False)\u2192bool\u00b6", "function_name": "allclose", "args": ["input", "other"], "kwargs": [["rtol", "1e-05"], ["atol", "1e-08"], ["equal_nan", "False"]]},
{"code": "torch.argsort(input,dim=-1,descending=False,out=None)\u2192LongTensor\u00b6", "function_name": "argsort", "args": ["input"], "kwargs": [["dim", "-1"], ["descending", "False"], ["out", "None"]]},
{"code": "torch.eq(input,other,out=None)\u2192Tensor\u00b6", "function_name": "eq", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.equal(input,other)\u2192bool\u00b6", "function_name": "equal", "args": ["input", "other"], "kwargs": []},
{"code": "torch.ge(input,other,out=None)\u2192Tensor\u00b6", "function_name": "ge", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.gt(input,other,out=None)\u2192Tensor\u00b6", "function_name": "gt", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.isfinite()\u00b6", "function_name": "isfinite", "args": [""], "kwargs": []},
{"code": "torch.isinf(tensor)\u00b6", "function_name": "isinf", "args": ["tensor"], "kwargs": []},
{"code": "torch.isnan()\u00b6", "function_name": "isnan", "args": [""], "kwargs": []},
{"code": "torch.kthvalue(input,k,dim=None,keepdim=False,out=None)-;(Tensor,LongTensor)\u00b6", "function_name": "kthvalue", "args": ["input", "k"], "kwargs": [["dim", "None"], ["keepdim", "False"], ["out", "None"]]},
{"code": "torch.le(input,other,out=None)\u2192Tensor\u00b6", "function_name": "le", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.lt(input,other,out=None)\u2192Tensor\u00b6", "function_name": "lt", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.max(input,other,out=None)\u2192Tensor", "function_name": "max", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.min(input,other,out=None)\u2192Tensor", "function_name": "min", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.ne(input,other,out=None)\u2192Tensor\u00b6", "function_name": "ne", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.sort(input,dim=-1,descending=False,out=None)-;(Tensor,LongTensor)\u00b6", "function_name": "sort", "args": ["input"], "kwargs": [["dim", "-1"], ["descending", "False"], ["out", "None"]]},
{"code": "torch.topk(input,k,dim=None,largest=True,sorted=True,out=None)-;(Tensor,LongTensor)\u00b6", "function_name": "topk", "args": ["input", "k"], "kwargs": [["dim", "None"], ["largest", "True"], ["sorted", "True"], ["out", "None"]]},
{"code": "torch.fft(input,signal_ndim,normalized=False)\u2192Tensor\u00b6", "function_name": "fft", "args": ["input", "signal_ndim"], "kwargs": [["normalized", "False"]]},
{"code": "torch.ifft(input,signal_ndim,normalized=False)\u2192Tensor\u00b6", "function_name": "ifft", "args": ["input", "signal_ndim"], "kwargs": [["normalized", "False"]]},
{"code": "torch.rfft(input,signal_ndim,normalized=False,onesided=True)\u2192Tensor\u00b6", "function_name": "rfft", "args": ["input", "signal_ndim"], "kwargs": [["normalized", "False"], ["onesided", "True"]]},
{"code": "torch.irfft(input,signal_ndim,normalized=False,onesided=True,signal_sizes=None)\u2192Tensor\u00b6", "function_name": "irfft", "args": ["input", "signal_ndim"], "kwargs": [["normalized", "False"], ["onesided", "True"], ["signal_sizes", "None"]]},
{"code": "torch.stft(input,n_fft,hop_length=None,win_length=None,window=None,center=True,pad_mode='reflect',normalized=False,onesided=True)\u00b6", "function_name": "stft", "args": ["input", "n_fft"], "kwargs": [["hop_length", "None"], ["win_length", "None"], ["window", "None"], ["center", "True"], ["pad_mode", "'reflect'"], ["normalized", "False"], ["onesided", "True"]]},
{"code": "torch.bartlett_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "bartlett_window", "args": ["window_length"], "kwargs": [["periodic", "True"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.blackman_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "blackman_window", "args": ["window_length"], "kwargs": [["periodic", "True"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.hamming_window(window_length,periodic=True,alpha=0.54,beta=0.46,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "hamming_window", "args": ["window_length"], "kwargs": [["periodic", "True"], ["alpha", "0.54"], ["beta", "0.46"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.hann_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)\u2192Tensor\u00b6", "function_name": "hann_window", "args": ["window_length"], "kwargs": [["periodic", "True"], ["dtype", "None"], ["layout", "torch.strided"], ["device", "None"], ["requires_grad", "False"]]},
{"code": "torch.bincount(input,weights=None,minlength=0)\u2192Tensor\u00b6", "function_name": "bincount", "args": ["input"], "kwargs": [["weights", "None"], ["minlength", "0"]]},
{"code": "torch.broadcast_tensors(*tensors)\u2192ListofTensors\u00b6", "function_name": "broadcast_tensors", "args": ["*tensors"], "kwargs": []},
{"code": "torch.cartesian_prod(*tensors)\u00b6", "function_name": "cartesian_prod", "args": ["*tensors"], "kwargs": []},
{"code": "torch.cdist(x1,x2,p=2,compute_mode='use_mm_for_euclid_dist_if_necessary')\u00b6", "function_name": "cdist", "args": ["x1", "x2"], "kwargs": [["p", "2"], ["compute_mode", "'use_mm_for_euclid_dist_if_necessary'"]]},
{"code": "torch.combinations(input,r=2,with_replacement=False)\u2192seq\u00b6", "function_name": "combinations", "args": ["input"], "kwargs": [["r", "2"], ["with_replacement", "False"]]},
{"code": "torch.cross(input,other,dim=-1,out=None)\u2192Tensor\u00b6", "function_name": "cross", "args": ["input", "other"], "kwargs": [["dim", "-1"], ["out", "None"]]},
{"code": "torch.cumprod(input,dim,out=None,dtype=None)\u2192Tensor\u00b6", "function_name": "cumprod", "args": ["input", "dim"], "kwargs": [["out", "None"], ["dtype", "None"]]},
{"code": "torch.cumsum(input,dim,out=None,dtype=None)\u2192Tensor\u00b6", "function_name": "cumsum", "args": ["input", "dim"], "kwargs": [["out", "None"], ["dtype", "None"]]},
{"code": "torch.diag(input,diagonal=0,out=None)\u2192Tensor\u00b6", "function_name": "diag", "args": ["input"], "kwargs": [["diagonal", "0"], ["out", "None"]]},
{"code": "torch.diag_embed(input,offset=0,dim1=-2,dim2=-1)\u2192Tensor\u00b6", "function_name": "diag_embed", "args": ["input"], "kwargs": [["offset", "0"], ["dim1", "-2"], ["dim2", "-1"]]},
{"code": "torch.diagflat(input,offset=0)\u2192Tensor\u00b6", "function_name": "diagflat", "args": ["input"], "kwargs": [["offset", "0"]]},
{"code": "torch.diagonal(input,offset=0,dim1=0,dim2=1)\u2192Tensor\u00b6", "function_name": "diagonal", "args": ["input"], "kwargs": [["offset", "0"], ["dim1", "0"], ["dim2", "1"]]},
{"code": "torch.einsum(equation,*operands)\u2192Tensor\u00b6", "function_name": "einsum", "args": ["equation", "*operands"], "kwargs": []},
{"code": "torch.flatten(input,start_dim=0,end_dim=-1)\u2192Tensor\u00b6", "function_name": "flatten", "args": ["input"], "kwargs": [["start_dim", "0"], ["end_dim", "-1"]]},
{"code": "torch.flip(input,dims)\u2192Tensor\u00b6", "function_name": "flip", "args": ["input", "dims"], "kwargs": []},
{"code": "torch.rot90(input,k,dims)\u2192Tensor\u00b6", "function_name": "rot90", "args": ["input", "k", "dims"], "kwargs": []},
{"code": "torch.histc(input,bins=100,min=0,max=0,out=None)\u2192Tensor\u00b6", "function_name": "histc", "args": ["input"], "kwargs": [["bins", "100"], ["min", "0"], ["max", "0"], ["out", "None"]]},
{"code": "torch.meshgrid(*tensors,**kwargs)\u00b6", "function_name": "meshgrid", "args": ["*tensors", "**kwargs"], "kwargs": []},
{"code": "torch.renorm(input,p,dim,maxnorm,out=None)\u2192Tensor\u00b6", "function_name": "renorm", "args": ["input", "p", "dim", "maxnorm"], "kwargs": [["out", "None"]]},
{"code": "torch.repeat_interleave(repeats)\u2192Tensor", "function_name": "repeat_interleave", "args": ["repeats"], "kwargs": []},
{"code": "torch.roll(input,shifts,dims=None)\u2192Tensor\u00b6", "function_name": "roll", "args": ["input", "shifts"], "kwargs": [["dims", "None"]]},
{"code": "torch.tensordot(a,b,dims=2)\u00b6", "function_name": "tensordot", "args": ["a", "b"], "kwargs": [["dims", "2"]]},
{"code": "torch.trace(input)\u2192Tensor\u00b6", "function_name": "trace", "args": ["input"], "kwargs": []},
{"code": "torch.tril(input,diagonal=0,out=None)\u2192Tensor\u00b6", "function_name": "tril", "args": ["input"], "kwargs": [["diagonal", "0"], ["out", "None"]]},
{"code": "torch.tril_indices(row,col,offset=0,dtype=torch.long,device='cpu',layout=torch.strided)\u2192Tensor\u00b6", "function_name": "tril_indices", "args": ["row", "col"], "kwargs": [["offset", "0"], ["dtype", "torch.long"], ["device", "'cpu'"], ["layout", "torch.strided"]]},
{"code": "torch.triu(input,diagonal=0,out=None)\u2192Tensor\u00b6", "function_name": "triu", "args": ["input"], "kwargs": [["diagonal", "0"], ["out", "None"]]},
{"code": "torch.triu_indices(row,col,offset=0,dtype=torch.long,device='cpu',layout=torch.strided)\u2192Tensor\u00b6", "function_name": "triu_indices", "args": ["row", "col"], "kwargs": [["offset", "0"], ["dtype", "torch.long"], ["device", "'cpu'"], ["layout", "torch.strided"]]},
{"code": "torch.addbmm(beta=1,input,alpha=1,batch1,batch2,out=None)\u2192Tensor\u00b6", "function_name": "addbmm", "args": ["input", "batch1", "batch2"], "kwargs": [["beta", "1"], ["alpha", "1"], ["out", "None"]]},
{"code": "torch.addmm(beta=1,input,alpha=1,mat1,mat2,out=None)\u2192Tensor\u00b6", "function_name": "addmm", "args": ["input", "mat1", "mat2"], "kwargs": [["beta", "1"], ["alpha", "1"], ["out", "None"]]},
{"code": "torch.addmv(beta=1,input,alpha=1,mat,vec,out=None)\u2192Tensor\u00b6", "function_name": "addmv", "args": ["input", "mat", "vec"], "kwargs": [["beta", "1"], ["alpha", "1"], ["out", "None"]]},
{"code": "torch.addr(beta=1,input,alpha=1,vec1,vec2,out=None)\u2192Tensor\u00b6", "function_name": "addr", "args": ["input", "vec1", "vec2"], "kwargs": [["beta", "1"], ["alpha", "1"], ["out", "None"]]},
{"code": "torch.baddbmm(beta=1,input,alpha=1,batch1,batch2,out=None)\u2192Tensor\u00b6", "function_name": "baddbmm", "args": ["input", "batch1", "batch2"], "kwargs": [["beta", "1"], ["alpha", "1"], ["out", "None"]]},
{"code": "torch.bmm(input,mat2,out=None)\u2192Tensor\u00b6", "function_name": "bmm", "args": ["input", "mat2"], "kwargs": [["out", "None"]]},
{"code": "torch.chain_matmul(*matrices)\u00b6", "function_name": "chain_matmul", "args": ["*matrices"], "kwargs": []},
{"code": "torch.cholesky(input,upper=False,out=None)\u2192Tensor\u00b6", "function_name": "cholesky", "args": ["input"], "kwargs": [["upper", "False"], ["out", "None"]]},
{"code": "torch.cholesky_inverse(input,upper=False,out=None)\u2192Tensor\u00b6", "function_name": "cholesky_inverse", "args": ["input"], "kwargs": [["upper", "False"], ["out", "None"]]},
{"code": "torch.cholesky_solve(input,input2,upper=False,out=None)\u2192Tensor\u00b6", "function_name": "cholesky_solve", "args": ["input", "input2"], "kwargs": [["upper", "False"], ["out", "None"]]},
{"code": "torch.dot(input,tensor)\u2192Tensor\u00b6", "function_name": "dot", "args": ["input", "tensor"], "kwargs": []},
{"code": "torch.eig(input,eigenvectors=False,out=None)-;(Tensor,Tensor)\u00b6", "function_name": "eig", "args": ["input"], "kwargs": [["eigenvectors", "False"], ["out", "None"]]},
{"code": "torch.geqrf(input,out=None)-;(Tensor,Tensor)\u00b6", "function_name": "geqrf", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.ger(input,vec2,out=None)\u2192Tensor\u00b6", "function_name": "ger", "args": ["input", "vec2"], "kwargs": [["out", "None"]]},
{"code": "torch.inverse(input,out=None)\u2192Tensor\u00b6", "function_name": "inverse", "args": ["input"], "kwargs": [["out", "None"]]},
{"code": "torch.det(input)\u2192Tensor\u00b6", "function_name": "det", "args": ["input"], "kwargs": []},
{"code": "torch.logdet(input)\u2192Tensor\u00b6", "function_name": "logdet", "args": ["input"], "kwargs": []},
{"code": "torch.slogdet(input)-;(Tensor,Tensor)\u00b6", "function_name": "slogdet", "args": ["input"], "kwargs": []},
{"code": "torch.lstsq(input,A,out=None)\u2192Tensor\u00b6", "function_name": "lstsq", "args": ["input", "A"], "kwargs": [["out", "None"]]},
{"code": "torch.lu(A,pivot=True,get_infos=False,out=None)\u00b6", "function_name": "lu", "args": ["A"], "kwargs": [["pivot", "True"], ["get_infos", "False"], ["out", "None"]]},
{"code": "torch.lu_solve(input,LU_data,LU_pivots,out=None)\u2192Tensor\u00b6", "function_name": "lu_solve", "args": ["input", "LU_data", "LU_pivots"], "kwargs": [["out", "None"]]},
{"code": "torch.lu_unpack(LU_data,LU_pivots,unpack_data=True,unpack_pivots=True)\u00b6", "function_name": "lu_unpack", "args": ["LU_data", "LU_pivots"], "kwargs": [["unpack_data", "True"], ["unpack_pivots", "True"]]},
{"code": "torch.matmul(input,other,out=None)\u2192Tensor\u00b6", "function_name": "matmul", "args": ["input", "other"], "kwargs": [["out", "None"]]},
{"code": "torch.matrix_power(input,n)\u2192Tensor\u00b6", "function_name": "matrix_power", "args": ["input", "n"], "kwargs": []},
{"code": "torch.matrix_rank(input,tol=None,symmetric=False)\u2192Tensor\u00b6", "function_name": "matrix_rank", "args": ["input"], "kwargs": [["tol", "None"], ["symmetric", "False"]]},
{"code": "torch.mm(input,mat2,out=None)\u2192Tensor\u00b6", "function_name": "mm", "args": ["input", "mat2"], "kwargs": [["out", "None"]]},
{"code": "torch.mv(input,vec,out=None)\u2192Tensor\u00b6", "function_name": "mv", "args": ["input", "vec"], "kwargs": [["out", "None"]]},
{"code": "torch.orgqr(input,input2)\u2192Tensor\u00b6", "function_name": "orgqr", "args": ["input", "input2"], "kwargs": []},
{"code": "torch.ormqr(input,input2,input3,left=True,transpose=False)\u2192Tensor\u00b6", "function_name": "ormqr", "args": ["input", "input2", "input3"], "kwargs": [["left", "True"], ["transpose", "False"]]},
{"code": "torch.pinverse(input,rcond=1e-15)\u2192Tensor\u00b6", "function_name": "pinverse", "args": ["input"], "kwargs": [["rcond", "1e-15"]]},
{"code": "torch.qr(input,some=True,out=None)-;(Tensor,Tensor)\u00b6", "function_name": "qr", "args": ["input"], "kwargs": [["some", "True"], ["out", "None"]]},
{"code": "torch.solve(input,A,out=None)-;(Tensor,Tensor)\u00b6", "function_name": "solve", "args": ["input", "A"], "kwargs": [["out", "None"]]},
{"code": "torch.svd(input,some=True,compute_uv=True,out=None)-;(Tensor,Tensor,Tensor)\u00b6", "function_name": "svd", "args": ["input"], "kwargs": [["some", "True"], ["compute_uv", "True"], ["out", "None"]]},
{"code": "torch.symeig(input,eigenvectors=False,upper=True,out=None)-;(Tensor,Tensor)\u00b6", "function_name": "symeig", "args": ["input"], "kwargs": [["eigenvectors", "False"], ["upper", "True"], ["out", "None"]]},
{"code": "torch.trapz(y,*,dx=1,dim=-1)\u2192Tensor", "function_name": "trapz", "args": ["y", "*"], "kwargs": [["dx", "1"], ["dim", "-1"]]},
{"code": "torch.triangular_solve(input,A,upper=True,transpose=False,unitriangular=False)-;(Tensor,Tensor)\u00b6", "function_name": "triangular_solve", "args": ["input", "A"], "kwargs": [["upper", "True"], ["transpose", "False"], ["unitriangular", "False"]]},
{"code": "torch.compiled_with_cxx11_abi()\u00b6", "function_name": "compiled_with_cxx11_abi", "args": [""], "kwargs": []},
{"code": "torch.result_type(tensor1,tensor2)\u2192dtype\u00b6", "function_name": "result_type", "args": ["tensor1", "tensor2"], "kwargs": []},
{"code": "torch.can_cast(from,to)\u2192bool\u00b6", "function_name": "can_cast", "args": ["from", "to"], "kwargs": []},
{"code": "torch.promote_types(type1,type2)\u2192dtype\u00b6", "function_name": "promote_types", "args": ["type1", "type2"], "kwargs": []},
{"code": "to(tensor,non_blocking=False)", "function_name": "to", "args": ["tensor"], "kwargs": [["non_blocking", "False"]]},
{"code": "torch.nn.utils.clip_grad_norm_(parameters,max_norm,norm_type=2)\u00b6", "function_name": "clip_grad_norm_", "args": ["parameters", "max_norm"], "kwargs": [["norm_type", "2"]]},
{"code": "torch.nn.utils.clip_grad_value_(parameters,clip_value)\u00b6", "function_name": "clip_grad_value_", "args": ["parameters", "clip_value"], "kwargs": []},
{"code": "torch.nn.utils.parameters_to_vector(parameters)\u00b6", "function_name": "parameters_to_vector", "args": ["parameters"], "kwargs": []},
{"code": "torch.nn.utils.vector_to_parameters(vec,parameters)\u00b6", "function_name": "vector_to_parameters", "args": ["vec", "parameters"], "kwargs": []},
{"code": "torch.nn.utils.prune.identity(module,name)\u00b6", "function_name": "identity", "args": ["module", "name"], "kwargs": []},
{"code": "torch.nn.utils.prune.random_unstructured(module,name,amount)\u00b6", "function_name": "random_unstructured", "args": ["module", "name", "amount"], "kwargs": []},
{"code": "torch.nn.utils.prune.l1_unstructured(module,name,amount)\u00b6", "function_name": "l1_unstructured", "args": ["module", "name", "amount"], "kwargs": []},
{"code": "torch.nn.utils.prune.random_structured(module,name,amount,dim)\u00b6", "function_name": "random_structured", "args": ["module", "name", "amount", "dim"], "kwargs": []},
{"code": "torch.nn.utils.prune.ln_structured(module,name,amount,n,dim)\u00b6", "function_name": "ln_structured", "args": ["module", "name", "amount", "n", "dim"], "kwargs": []},
{"code": "torch.nn.utils.prune.global_unstructured(parameters,pruning_method,**kwargs)\u00b6", "function_name": "global_unstructured", "args": ["parameters", "pruning_method", "**kwargs"], "kwargs": []},
{"code": "torch.nn.utils.prune.custom_from_mask(module,name,mask)\u00b6", "function_name": "custom_from_mask", "args": ["module", "name", "mask"], "kwargs": []},
{"code": "torch.nn.utils.prune.remove(module,name)\u00b6", "function_name": "remove", "args": ["module", "name"], "kwargs": []},
{"code": "torch.nn.utils.prune.is_pruned(module)\u00b6", "function_name": "is_pruned", "args": ["module"], "kwargs": []},
{"code": "torch.nn.utils.weight_norm(module,name='weight',dim=0)\u00b6", "function_name": "weight_norm", "args": ["module"], "kwargs": [["name", "'weight'"], ["dim", "0"]]},
{"code": "torch.nn.utils.remove_weight_norm(module,name='weight')\u00b6", "function_name": "remove_weight_norm", "args": ["module"], "kwargs": [["name", "'weight'"]]},
{"code": "torch.nn.utils.spectral_norm(module,name='weight',n_power_iterations=1,eps=1e-12,dim=None)\u00b6", "function_name": "spectral_norm", "args": ["module"], "kwargs": [["name", "'weight'"], ["n_power_iterations", "1"], ["eps", "1e-12"], ["dim", "None"]]},
{"code": "torch.nn.utils.remove_spectral_norm(module,name='weight')\u00b6", "function_name": "remove_spectral_norm", "args": ["module"], "kwargs": [["name", "'weight'"]]},
{"code": "torch.nn.utils.rnn.PackedSequence(data,batch_sizes=None,sorted_indices=None,unsorted_indices=None)\u00b6", "function_name": "PackedSequence", "args": ["data"], "kwargs": [["batch_sizes", "None"], ["sorted_indices", "None"], ["unsorted_indices", "None"]]},
{"code": "torch.nn.utils.rnn.pack_padded_sequence(input,lengths,batch_first=False,enforce_sorted=True)\u00b6", "function_name": "pack_padded_sequence", "args": ["input", "lengths"], "kwargs": [["batch_first", "False"], ["enforce_sorted", "True"]]},
{"code": "torch.nn.utils.rnn.pad_packed_sequence(sequence,batch_first=False,padding_value=0.0,total_length=None)\u00b6", "function_name": "pad_packed_sequence", "args": ["sequence"], "kwargs": [["batch_first", "False"], ["padding_value", "0.0"], ["total_length", "None"]]},
{"code": "torch.nn.utils.rnn.pad_sequence(sequences,batch_first=False,padding_value=0)\u00b6", "function_name": "pad_sequence", "args": ["sequences"], "kwargs": [["batch_first", "False"], ["padding_value", "0"]]},
{"code": "torch.nn.utils.rnn.pack_sequence(sequences,enforce_sorted=True)\u00b6", "function_name": "pack_sequence", "args": ["sequences"], "kwargs": [["enforce_sorted", "True"]]}
]