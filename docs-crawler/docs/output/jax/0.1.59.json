[{
    "code": "jax.dlpack.from_dlpack(dlpack,backend=None)\u00b6",
    "function_name": "from_dlpack",
    "args": ["dlpack"],
    "kwargs": [
      ["backend", "None"]
    ]
  },
  {
    "code": "jax.dlpack.to_dlpack(x)\u00b6",
    "function_name": "to_dlpack",
    "args": ["x"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.build_tree(treedef,xs)\u00b6",
    "function_name": "build_tree",
    "args": ["treedef", "xs"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.register_pytree_node(nodetype,flatten_func,unflatten_func)\u00b6",
    "function_name": "register_pytree_node",
    "args": ["nodetype", "flatten_func", "unflatten_func"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_all(tree)\u00b6",
    "function_name": "tree_all",
    "args": ["tree"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_flatten(tree)\u00b6",
    "function_name": "tree_flatten",
    "args": ["tree"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_leaves(tree)\u00b6",
    "function_name": "tree_leaves",
    "args": ["tree"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_map(f,tree)\u00b6",
    "function_name": "tree_map",
    "args": ["f", "tree"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_multimap(f,tree,*rest)\u00b6",
    "function_name": "tree_multimap",
    "args": ["f", "tree", "*rest"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_reduce(f,tree)\u00b6",
    "function_name": "tree_reduce",
    "args": ["f", "tree"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_structure(tree)\u00b6",
    "function_name": "tree_structure",
    "args": ["tree"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_transpose(outer_treedef,inner_treedef,pytree_to_transpose)\u00b6",
    "function_name": "tree_transpose",
    "args": ["outer_treedef", "inner_treedef", "pytree_to_transpose"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.tree_unflatten(treedef,leaves)\u00b6",
    "function_name": "tree_unflatten",
    "args": ["treedef", "leaves"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.treedef_children(treedef)\u00b6",
    "function_name": "treedef_children",
    "args": ["treedef"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.treedef_is_leaf(treedef)\u00b6",
    "function_name": "treedef_is_leaf",
    "args": ["treedef"],
    "kwargs": []
  },
  {
    "code": "jax.tree_util.treedef_tuple(treedefs)\u00b6",
    "function_name": "treedef_tuple",
    "args": ["treedefs"],
    "kwargs": []
  },
  {
    "code": "jax.random.PRNGKey(seed)\u00b6",
    "function_name": "PRNGKey",
    "args": ["seed"],
    "kwargs": []
  },
  {
    "code": "jax.random.bernoulli(key,p=0.5,shape=None)\u00b6",
    "function_name": "bernoulli",
    "args": ["key"],
    "kwargs": [
      ["p", "0.5"],
      ["shape", "None"]
    ]
  },
  {
    "code": "jax.random.fold_in(key,data)\u00b6",
    "function_name": "fold_in",
    "args": ["key", "data"],
    "kwargs": []
  },
  {
    "code": "jax.random.shuffle(key,x,axis=0)\u00b6",
    "function_name": "shuffle",
    "args": ["key", "x"],
    "kwargs": [
      ["axis", "0"]
    ]
  },
  {
    "code": "jax.random.split(key,num=2)\u00b6",
    "function_name": "split",
    "args": ["key"],
    "kwargs": [
      ["num", "2"]
    ]
  },
  {
    "code": "jax.random.threefry_2x32(keypair,count)\u00b6",
    "function_name": "threefry_2x32",
    "args": ["keypair", "count"],
    "kwargs": []
  },
  {
    "code": "jax.disable_jit()\u00b6",
    "function_name": "disable_jit",
    "args": [""],
    "kwargs": []
  },
  {
    "code": "jax.device_put(x,device=None)\u00b6",
    "function_name": "device_put",
    "args": ["x"],
    "kwargs": [
      ["device", "None"]
    ]
  },
  {
    "code": "jax.custom_transforms(fun)\u00b6",
    "function_name": "custom_transforms",
    "args": ["fun"],
    "kwargs": []
  },
  {
    "code": "jax.defjvp(fun,*jvprules)\u00b6",
    "function_name": "defjvp",
    "args": ["fun", "*jvprules"],
    "kwargs": []
  },
  {
    "code": "jax.defjvp_all(fun,custom_jvp)\u00b6",
    "function_name": "defjvp_all",
    "args": ["fun", "custom_jvp"],
    "kwargs": []
  },
  {
    "code": "jax.defvjp(fun,*vjprules)\u00b6",
    "function_name": "defvjp",
    "args": ["fun", "*vjprules"],
    "kwargs": []
  },
  {
    "code": "jax.defvjp_all(fun,custom_vjp)\u00b6",
    "function_name": "defvjp_all",
    "args": ["fun", "custom_vjp"],
    "kwargs": []
  },
  {
    "code": "jax.custom_gradient(fun)\u00b6",
    "function_name": "custom_gradient",
    "args": ["fun"],
    "kwargs": []
  },
  {
    "code": "jax.devices(backend=None)\u00b6",
    "function_name": "devices",
    "args": [],
    "kwargs": [
      ["backend", "None"]
    ]
  },
  {
    "code": "jax.local_devices(host_id=None,backend=None)\u00b6",
    "function_name": "local_devices",
    "args": [],
    "kwargs": [
      ["host_id", "None"],
      ["backend", "None"]
    ]
  },
  {
    "code": "jax.host_id(backend=None)\u00b6",
    "function_name": "host_id",
    "args": [],
    "kwargs": [
      ["backend", "None"]
    ]
  },
  {
    "code": "jax.host_ids(backend=None)\u00b6",
    "function_name": "host_ids",
    "args": [],
    "kwargs": [
      ["backend", "None"]
    ]
  },
  {
    "code": "jax.device_count(backend=None)\u00b6",
    "function_name": "device_count",
    "args": [],
    "kwargs": [
      ["backend", "None"]
    ]
  },
  {
    "code": "jax.local_device_count(backend=None)\u00b6",
    "function_name": "local_device_count",
    "args": [],
    "kwargs": [
      ["backend", "None"]
    ]
  },
  {
    "code": "jax.host_count(backend=None)\u00b6",
    "function_name": "host_count",
    "args": [],
    "kwargs": [
      ["backend", "None"]
    ]
  }
]
[
{"code": "jax.dlpack.from_dlpack(dlpack,backend=None)\u00b6", "function_name": "from_dlpack", "args": ["dlpack"], "kwargs": [["backend", "None"]]},
{"code": "jax.dlpack.to_dlpack(x)\u00b6", "function_name": "to_dlpack", "args": ["x"], "kwargs": []},
{"code": "jax.tree_util.all_leaves(iterable)\u00b6", "function_name": "all_leaves", "args": ["iterable"], "kwargs": []},
{"code": "jax.tree_util.build_tree(treedef,xs)\u00b6", "function_name": "build_tree", "args": ["treedef", "xs"], "kwargs": []},
{"code": "jax.tree_util.register_pytree_node(nodetype,flatten_func,unflatten_func)\u00b6", "function_name": "register_pytree_node", "args": ["nodetype", "flatten_func", "unflatten_func"], "kwargs": []},
{"code": "jax.tree_util.register_pytree_node_class(cls)\u00b6", "function_name": "register_pytree_node_class", "args": ["cls"], "kwargs": []},
{"code": "jax.tree_util.tree_all(tree)\u00b6", "function_name": "tree_all", "args": ["tree"], "kwargs": []},
{"code": "jax.tree_util.tree_flatten(tree)\u00b6", "function_name": "tree_flatten", "args": ["tree"], "kwargs": []},
{"code": "jax.tree_util.tree_leaves(tree)\u00b6", "function_name": "tree_leaves", "args": ["tree"], "kwargs": []},
{"code": "jax.tree_util.tree_map(f,tree)\u00b6", "function_name": "tree_map", "args": ["f", "tree"], "kwargs": []},
{"code": "jax.tree_util.tree_multimap(f,tree,*rest)\u00b6", "function_name": "tree_multimap", "args": ["f", "tree", "*rest"], "kwargs": []},
{"code": "jax.tree_util.tree_structure(tree)\u00b6", "function_name": "tree_structure", "args": ["tree"], "kwargs": []},
{"code": "jax.tree_util.tree_transpose(outer_treedef,inner_treedef,pytree_to_transpose)\u00b6", "function_name": "tree_transpose", "args": ["outer_treedef", "inner_treedef", "pytree_to_transpose"], "kwargs": []},
{"code": "jax.tree_util.tree_unflatten(treedef,leaves)\u00b6", "function_name": "tree_unflatten", "args": ["treedef", "leaves"], "kwargs": []},
{"code": "jax.tree_util.treedef_children(treedef)\u00b6", "function_name": "treedef_children", "args": ["treedef"], "kwargs": []},
{"code": "jax.tree_util.treedef_is_leaf(treedef)\u00b6", "function_name": "treedef_is_leaf", "args": ["treedef"], "kwargs": []},
{"code": "jax.tree_util.treedef_tuple(treedefs)\u00b6", "function_name": "treedef_tuple", "args": ["treedefs"], "kwargs": []},
{"code": "jax.random.PRNGKey(seed)\u00b6", "function_name": "PRNGKey", "args": ["seed"], "kwargs": []},
{"code": "jax.random.apply_round(v,rot)\u00b6", "function_name": "apply_round", "args": ["v", "rot"], "kwargs": []},
{"code": "jax.random.bernoulli(key,p=0.5,shape=None)\u00b6", "function_name": "bernoulli", "args": ["key"], "kwargs": [["p", "0.5"], ["shape", "None"]]},
{"code": "jax.random.fold_in(key,data)\u00b6", "function_name": "fold_in", "args": ["key", "data"], "kwargs": []},
{"code": "jax.random.permutation(key,x)\u00b6", "function_name": "permutation", "args": ["key", "x"], "kwargs": []},
{"code": "jax.random.rolled_loop_step(i,state)\u00b6", "function_name": "rolled_loop_step", "args": ["i", "state"], "kwargs": []},
{"code": "jax.random.rotate_left(x,d)\u00b6", "function_name": "rotate_left", "args": ["x", "d"], "kwargs": []},
{"code": "jax.random.rotate_list(xs)\u00b6", "function_name": "rotate_list", "args": ["xs"], "kwargs": []},
{"code": "jax.random.shuffle(key,x,axis=0)\u00b6", "function_name": "shuffle", "args": ["key", "x"], "kwargs": [["axis", "0"]]},
{"code": "jax.random.split(key,num=2)\u00b6", "function_name": "split", "args": ["key"], "kwargs": [["num", "2"]]},
{"code": "jax.random.threefry_2x32(keypair,count)\u00b6", "function_name": "threefry_2x32", "args": ["keypair", "count"], "kwargs": []},
{"code": "jax.disable_jit()\u00b6", "function_name": "disable_jit", "args": [""], "kwargs": []},
{"code": "jax.eval_shape(fun,*args,**kwargs)\u00b6", "function_name": "eval_shape", "args": ["fun", "*args", "**kwargs"], "kwargs": []},
{"code": "jax.device_put(x,device=None)\u00b6", "function_name": "device_put", "args": ["x"], "kwargs": [["device", "None"]]},
{"code": "jax.grad(fun,argnums=0,has_aux=False,holomorphic=False)\u00b6", "function_name": "grad", "args": ["fun"], "kwargs": [["argnums", "0"], ["has_aux", "False"], ["holomorphic", "False"]]},
{"code": "jax.value_and_grad(fun,argnums=0,has_aux=False,holomorphic=False)\u00b6", "function_name": "value_and_grad", "args": ["fun"], "kwargs": [["argnums", "0"], ["has_aux", "False"], ["holomorphic", "False"]]},
{"code": "jax.jacfwd(fun,argnums=0,holomorphic=False)\u00b6", "function_name": "jacfwd", "args": ["fun"], "kwargs": [["argnums", "0"], ["holomorphic", "False"]]},
{"code": "jax.jacrev(fun,argnums=0,holomorphic=False)\u00b6", "function_name": "jacrev", "args": ["fun"], "kwargs": [["argnums", "0"], ["holomorphic", "False"]]},
{"code": "jax.hessian(fun,argnums=0,holomorphic=False)\u00b6", "function_name": "hessian", "args": ["fun"], "kwargs": [["argnums", "0"], ["holomorphic", "False"]]},
{"code": "jax.jvp(fun,primals,tangents)\u00b6", "function_name": "jvp", "args": ["fun", "primals", "tangents"], "kwargs": []},
{"code": "jax.linearize(fun,*primals)\u00b6", "function_name": "linearize", "args": ["fun", "*primals"], "kwargs": []},
{"code": "jax.vjp(fun,*primals,**kwargs)\u00b6", "function_name": "vjp", "args": ["fun", "*primals", "**kwargs"], "kwargs": []},
{"code": "jax.vmap(fun,in_axes=0,out_axes=0)\u00b6", "function_name": "vmap", "args": ["fun"], "kwargs": [["in_axes", "0"], ["out_axes", "0"]]},
{"code": "jax.devices(backend=None)\u00b6", "function_name": "devices", "args": [], "kwargs": [["backend", "None"]]},
{"code": "jax.local_devices(host_id=None,backend=None)\u00b6", "function_name": "local_devices", "args": [], "kwargs": [["host_id", "None"], ["backend", "None"]]},
{"code": "jax.host_id(backend=None)\u00b6", "function_name": "host_id", "args": [], "kwargs": [["backend", "None"]]},
{"code": "jax.host_ids(backend=None)\u00b6", "function_name": "host_ids", "args": [], "kwargs": [["backend", "None"]]},
{"code": "jax.device_count(backend=None)\u00b6", "function_name": "device_count", "args": [], "kwargs": [["backend", "None"]]},
{"code": "jax.local_device_count(backend=None)\u00b6", "function_name": "local_device_count", "args": [], "kwargs": [["backend", "None"]]},
{"code": "jax.host_count(backend=None)\u00b6", "function_name": "host_count", "args": [], "kwargs": [["backend", "None"]]}
]